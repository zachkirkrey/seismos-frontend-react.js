{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n  const remove = event => {\n    console.log(event.target.getAttribute('data-gridData'));\n  };\n\n  const component = rowIdx => {\n    return /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: event => remove(event),\n      gridData: wellInfoGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  };\n\n  const isForcedComponent = column => {\n    return column.actionColumn;\n  };\n\n  const populateWillInfoGrid = () => {\n    const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const columns = [];\n      TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n        const componentData = column.actionColumn ? component(rowIdx) : null;\n        const className = column.actionColumn ? \"noborder\" : \"\";\n        columns.push({\n          value: column.defaultValue,\n          field: column.field,\n          required: column.required,\n          component: componentData,\n          forceComponent: isForcedComponent(column),\n          className: className\n        });\n        return column;\n      });\n      return rows.concat([columns]);\n    }, []);\n    console.log(grid);\n    setWellInfoGrid(grid);\n  };\n\n  const addNewWell = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n      // const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n      const componentData = column.actionColumn ? component(wellInfoGrid.length) : null;\n      const className = column.actionColumn ? \"noborder\" : \"\";\n      columns.push({\n        value: column.defaultValue,\n        field: column.field,\n        required: column.required,\n        component: componentData,\n        forceComponent: isForcedComponent(column),\n        className: className\n      });\n      return column;\n    });\n    const newWellInfoGrid = [...wellInfoGrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == \"action\" ? component(index) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }), columns];\n    setWellInfoGrid(newWellInfoGrid);\n  };\n\n  const handleWellInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setWellInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isWellInfoValid = true;\n\n    const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n\n    validatedWellGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isWellInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isWellInfoValid) {\n      handleWellInfoGridChanged(validatedWellGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setWellInfoGrid(props.formValues);\n    } else {\n      populateWillInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.wellInfoFormTableData.columns,\n        grid: wellInfoGrid,\n        gridValueChanged: handleWellInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewWell(e),\n        children: \"+ Add a new well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"SRaAPwljMBTjwdbaxo29KTstSn0=\");\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","MinusCircleOutlined","WellInfo","props","wellInfoGrid","setWellInfoGrid","remove","event","console","log","target","getAttribute","component","rowIdx","isForcedComponent","column","actionColumn","populateWillInfoGrid","grid","wellInfoFormTableData","reduce","rows","t","columns","map","componentData","className","push","value","defaultValue","field","required","forceComponent","concat","addNewWell","e","preventDefault","length","newWellInfoGrid","x","index","y","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","cloneDeep","row","cell","next","formValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n    const remove = (event) => {\n        console.log(event.target.getAttribute('data-gridData'))\n    }\n\n    const component = (rowIdx) => {\n        return <MinusCircleOutlined onClick={(event) => remove(event)} gridData={wellInfoGrid}/>;\n    }\n\n    const isForcedComponent = (column) => {\n        return column.actionColumn;\n    }\n\n    const populateWillInfoGrid = () => {\n        const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const componentData = column.actionColumn ? component(rowIdx) : null\n                const className = column.actionColumn ? \"noborder\" : \"\";\n                columns.push({\n                    value: column.defaultValue,\n                    field: column.field,\n                    required: column.required,\n                    component: componentData,\n                    forceComponent: isForcedComponent(column),\n                    className: className\n                });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, [])\n        console.log(grid);\n        setWellInfoGrid(grid);\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            // const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n            const componentData = column.actionColumn ? component(wellInfoGrid.length) : null\n            const className = column.actionColumn ? \"noborder\" : \"\";\n            columns.push({\n                value: column.defaultValue,\n                field: column.field,\n                required: column.required,\n                component: componentData,\n                forceComponent: isForcedComponent(column),\n                className: className\n            });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid.map((x, index) => {\n                return x.map(y => { \n                    const componentData = y.field == \"action\" ? component(index) : null\n                    return {\n                        ...y,\n                        component: componentData\n                    }\n                })\n            }),\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid);\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        validatedWellGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isWellInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n\n        if(!isWellInfoValid) {\n            handleWellInfoGridChanged(validatedWellGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues);\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}