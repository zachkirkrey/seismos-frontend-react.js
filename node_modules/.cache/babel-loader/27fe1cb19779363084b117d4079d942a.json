{"ast":null,"code":"import _slicedToArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from'antd';import TableHeadersUtil from\"util/TableHeaderUtil\";import Grid from\"components/Grid/Grid\";import _ from\"lodash\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ProjectInfo(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),projectInfoGrid=_useState2[0],setProjectInfoGrid=_useState2[1];var getProjectInfoGridRow=function getProjectInfoGridRow(t){return t.rows.map(function(row){console.log(row.field);return[{value:row.label,readOnly:true,disableEvents:true},{value:\"\",field:row.field,required:row.required}];});};var populateProjectInfoGrid=function populateProjectInfoGrid(){setProjectInfoGrid(TableHeadersUtil.projectInfoFormTableData.grid.reduce(function(rows,t,rowIdx){return rows.concat(getProjectInfoGridRow(t));},[]));};var handleProjectInfoGridChanged=function handleProjectInfoGridChanged(updatedGridData){console.log(updatedGridData);props.setFormValue(updatedGridData);setProjectInfoGrid(updatedGridData);};var gotoNextStep=function gotoNextStep(){var isProjectInfoValid=true;var validatedProjectInfoGrid=_.cloneDeep(projectInfoGrid);validatedProjectInfoGrid.map(function(row){row.map(function(cell){if(cell.required&&cell.value===\"\"){isProjectInfoValid=false;cell.className='cell-error';}return cell;});return row;});if(!isProjectInfoValid){handleProjectInfoGridChanged(validatedProjectInfoGrid);}else{props.next();}};useState(function(){if(props.formValues!=null){props.formValues&&setProjectInfoGrid(props.formValues);}else{populateProjectInfoGrid();}},props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"mb-8\",style:{width:'50%',marginLeft:'auto',marginRight:'auto'},children:/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.projectInfoFormTableData.columns,grid:projectInfoGrid,gridValueChanged:handleProjectInfoGridChanged,className:\"no-header-grid mb-8\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:function onClick(e){gotoNextStep();},children:\"Next\"})})]});}","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ProjectInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","ProjectInfo","props","projectInfoGrid","setProjectInfoGrid","getProjectInfoGridRow","t","rows","map","row","console","log","field","value","label","readOnly","disableEvents","required","populateProjectInfoGrid","projectInfoFormTableData","grid","reduce","rowIdx","concat","handleProjectInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isProjectInfoValid","validatedProjectInfoGrid","cloneDeep","cell","className","next","formValues","width","marginLeft","marginRight","columns","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function ProjectInfo(props) {\n    \n    const [projectInfoGrid, setProjectInfoGrid] = useState([]);\n\n    const getProjectInfoGridRow = (t) => {\n        return t.rows.map(row => {\n            console.log(row.field)\n            return [\n                { value: row.label, readOnly: true, disableEvents: true},\n                { value: \"\", field: row.field, required: row.required },\n            ]\n        })\n    }\n\n    const populateProjectInfoGrid = () => {\n        setProjectInfoGrid(TableHeadersUtil.projectInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getProjectInfoGridRow(t));\n        }, []));\n    }\n\n    const handleProjectInfoGridChanged = (updatedGridData) => {\n        console.log(updatedGridData)\n        props.setFormValue(updatedGridData);\n        setProjectInfoGrid(updatedGridData)\n    }\n\n    const gotoNextStep = () => {\n        let isProjectInfoValid = true;\n        const validatedProjectInfoGrid = _.cloneDeep(projectInfoGrid);\n        validatedProjectInfoGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isProjectInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            });\n            return row;\n        })\n        if(!isProjectInfoValid) {\n            handleProjectInfoGridChanged(validatedProjectInfoGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setProjectInfoGrid(props.formValues);\n        } else {\n            populateProjectInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '50%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.projectInfoFormTableData.columns}\n                    grid={projectInfoGrid}\n                    gridValueChanged={handleProjectInfoGridChanged}\n                    className=\"no-header-grid mb-8\"\n                ></Grid>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}