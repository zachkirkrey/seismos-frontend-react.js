{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n  const populateWillInfoGrid = () => {\n    setWellInfoGrid(TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const rowValues = [[{\n        value: \"Well 1\"\n      }, {\n        value: \"\"\n      }, {\n        value: \"\"\n      }, {\n        value: \"\"\n      }, {\n        value: \"\"\n      }, {\n        value: \"\"\n      }]];\n      const columns = [];\n      TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n        columns.push({\n          value: column.defaultValue,\n          field: column.field\n        });\n        return column;\n      });\n      return rows.concat([columns]);\n    }, []));\n  };\n\n  const addNewWell = e => {\n    e.preventDefault();\n    const newWellInfoGrid = [...wellInfoGrid, [{\n      value: \"Well \" + (wellInfoGrid.length + 1)\n    }, {\n      value: \"\"\n    }, {\n      value: \"\"\n    }, {\n      value: \"\"\n    }, {\n      value: \"\"\n    }, {\n      value: \"\"\n    }]];\n    setWellInfoGrid(newWellInfoGrid);\n  };\n\n  const handleWellInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setWellInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    props.next();\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setWellInfoGrid(props.formValues);\n    } else {\n      populateWillInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.wellInfoFormTableData.columns,\n        grid: wellInfoGrid,\n        gridValueChanged: handleWellInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewWell(e),\n        children: \"+ Add a new well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"SRaAPwljMBTjwdbaxo29KTstSn0=\");\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","WellInfo","props","wellInfoGrid","setWellInfoGrid","populateWillInfoGrid","wellInfoFormTableData","grid","reduce","rows","t","rowIdx","rowValues","value","columns","map","column","push","defaultValue","field","concat","addNewWell","e","preventDefault","newWellInfoGrid","length","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","next","formValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n    const populateWillInfoGrid = () => {\n        setWellInfoGrid(TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const rowValues = [\n                [\n                    { value: \"Well 1\" },\n                    { value: \"\" },\n                    { value: \"\" },\n                    { value: \"\" },\n                    { value: \"\" },\n                    { value: \"\" },\n                ]\n            ]\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                columns.push({ value: column.defaultValue, field: column.field});\n                return column;\n            })\n            return rows.concat([columns]);\n        }, []))\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const newWellInfoGrid = [\n            ...wellInfoGrid,\n            [\n                { value: \"Well \" +  (wellInfoGrid.length + 1)},\n                { value: \"\" },\n                { value: \"\" },\n                { value: \"\" },\n                { value: \"\" },\n                { value: \"\" },\n            ]\n        ];\n        setWellInfoGrid(newWellInfoGrid);\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        props.next();\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues);\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}