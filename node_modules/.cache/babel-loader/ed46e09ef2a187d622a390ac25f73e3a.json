{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SheetRenderer = props => {\n  const {\n    className,\n    columns\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: className + \" seismos-spreadsheet-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          className: `cell ${className}`,\n          style: {\n            width: col.width,\n            background: \"#f9f9f9\",\n            padding: \"10px 0px\",\n            textAlign: \"center\"\n          },\n          colSpan: col.colSpan ? col.colSpan : 1,\n          children: col.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SheetRenderer;\n\nconst CellRenderer = props => {\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"cell\",\n    style: {\n      textAlign: \"center\"\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = CellRenderer;\nexport default function Gxrid(props) {\n  _s();\n\n  const [columns, setColumns] = useState();\n  const [grid, setGrid] = useState();\n\n  const renderSheet = sheetProps => {\n    return /*#__PURE__*/_jsxDEV(SheetRenderer, {\n      columns: columns,\n      ...sheetProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderRow = rowProps => {\n    const {\n      row,\n      cells,\n      ...rest\n    } = rowProps;\n    return /*#__PURE__*/_jsxDEV(CellRenderer, {\n      rowIndex: row,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  };\n\n  useEffect(() => {\n    console.log(props);\n    setColumns(props.columns);\n    setGrid(props.grid);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: props.width ? props.width : \"100%\"\n    },\n    children: grid && /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n      data: grid,\n      valueRenderer: cell => cell.value,\n      sheetRenderer: renderSheet,\n      className: props.className,\n      isCellNavigable: (cell, row, col) => {\n        return !cell.disableEvents ? true : false;\n      } // cellRenderer={renderRow}\n      ,\n      onCellsChanged: changes => {\n        const gridData = grid.map(row => [...row]);\n        changes.forEach(({\n          cell,\n          row,\n          col,\n          value\n        }) => {\n          gridData[row][col] = { ...gridData[row][col],\n            value\n          };\n        });\n        setGrid(gridData);\n        props.gridValueChanged(gridData);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n} // class Grid extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       columns: props.columns,\n//       grid: props.grid,\n//       className: props.className\n//     }\n//     this.renderSheet = this.renderSheet.bind(this);\n//     this.renderRow = this.renderRow.bind(this);\n//   }\n//   renderSheet(props) {\n//     return <SheetRenderer columns={this.state.columns} {...props} />;\n//   }\n//   renderRow(props) {\n//     const { row, cells, ...rest } = props;\n//     return <CellRenderer rowIndex={row} {...rest} />;\n//   }\n//   render() {\n//     return (\n//       <div style={{ width: this.props.width ? this.props.width : \"100%\" }}>\n//         <ReactDataSheet\n//             data={this.state.grid}\n//             valueRenderer={cell => cell.value}\n//             sheetRenderer={this.renderSheet}\n//             className={this.state.className}\n//             isCellNavigable={(cell, row, col) => {return !cell.disableEvents ? true : false}}\n//             // cellRenderer={this.renderRow}\n//             onCellsChanged={changes => {\n//                 const grid = this.state.grid.map(row => [...row]);\n//                     changes.forEach(({ cell, row, col, value }) => {\n//                     grid[row][col] = { ...grid[row][col], value };\n//                 });\n//                 this.setState({ grid });\n//             }}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// export default Grid;\n\n_s(Gxrid, \"MZoDtHo1giPfeM50l2VPHULcZj0=\");\n\n_c3 = Gxrid;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SheetRenderer\");\n$RefreshReg$(_c2, \"CellRenderer\");\n$RefreshReg$(_c3, \"Gxrid\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/Grid.js"],"names":["React","useEffect","useState","ReactDataSheet","SheetRenderer","props","className","columns","map","col","index","width","background","padding","textAlign","colSpan","label","children","CellRenderer","Gxrid","setColumns","grid","setGrid","renderSheet","sheetProps","renderRow","rowProps","row","cells","rest","console","log","cell","value","disableEvents","changes","gridData","forEach","gridValueChanged"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./Grid.css\";\n\nconst SheetRenderer = props => {\n    const { className, columns } = props;\n    \n    return (\n        <table className={className + \" seismos-spreadsheet-grid\"}>\n            <thead>\n                <tr>\n                {columns.map((col, index) => (\n                    <th\n                    className={`cell ${className}`}\n                    style={{\n                        width: col.width,\n                        background: \"#f9f9f9\",\n                        padding: \"10px 0px\",\n                        textAlign: \"center\"\n                    }}\n                    colSpan={col.colSpan ? col.colSpan : 1}\n                    >\n                    {col.label}\n                    </th>\n                ))}\n                </tr>\n            </thead>\n            <tbody>{props.children}</tbody>\n        </table>\n    );\n    };\n\n    const CellRenderer = props => {\n    const { children } = props;\n    return (\n        <td className=\"cell\" style={{ textAlign: \"center\" }}>\n        {children}\n        </td>\n    );\n    };\n\n    export default function Gxrid(props) {\n\n    const [columns, setColumns] = useState();\n    const [grid, setGrid] = useState();\n\n    const renderSheet = (sheetProps) => {\n        return <SheetRenderer columns={columns} {...sheetProps} />;\n    }\n\n    const renderRow = (rowProps) => {\n        const { row, cells, ...rest } = rowProps;\n        return <CellRenderer rowIndex={row} {...rest} />;\n    }\n\n    useEffect(() => {\n        console.log(props)\n        setColumns(props.columns);\n        setGrid(props.grid);\n    }, [props]);\n\n    return (\n        <div style={{ width: props.width ? props.width : \"100%\" }}>\n        {grid && <ReactDataSheet\n            data={grid}\n            valueRenderer={cell => cell.value}\n            sheetRenderer={renderSheet}\n            className={props.className}\n            isCellNavigable={(cell, row, col) => {return !cell.disableEvents ? true : false}}\n            // cellRenderer={renderRow}\n            onCellsChanged={changes => {\n                const gridData = grid.map(row => [...row]);\n                    changes.forEach(({ cell, row, col, value }) => {\n                    gridData[row][col] = { ...gridData[row][col], value };\n                });\n                setGrid(gridData);\n                props.gridValueChanged(gridData);\n            }}\n        />}\n        </div>\n    );\n    }\n\n    // class Grid extends React.Component {\n    //   constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //       columns: props.columns,\n    //       grid: props.grid,\n    //       className: props.className\n    //     }\n    //     this.renderSheet = this.renderSheet.bind(this);\n    //     this.renderRow = this.renderRow.bind(this);\n    //   }\n\n    //   renderSheet(props) {\n    //     return <SheetRenderer columns={this.state.columns} {...props} />;\n    //   }\n\n    //   renderRow(props) {\n    //     const { row, cells, ...rest } = props;\n    //     return <CellRenderer rowIndex={row} {...rest} />;\n    //   }\n\n    //   render() {\n    //     return (\n    //       <div style={{ width: this.props.width ? this.props.width : \"100%\" }}>\n    //         <ReactDataSheet\n    //             data={this.state.grid}\n    //             valueRenderer={cell => cell.value}\n    //             sheetRenderer={this.renderSheet}\n    //             className={this.state.className}\n    //             isCellNavigable={(cell, row, col) => {return !cell.disableEvents ? true : false}}\n    //             // cellRenderer={this.renderRow}\n    //             onCellsChanged={changes => {\n    //                 const grid = this.state.grid.map(row => [...row]);\n    //                     changes.forEach(({ cell, row, col, value }) => {\n    //                     grid[row][col] = { ...grid[row][col], value };\n    //                 });\n    //                 this.setState({ grid });\n    //             }}\n    //         />\n    //       </div>\n    //     );\n    //   }\n    // }\n\n    // export default Grid;\n"]},"metadata":{},"sourceType":"module"}