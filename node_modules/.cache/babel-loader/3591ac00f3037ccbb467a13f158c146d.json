{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellVolume(props) {\n  _s();\n\n  const [wellVolumeGrid, setWellVolumeGrid] = useState([]);\n  const [wellVolumeEstimationsGrid, setWellVolumeEstimationsGrid] = useState([]);\n\n  const getWellVolumeGridRow = t => {\n    return t.rows.map(label => {\n      const columns = [];\n      TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n        const defaultVal = column.field === \"type\" ? label : \"\";\n        columns.push({\n          value: defaultVal,\n          field: column.field\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const getWellVolumeEstimationsGridRow = t => {\n    return t.rows.map(label => {\n      return [{\n        value: \"\"\n      }, {\n        value: label,\n        readOnly: true,\n        disableEvents: true\n      }];\n    });\n  };\n\n  const populateWellVolumeGrid = () => {\n    setWellVolumeGrid(TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeGridRow(t));\n    }, []));\n  };\n\n  const populateWellVolumeEstimationsGrid = () => {\n    setWellVolumeEstimationsGrid(TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeEstimationsGridRow(t));\n    }, []));\n  };\n\n  const handleWellVolumeGridChanged = updatedGridData => {\n    props.setWellVolumeFormValue(updatedGridData);\n    setWellVolumeGrid(updatedGridData);\n  };\n\n  const handleWellVolumeEstimationsGridChanged = updatedGridData => {\n    props.setWellVolumeEstimationsFormValue(updatedGridData);\n    setWellVolumeEstimationsGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    props.next();\n  };\n\n  useState(() => {\n    if (props.wellVolumeFormValues != null) {\n      props.wellVolumeFormValues && setWellVolumeGrid(props.wellVolumeFormValues);\n    } else {\n      populateWellVolumeGrid();\n    }\n\n    if (props.wellVolumeEstimationsFormValues != null) {\n      props.wellVolumeEstimationsFormValues && setWellVolumeEstimationsGrid(props.wellVolumeEstimationsFormValues);\n    } else {\n      populateWellVolumeEstimationsGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"well-volume-grid mb-8\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.wellVolumeFormTableData.columns,\n          grid: wellVolumeGrid,\n          gridValueChanged: handleWellVolumeGridChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"well-volume-estimation-grid mb-8\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.wellVolumeEstimationsFormTableData.columns,\n          grid: wellVolumeEstimationsGrid,\n          gridValueChanged: handleWellVolumeEstimationsGridChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellVolume, \"iIsvWmADX3Rx1nh1BBxy2eOyWEU=\");\n\n_c = WellVolume;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellVolume\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","WellVolume","props","wellVolumeGrid","setWellVolumeGrid","wellVolumeEstimationsGrid","setWellVolumeEstimationsGrid","getWellVolumeGridRow","t","rows","map","label","columns","wellVolumeFormTableData","column","defaultVal","field","push","value","getWellVolumeEstimationsGridRow","readOnly","disableEvents","populateWellVolumeGrid","grid","reduce","rowIdx","concat","populateWellVolumeEstimationsGrid","wellVolumeEstimationsFormTableData","handleWellVolumeGridChanged","updatedGridData","setWellVolumeFormValue","handleWellVolumeEstimationsGridChanged","setWellVolumeEstimationsFormValue","gotoNextStep","next","wellVolumeFormValues","wellVolumeEstimationsFormValues","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\n\nexport default function WellVolume(props) {\n    \n    const [wellVolumeGrid, setWellVolumeGrid] = useState([]);\n    const [wellVolumeEstimationsGrid, setWellVolumeEstimationsGrid] = useState([]);\n\n    const getWellVolumeGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"type\" ? label : \"\";\n                columns.push({ value: defaultVal, field: column.field});\n                return column;\n            })\n            return columns;\n        });\n    }\n\n    const getWellVolumeEstimationsGridRow = (t) => {\n        return t.rows.map(label => {\n            return [\n                { value: \"\" },\n                { value: label, readOnly: true, disableEvents: true },\n            ]\n        })\n    }\n\n    const populateWellVolumeGrid = () => {\n        setWellVolumeGrid(TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeGridRow(t));\n        }, []))\n    }\n\n    const populateWellVolumeEstimationsGrid = () => {\n        setWellVolumeEstimationsGrid(TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeEstimationsGridRow(t));\n        }, []))\n    }\n\n    const handleWellVolumeGridChanged = (updatedGridData) => {\n        props.setWellVolumeFormValue(updatedGridData);\n        setWellVolumeGrid(updatedGridData)\n    }\n\n    const handleWellVolumeEstimationsGridChanged = (updatedGridData) => {\n        props.setWellVolumeEstimationsFormValue(updatedGridData);\n        setWellVolumeEstimationsGrid(updatedGridData)\n    }\n\n    const gotoNextStep = () => {\n        props.next();\n    }\n\n    useState(() => {\n        if(props.wellVolumeFormValues != null) {\n            props.wellVolumeFormValues && setWellVolumeGrid(props.wellVolumeFormValues);\n        } else {\n            populateWellVolumeGrid();\n        }\n        if(props.wellVolumeEstimationsFormValues != null) {\n            props.wellVolumeEstimationsFormValues && setWellVolumeEstimationsGrid(props.wellVolumeEstimationsFormValues);\n        } else {\n            populateWellVolumeEstimationsGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"flex\">\n                <div className=\"well-volume-grid mb-8\">\n                    <Grid \n                        columns={TableHeadersUtil.wellVolumeFormTableData.columns}\n                        grid={wellVolumeGrid}\n                        gridValueChanged={handleWellVolumeGridChanged}\n                    ></Grid>\n                </div>\n                <div className=\"p-4\"></div>\n                <div className=\"well-volume-estimation-grid mb-8\">\n                    <Grid\n                        columns={TableHeadersUtil.wellVolumeEstimationsFormTableData.columns}\n                        grid={wellVolumeEstimationsGrid}\n                        gridValueChanged={handleWellVolumeEstimationsGridChanged}\n                    ></Grid>\n                </div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}