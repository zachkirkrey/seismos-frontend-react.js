{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ClientInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport PasswordInput from \"components/Grid/DataEditor/PasswordInput\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClientInfo(props) {\n  _s();\n\n  const [clientInfoGrid, setClientInfoGrid] = useState([]);\n  const [showConfirmationModal, setShowConfirmationModal] = useState();\n  const [modalData, setModalData] = useState();\n\n  const remove = (rowIdx, grid) => {\n    setShowConfirmationModal(true);\n    setModalData({\n      rowIdx,\n      grid\n    });\n  };\n\n  const handleCancel = () => {\n    setShowConfirmationModal(false);\n    setModalData(null);\n  };\n\n  const handleRemoveConfirmed = data => {\n    console.log(data);\n    data.grid.splice(data.rowIdx, 1);\n    setWellInfoGrid(data.grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, data.grid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n        };\n      });\n    }));\n    setShowConfirmationModal(false);\n    setModalData(null);\n  };\n\n  const component = (rowIdx, grid) => {\n    console.log(rowIdx, grid);\n    return /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: event => remove(rowIdx, grid)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  };\n\n  const isForcedComponent = column => {\n    return column.actionColumn;\n  };\n\n  const getClientInfoGridRow = t => {\n    return t.rows.map(label => {\n      const columns = [];\n      TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n        columns.push({\n          value: \"\",\n          field: column.field,\n          required: column.required,\n          dataEditor: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n          className: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? 'password-cell' : 'test'\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const populateClientInfoGrid = () => {\n    const grid = TableHeadersUtil.clientInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getClientInfoGridRow(t));\n    }, []);\n    setClientInfoGrid(grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, grid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  };\n\n  const addNewClient = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n      columns.push({\n        value: \"\",\n        field: column.field,\n        required: column.required,\n        dataEditor: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n        className: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? 'password-cell' : 'test'\n      });\n      return column;\n    });\n    const newClientInfoGrid = [...clientInfoGrid, columns];\n    setClientInfoGrid(newClientInfoGrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, newClientInfoGrid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  };\n\n  const handleClientInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setClientInfoGrid(updatedGridData.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, updatedGridData) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  };\n\n  const gotoNextStep = () => {\n    let isClientInfoValid = true;\n\n    const validatedClientGrid = _.cloneDeep(clientInfoGrid);\n\n    validatedClientGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isClientInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isClientInfoValid) {\n      handleClientInfoGridChanged(validatedClientGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setClientInfoGrid(props.formValues.map((x, index) => {\n        return x.map(y => {\n          const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, props.formValues) : null;\n          return { ...y,\n            component: componentData,\n            forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n          };\n        });\n      }));\n    } else {\n      populateClientInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        width: '60%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.clientInfoFormTableData.columns,\n        grid: clientInfoGrid,\n        gridValueChanged: handleClientInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewClient(e),\n        children: \"+ Add a new client\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), showConfirmationModal && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      isModalVisible: showConfirmationModal,\n      handleCancel: handleCancel,\n      handleOk: handleRemoveConfirmed,\n      modalTitle: \"Delete Row\",\n      modalText: \"Are you sure you want to delete this row?\",\n      footerButtons: {\n        cancel_text: 'Cancel',\n        confirm_text: 'Yes'\n      },\n      data: modalData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClientInfo, \"j8d0Q23Vyd0EmjjXLqw65MtA7TQ=\");\n\n_c = ClientInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ClientInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","PasswordInput","_","ENUMS","ClientInfo","props","clientInfoGrid","setClientInfoGrid","showConfirmationModal","setShowConfirmationModal","modalData","setModalData","remove","rowIdx","grid","handleCancel","handleRemoveConfirmed","data","console","log","splice","setWellInfoGrid","map","x","index","y","componentData","field","FORM_FIELDS","CLIENT_INFO","ACTION","component","forceComponent","event","isForcedComponent","column","actionColumn","getClientInfoGridRow","t","rows","label","columns","clientInfoFormTableData","push","value","required","dataEditor","PASSWORD","className","populateClientInfoGrid","reduce","concat","addNewClient","e","preventDefault","newClientInfoGrid","handleClientInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isClientInfoValid","validatedClientGrid","cloneDeep","row","cell","next","formValues","width","marginLeft","marginRight","cancel_text","confirm_text"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport PasswordInput from \"components/Grid/DataEditor/PasswordInput\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\n\nexport default function ClientInfo(props) {\n    \n    const [clientInfoGrid, setClientInfoGrid] = useState([]);\n    const [showConfirmationModal, setShowConfirmationModal] = useState();\n    const [modalData, setModalData] = useState();\n\n    const remove = (rowIdx, grid) => {\n        setShowConfirmationModal(true);\n        setModalData({\n            rowIdx,\n            grid\n        })\n    }\n\n    const handleCancel = () => {\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n\n    const handleRemoveConfirmed = (data) => {\n        console.log(data);\n        data.grid.splice(data.rowIdx, 1);\n        setWellInfoGrid(data.grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, data.grid) : null;\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                }\n            })\n        }));\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n    \n    const component = (rowIdx, grid) => {\n        console.log(rowIdx, grid);\n        return <MinusCircleOutlined onClick={(event) => remove(rowIdx, grid)}/>;\n    }\n\n    const isForcedComponent = (column) => {\n        return column.actionColumn;\n    }\n\n    const getClientInfoGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n                columns.push({\n                    value: \"\",\n                    field: column.field,\n                    required: column.required,\n                    dataEditor: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n                    className: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? 'password-cell': 'test'\n                });\n                return column;\n            })\n            return columns;\n        })\n    }\n\n    const populateClientInfoGrid = () => {\n        const grid = TableHeadersUtil.clientInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getClientInfoGridRow(t));\n        }, [])\n        setClientInfoGrid(grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, grid) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                }\n            })\n        }));\n    }\n\n    const addNewClient = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n            columns.push({ \n                value: \"\",\n                field: column.field,\n                required: column.required,\n                dataEditor: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n                className: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? 'password-cell' : 'test'\n            });\n            return column;\n        })\n        const newClientInfoGrid = [\n            ...clientInfoGrid,\n            columns\n        ];\n        setClientInfoGrid(newClientInfoGrid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, newClientInfoGrid) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                }\n            })\n        }));\n    }\n\n    const handleClientInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setClientInfoGrid(updatedGridData.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, updatedGridData) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                }\n            })\n        }));\n    }\n\n    const gotoNextStep = () => {\n        let isClientInfoValid = true;\n        const validatedClientGrid = _.cloneDeep(clientInfoGrid);\n        validatedClientGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isClientInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        });\n\n        if(!isClientInfoValid) {\n            handleClientInfoGridChanged(validatedClientGrid);\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setClientInfoGrid(props.formValues.map((x, index) => {\n                return x.map(y => { \n                    const componentData = y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, props.formValues) : null\n                    return {\n                        ...y,\n                        component: componentData,\n                        forceComponent: y.field == ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                    }\n                })\n            }));\n        } else {\n            populateClientInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '60%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.clientInfoFormTableData.columns}\n                    grid={clientInfoGrid}\n                    gridValueChanged={handleClientInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewClient(e)}>+ Add a new client</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n            {\n                showConfirmationModal && <ConfirmationModal\n                    isModalVisible={showConfirmationModal}\n                    handleCancel={handleCancel}\n                    handleOk={handleRemoveConfirmed}\n                    modalTitle={\"Delete Row\"}\n                    modalText={\"Are you sure you want to delete this row?\"}\n                    footerButtons={{cancel_text: 'Cancel', confirm_text: 'Yes'}}\n                    data={modalData}\n                >\n                </ConfirmationModal>\n            }\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}