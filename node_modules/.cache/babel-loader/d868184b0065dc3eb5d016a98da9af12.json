{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n  const remove = (rows, index) => {\n    if (rows.length > 1) {\n      const grid = _.cloneDeep(rows);\n\n      console.log(grid, 'herrr');\n      setWellInfoGrid(grid);\n    }\n  };\n\n  const component = rowIdx => {\n    return /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: () => remove(rowIdx)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 16\n    }, this);\n  };\n\n  const isForcedComponent = column => {\n    return column.actionColumn;\n  };\n\n  const populateWillInfoGrid = () => {\n    const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const columns = [];\n      TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n        const componentData = column.actionColumn ? component(rows, rowIdx) : null;\n        const className = column.actionColumn ? \"noborder\" : \"\";\n        columns.push({\n          value: column.defaultValue,\n          field: column.field,\n          required: column.required,\n          component: componentData,\n          forceComponent: isForcedComponent(column),\n          className: className\n        });\n        return column;\n      });\n      return rows.concat([columns]);\n    }, []);\n    console.log(grid);\n    setWellInfoGrid(grid);\n  };\n\n  const addNewWell = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n      // const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n      const componentData = column.actionColumn ? component(wellInfoGrid, wellInfoGrid.length) : null;\n      const className = column.actionColumn ? \"noborder\" : \"\";\n      columns.push({\n        value: column.defaultValue,\n        field: column.field,\n        required: column.required,\n        component: componentData,\n        forceComponent: isForcedComponent(column),\n        className: className\n      });\n      return column;\n    });\n    const newWellInfoGrid = [...wellInfoGrid, columns];\n    setWellInfoGrid(newWellInfoGrid);\n  };\n\n  const handleWellInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setWellInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isWellInfoValid = true;\n\n    const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n\n    validatedWellGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isWellInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isWellInfoValid) {\n      handleWellInfoGridChanged(validatedWellGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setWellInfoGrid(props.formValues);\n    } else {\n      populateWillInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.wellInfoFormTableData.columns,\n        grid: wellInfoGrid,\n        gridValueChanged: handleWellInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewWell(e),\n        children: \"+ Add a new well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"SRaAPwljMBTjwdbaxo29KTstSn0=\");\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","MinusCircleOutlined","WellInfo","props","wellInfoGrid","setWellInfoGrid","remove","rows","index","length","grid","cloneDeep","console","log","component","rowIdx","isForcedComponent","column","actionColumn","populateWillInfoGrid","wellInfoFormTableData","reduce","t","columns","map","componentData","className","push","value","defaultValue","field","required","forceComponent","concat","addNewWell","e","preventDefault","newWellInfoGrid","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","row","cell","next","formValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n    const remove = (rows, index) => {\n        if (rows.length > 1) {\n            const grid = _.cloneDeep(rows);\n            console.log(grid, 'herrr')\n            setWellInfoGrid(grid);\n        }\n    }\n\n    const component = (rowIdx) => {\n        return <MinusCircleOutlined onClick={() => remove(rowIdx)} />;\n    }\n\n    const isForcedComponent = (column) => {\n        return column.actionColumn;\n    }\n\n    const populateWillInfoGrid = () => {\n        const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const componentData = column.actionColumn ? component(rows, rowIdx) : null\n                const className = column.actionColumn ? \"noborder\" : \"\";\n                columns.push({\n                    value: column.defaultValue,\n                    field: column.field,\n                    required: column.required,\n                    component: componentData,\n                    forceComponent: isForcedComponent(column),\n                    className: className\n                });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, [])\n        console.log(grid);\n        setWellInfoGrid(grid);\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            // const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n            const componentData = column.actionColumn ? component(wellInfoGrid, wellInfoGrid.length) : null\n            const className = column.actionColumn ? \"noborder\" : \"\";\n            columns.push({\n                value: column.defaultValue,\n                field: column.field,\n                required: column.required,\n                component: componentData,\n                forceComponent: isForcedComponent(column),\n                className: className\n            });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid,\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid);\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        validatedWellGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isWellInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n\n        if(!isWellInfoValid) {\n            handleWellInfoGridChanged(validatedWellGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues);\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}