{"ast":null,"code":"const getNewValue = (values, prevValue, fieldIndex, index, counter) => {\n  if (index >= fieldIndex) {\n    return values[counter] ? values[counter] : prevValue;\n  } else {\n    return prevValue;\n  }\n};\n\nconst setClipboardValues = (fields, values, fieldIndex) => {\n  let newFieldValues = {};\n  let counter = -1;\n  Object.keys(fields).map((field_key, index) => {\n    newFieldValues = { ...newFieldValues,\n      [field_key]: index >= fieldIndex ? getNewValue(values, fields[field_key], fieldIndex, index, ++counter) : fields[field_key]\n    };\n    return field_key;\n  });\n  return newFieldValues;\n};\n\nconst ProjectUtil = {\n  setClipboardValues\n};\nexport default ProjectUtil;","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/ProjectUtil.js"],"names":["getNewValue","values","prevValue","fieldIndex","index","counter","setClipboardValues","fields","newFieldValues","Object","keys","map","field_key","ProjectUtil"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,OAAvC,KAAmD;AACnE,MAAGD,KAAK,IAAID,UAAZ,EAAwB;AACpB,WAAOF,MAAM,CAACI,OAAD,CAAN,GAAkBJ,MAAM,CAACI,OAAD,CAAxB,GAAoCH,SAA3C;AACH,GAFD,MAEO;AACH,WAAOA,SAAP;AACH;AACJ,CAND;;AAQA,MAAMI,kBAAkB,GAAG,CAACC,MAAD,EAASN,MAAT,EAAiBE,UAAjB,KAAgC;AACvD,MAAIK,cAAc,GAAG,EAArB;AACA,MAAIH,OAAO,GAAG,CAAC,CAAf;AACAI,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,GAApB,CAAwB,CAACC,SAAD,EAAYR,KAAZ,KAAsB;AAC1CI,IAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEb,OAACI,SAAD,GAAcR,KAAK,IAAID,UAAV,GAAwBH,WAAW,CAACC,MAAD,EAASM,MAAM,CAACK,SAAD,CAAf,EAA4BT,UAA5B,EAAwCC,KAAxC,EAA+C,EAAEC,OAAjD,CAAnC,GAA+FE,MAAM,CAACK,SAAD;AAFrG,KAAjB;AAIA,WAAOA,SAAP;AACH,GAND;AAOA,SAAOJ,cAAP;AACH,CAXD;;AAaA,MAAMK,WAAW,GAAG;AAChBP,EAAAA;AADgB,CAApB;AAIA,eAAeO,WAAf","sourcesContent":["const getNewValue = (values, prevValue, fieldIndex, index, counter) => {\n    if(index >= fieldIndex) {\n        return values[counter] ? values[counter] : prevValue;\n    } else {\n        return prevValue;\n    }\n}\n\nconst setClipboardValues = (fields, values, fieldIndex) => {\n    let newFieldValues = {};\n    let counter = -1;\n    Object.keys(fields).map((field_key, index) => {\n        newFieldValues = {\n            ...newFieldValues,\n            [field_key]: (index >= fieldIndex) ? getNewValue(values, fields[field_key], fieldIndex, index, ++counter) : fields[field_key],\n        }\n        return field_key;\n    });\n    return newFieldValues;\n}\n\nconst ProjectUtil = {\n    setClipboardValues\n}\n\nexport default ProjectUtil;"]},"metadata":{},"sourceType":"module"}