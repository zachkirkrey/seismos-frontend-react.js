{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Grid.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from \"react-data-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groupings = [{\n  title: \"Assets\",\n  descriptions: [\"$ Allowance for Loan Losses\", \"$ Restricted Cash\", \"$ Current Assets\", \"$ Total Assets\", \"$ Unrestricted Cash & Cash Equivalents\", \"$ Current Portion of Notes Receiveable\"]\n}, {\n  title: \"Assets2\",\n  descriptions: [\"$ Allowance for Loan Losses\", \"$ Restricted Cash\", \"$ Current Assets\", \"$ Total Assets\", \"$ Unrestricted Cash & Cash Equivalents\", \"$ Current Portion of Notes Receiveable\"]\n}];\nconst columns = [{\n  key: \"category\",\n  name: \"Category\"\n}, {\n  key: \"description\",\n  name: \"Description\"\n}, {\n  key: \"2016\",\n  name: \"2016\",\n  editable: true\n}, {\n  key: \"2017\",\n  name: \"2017\",\n  editable: true\n}, {\n  key: \"2018\",\n  name: \"2018\",\n  editable: true\n}, {\n  key: \"2019\",\n  name: \"2019\",\n  editable: true\n}, {\n  key: \"projected\",\n  name: \"Projected\",\n  editable: true\n}];\nconst rows = groupings.reduce((rows, t) => {\n  const descripts = t.descriptions.map((d, idx) => {\n    return {\n      category: idx === 0 ? t.title : \"\",\n      description: d,\n      \"2016\": \"$0.00\",\n      \"2017\": \"$0.00\",\n      \"2018\": \"$0.00\",\n      \"2019\": \"$0.00\",\n      projected: \"$0.00\"\n    };\n  });\n  return rows.concat(descripts);\n}, []);\n\nconst defaultParsePaste = str => str.split(/\\r\\n|\\n|\\r/).map(row => row.split(\"\\t\"));\n\nclass GridOne extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.removeAllListeners = () => {\n      document.removeEventListener(\"copy\", this.handleCopy);\n      document.removeEventListener(\"paste\", this.handlePaste);\n    };\n\n    this.handleCopy = e => {\n      console.debug(\"handleCopy Called\");\n      e.preventDefault();\n      const {\n        topLeft,\n        botRight\n      } = this.state; // Loop through each row\n\n      const text = range(topLeft.rowIdx, botRight.rowIdx + 1).map( // Loop through each column\n      rowIdx => columns.slice(topLeft.colIdx, botRight.colIdx + 1).map( // Grab the row values and make a text string\n      col => this.rowGetter(rowIdx)[col.key]).join(\"\\t\")).join(\"\\n\");\n      console.debug(\"text\", text);\n      e.clipboardData.setData(\"text/plain\", text);\n    };\n\n    this.handlePaste = e => {\n      console.debug(\"handlePaste Called\");\n      e.preventDefault();\n      const {\n        topLeft\n      } = this.state;\n      const newRows = [];\n      const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n      console.debug(\"pasteData\", pasteData);\n      pasteData.forEach(row => {\n        const rowData = {}; // Merge the values from pasting and the keys from the columns\n\n        columns.slice(topLeft.colIdx, topLeft.colIdx + row.length).forEach((col, j) => {\n          // Create the key-value pair for the row\n          rowData[col.key] = row[j];\n        }); // Push the new row to the changes\n\n        newRows.push(rowData);\n      });\n      console.debug(\"newRows\", newRows);\n      this.updateRows(topLeft.rowIdx, newRows);\n    };\n\n    this.onGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated,\n      action\n    }) => {\n      console.debug(\"onGridRowsUpdated!\", action);\n      console.debug(\"updated\", updated);\n\n      if (action !== \"COPY_PASTE\") {\n        this.setState(state => {\n          const rows = state.rows.slice();\n\n          for (let i = fromRow; i <= toRow; i++) {\n            rows[i] = { ...rows[i],\n              ...updated\n            };\n          }\n\n          return {\n            rows\n          };\n        });\n      }\n    };\n\n    this.setSelection = args => {\n      this.setState({\n        topLeft: {\n          rowIdx: args.topLeft.rowIdx,\n          colIdx: args.topLeft.idx\n        },\n        botRight: {\n          rowIdx: args.bottomRight.rowIdx,\n          colIdx: args.bottomRight.idx\n        }\n      });\n    };\n\n    this.updateRows = (startIdx, newRows) => {\n      this.setState(state => {\n        const rows = state.rows.slice();\n\n        for (let i = 0; i < newRows.length; i++) {\n          if (startIdx + i < rows.length) {\n            rows[startIdx + i] = { ...rows[startIdx + i],\n              ...newRows[i]\n            };\n          }\n        }\n\n        return {\n          rows\n        };\n      });\n    };\n\n    this.state = {\n      rows: rows,\n      topLeft: {},\n      botRight: {}\n    }; // Copy paste event handler\n\n    document.addEventListener(\"copy\", this.handleCopy);\n    document.addEventListener(\"paste\", this.handlePaste);\n  }\n\n  componentWillUnmount() {\n    this.removeAllListeners();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ReactDataGrid, {\n      columns: columns,\n      rowGetter: i => this.state.rows[i],\n      rowsCount: rows.length,\n      onGridRowsUpdated: this.onGridRowsUpdated,\n      enableCellSelect: true,\n      cellRangeSelection: {\n        onComplete: this.setSelection\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GridOne;","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Grid.js"],"names":["React","ReactDOM","ReactDataGrid","groupings","title","descriptions","columns","key","name","editable","rows","reduce","t","descripts","map","d","idx","category","description","projected","concat","defaultParsePaste","str","split","row","GridOne","Component","constructor","props","removeAllListeners","document","removeEventListener","handleCopy","handlePaste","e","console","debug","preventDefault","topLeft","botRight","state","text","range","rowIdx","slice","colIdx","col","rowGetter","join","clipboardData","setData","newRows","pasteData","getData","forEach","rowData","length","j","push","updateRows","onGridRowsUpdated","fromRow","toRow","updated","action","setState","i","setSelection","args","bottomRight","startIdx","addEventListener","componentWillUnmount","render","onComplete"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,YAAY,EAAE,CACZ,6BADY,EAEZ,mBAFY,EAGZ,kBAHY,EAIZ,gBAJY,EAKZ,wCALY,EAMZ,wCANY;AAFhB,CADgB,EAYhB;AACED,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,YAAY,EAAE,CACZ,6BADY,EAEZ,mBAFY,EAGZ,kBAHY,EAIZ,gBAJY,EAKZ,wCALY,EAMZ,wCANY;AAFhB,CAZgB,CAAlB;AAyBA,MAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CADc,EAEd;AAAED,EAAAA,GAAG,EAAE,aAAP;AAAsBC,EAAAA,IAAI,EAAE;AAA5B,CAFc,EAGd;AAAED,EAAAA,GAAG,EAAE,MAAP;AAAeC,EAAAA,IAAI,EAAE,MAArB;AAA6BC,EAAAA,QAAQ,EAAE;AAAvC,CAHc,EAId;AAAEF,EAAAA,GAAG,EAAE,MAAP;AAAeC,EAAAA,IAAI,EAAE,MAArB;AAA6BC,EAAAA,QAAQ,EAAE;AAAvC,CAJc,EAKd;AAAEF,EAAAA,GAAG,EAAE,MAAP;AAAeC,EAAAA,IAAI,EAAE,MAArB;AAA6BC,EAAAA,QAAQ,EAAE;AAAvC,CALc,EAMd;AAAEF,EAAAA,GAAG,EAAE,MAAP;AAAeC,EAAAA,IAAI,EAAE,MAArB;AAA6BC,EAAAA,QAAQ,EAAE;AAAvC,CANc,EAOd;AAAEF,EAAAA,GAAG,EAAE,WAAP;AAAoBC,EAAAA,IAAI,EAAE,WAA1B;AAAuCC,EAAAA,QAAQ,EAAE;AAAjD,CAPc,CAAhB;AAUA,MAAMC,IAAI,GAAGP,SAAS,CAACQ,MAAV,CAAiB,CAACD,IAAD,EAAOE,CAAP,KAAa;AACzC,QAAMC,SAAS,GAAGD,CAAC,CAACP,YAAF,CAAeS,GAAf,CAAmB,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC/C,WAAO;AACLC,MAAAA,QAAQ,EAAED,GAAG,KAAK,CAAR,GAAYJ,CAAC,CAACR,KAAd,GAAsB,EAD3B;AAELc,MAAAA,WAAW,EAAEH,CAFR;AAGL,cAAQ,OAHH;AAIL,cAAQ,OAJH;AAKL,cAAQ,OALH;AAML,cAAQ,OANH;AAOLI,MAAAA,SAAS,EAAE;AAPN,KAAP;AASD,GAViB,CAAlB;AAYA,SAAOT,IAAI,CAACU,MAAL,CAAYP,SAAZ,CAAP;AACD,CAdY,EAcV,EAdU,CAAb;;AAgBA,MAAMQ,iBAAiB,GAAGC,GAAG,IAC3BA,GAAG,CAACC,KAAJ,CAAU,YAAV,EAAwBT,GAAxB,CAA4BU,GAAG,IAAIA,GAAG,CAACD,KAAJ,CAAU,IAAV,CAAnC,CADF;;AAGA,MAAME,OAAN,SAAsBzB,KAAK,CAAC0B,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiBnBC,kBAjBmB,GAiBE,MAAM;AACzBC,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,MAA7B,EAAqC,KAAKC,UAA1C;AACAF,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsC,KAAKE,WAA3C;AACD,KApBkB;;AAAA,SAsBnBD,UAtBmB,GAsBNE,CAAC,IAAI;AAChBC,MAAAA,OAAO,CAACC,KAAR,CAAc,mBAAd;AACAF,MAAAA,CAAC,CAACG,cAAF;AACA,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAwB,KAAKC,KAAnC,CAHgB,CAKhB;;AACA,YAAMC,IAAI,GAAGC,KAAK,CAACJ,OAAO,CAACK,MAAT,EAAiBJ,QAAQ,CAACI,MAAT,GAAkB,CAAnC,CAAL,CACV7B,GADU,EAET;AACA6B,MAAAA,MAAM,IACJrC,OAAO,CACJsC,KADH,CACSN,OAAO,CAACO,MADjB,EACyBN,QAAQ,CAACM,MAAT,GAAkB,CAD3C,EAEG/B,GAFH,EAGI;AACAgC,MAAAA,GAAG,IAAI,KAAKC,SAAL,CAAeJ,MAAf,EAAuBG,GAAG,CAACvC,GAA3B,CAJX,EAMGyC,IANH,CAMQ,IANR,CAJO,EAYVA,IAZU,CAYL,IAZK,CAAb;AAaAb,MAAAA,OAAO,CAACC,KAAR,CAAc,MAAd,EAAsBK,IAAtB;AACAP,MAAAA,CAAC,CAACe,aAAF,CAAgBC,OAAhB,CAAwB,YAAxB,EAAsCT,IAAtC;AACD,KA3CkB;;AAAA,SA6CnBR,WA7CmB,GA6CLC,CAAC,IAAI;AACjBC,MAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd;AACAF,MAAAA,CAAC,CAACG,cAAF;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAc,KAAKE,KAAzB;AAEA,YAAMW,OAAO,GAAG,EAAhB;AACA,YAAMC,SAAS,GAAG/B,iBAAiB,CAACa,CAAC,CAACe,aAAF,CAAgBI,OAAhB,CAAwB,YAAxB,CAAD,CAAnC;AAEAlB,MAAAA,OAAO,CAACC,KAAR,CAAc,WAAd,EAA2BgB,SAA3B;AAEAA,MAAAA,SAAS,CAACE,OAAV,CAAkB9B,GAAG,IAAI;AACvB,cAAM+B,OAAO,GAAG,EAAhB,CADuB,CAEvB;;AACAjD,QAAAA,OAAO,CACJsC,KADH,CACSN,OAAO,CAACO,MADjB,EACyBP,OAAO,CAACO,MAAR,GAAiBrB,GAAG,CAACgC,MAD9C,EAEGF,OAFH,CAEW,CAACR,GAAD,EAAMW,CAAN,KAAY;AACnB;AACAF,UAAAA,OAAO,CAACT,GAAG,CAACvC,GAAL,CAAP,GAAmBiB,GAAG,CAACiC,CAAD,CAAtB;AACD,SALH,EAHuB,CASvB;;AACAN,QAAAA,OAAO,CAACO,IAAR,CAAaH,OAAb;AACD,OAXD;AAaApB,MAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBe,OAAzB;AAEA,WAAKQ,UAAL,CAAgBrB,OAAO,CAACK,MAAxB,EAAgCQ,OAAhC;AACD,KAvEkB;;AAAA,SAyEnBS,iBAzEmB,GAyEC,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA,OAAlB;AAA2BC,MAAAA;AAA3B,KAAD,KAAyC;AAC3D7B,MAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoC4B,MAApC;AACA7B,MAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyB2B,OAAzB;;AACA,UAAIC,MAAM,KAAK,YAAf,EAA6B;AAC3B,aAAKC,QAAL,CAAczB,KAAK,IAAI;AACrB,gBAAM9B,IAAI,GAAG8B,KAAK,CAAC9B,IAAN,CAAWkC,KAAX,EAAb;;AACA,eAAK,IAAIsB,CAAC,GAAGL,OAAb,EAAsBK,CAAC,IAAIJ,KAA3B,EAAkCI,CAAC,EAAnC,EAAuC;AACrCxD,YAAAA,IAAI,CAACwD,CAAD,CAAJ,GAAU,EAAE,GAAGxD,IAAI,CAACwD,CAAD,CAAT;AAAc,iBAAGH;AAAjB,aAAV;AACD;;AACD,iBAAO;AAAErD,YAAAA;AAAF,WAAP;AACD,SAND;AAOD;AACF,KArFkB;;AAAA,SAuFnByD,YAvFmB,GAuFJC,IAAI,IAAI;AACrB,WAAKH,QAAL,CAAc;AACZ3B,QAAAA,OAAO,EAAE;AACPK,UAAAA,MAAM,EAAEyB,IAAI,CAAC9B,OAAL,CAAaK,MADd;AAEPE,UAAAA,MAAM,EAAEuB,IAAI,CAAC9B,OAAL,CAAatB;AAFd,SADG;AAKZuB,QAAAA,QAAQ,EAAE;AACRI,UAAAA,MAAM,EAAEyB,IAAI,CAACC,WAAL,CAAiB1B,MADjB;AAERE,UAAAA,MAAM,EAAEuB,IAAI,CAACC,WAAL,CAAiBrD;AAFjB;AALE,OAAd;AAUD,KAlGkB;;AAAA,SAoGnB2C,UApGmB,GAoGN,CAACW,QAAD,EAAWnB,OAAX,KAAuB;AAClC,WAAKc,QAAL,CAAczB,KAAK,IAAI;AACrB,cAAM9B,IAAI,GAAG8B,KAAK,CAAC9B,IAAN,CAAWkC,KAAX,EAAb;;AACA,aAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,OAAO,CAACK,MAA5B,EAAoCU,CAAC,EAArC,EAAyC;AACvC,cAAII,QAAQ,GAAGJ,CAAX,GAAexD,IAAI,CAAC8C,MAAxB,EAAgC;AAC9B9C,YAAAA,IAAI,CAAC4D,QAAQ,GAAGJ,CAAZ,CAAJ,GAAqB,EAAE,GAAGxD,IAAI,CAAC4D,QAAQ,GAAGJ,CAAZ,CAAT;AAAyB,iBAAGf,OAAO,CAACe,CAAD;AAAnC,aAArB;AACD;AACF;;AACD,eAAO;AAAExD,UAAAA;AAAF,SAAP;AACD,OARD;AASD,KA9GkB;;AAEjB,SAAK8B,KAAL,GAAa;AACX9B,MAAAA,IAAI,EAAEA,IADK;AAEX4B,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb,CAFiB,CAQjB;;AACAT,IAAAA,QAAQ,CAACyC,gBAAT,CAA0B,MAA1B,EAAkC,KAAKvC,UAAvC;AACAF,IAAAA,QAAQ,CAACyC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKtC,WAAxC;AACD;;AAEDuC,EAAAA,oBAAoB,GAAG;AACrB,SAAK3C,kBAAL;AACD;;AAiGD4C,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,aAAD;AACE,MAAA,OAAO,EAAEnE,OADX;AAEE,MAAA,SAAS,EAAE4D,CAAC,IAAI,KAAK1B,KAAL,CAAW9B,IAAX,CAAgBwD,CAAhB,CAFlB;AAGE,MAAA,SAAS,EAAExD,IAAI,CAAC8C,MAHlB;AAIE,MAAA,iBAAiB,EAAE,KAAKI,iBAJ1B;AAKE,MAAA,gBAAgB,EAAE,IALpB;AAME,MAAA,kBAAkB,EAAE;AAClBc,QAAAA,UAAU,EAAE,KAAKP;AADC;AANtB;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA9HmC;;AAiItC,eAAe1C,OAAf","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport ReactDataGrid from \"react-data-grid\";\n\nconst groupings = [\n  {\n    title: \"Assets\",\n    descriptions: [\n      \"$ Allowance for Loan Losses\",\n      \"$ Restricted Cash\",\n      \"$ Current Assets\",\n      \"$ Total Assets\",\n      \"$ Unrestricted Cash & Cash Equivalents\",\n      \"$ Current Portion of Notes Receiveable\"\n    ]\n  },\n  {\n    title: \"Assets2\",\n    descriptions: [\n      \"$ Allowance for Loan Losses\",\n      \"$ Restricted Cash\",\n      \"$ Current Assets\",\n      \"$ Total Assets\",\n      \"$ Unrestricted Cash & Cash Equivalents\",\n      \"$ Current Portion of Notes Receiveable\"\n    ]\n  }\n];\n\nconst columns = [\n  { key: \"category\", name: \"Category\" },\n  { key: \"description\", name: \"Description\" },\n  { key: \"2016\", name: \"2016\", editable: true },\n  { key: \"2017\", name: \"2017\", editable: true },\n  { key: \"2018\", name: \"2018\", editable: true },\n  { key: \"2019\", name: \"2019\", editable: true },\n  { key: \"projected\", name: \"Projected\", editable: true }\n];\n\nconst rows = groupings.reduce((rows, t) => {\n  const descripts = t.descriptions.map((d, idx) => {\n    return {\n      category: idx === 0 ? t.title : \"\",\n      description: d,\n      \"2016\": \"$0.00\",\n      \"2017\": \"$0.00\",\n      \"2018\": \"$0.00\",\n      \"2019\": \"$0.00\",\n      projected: \"$0.00\"\n    };\n  });\n\n  return rows.concat(descripts);\n}, []);\n\nconst defaultParsePaste = str =>\n  str.split(/\\r\\n|\\n|\\r/).map(row => row.split(\"\\t\"));\n\nclass GridOne extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: rows,\n      topLeft: {},\n      botRight: {}\n    };\n\n    // Copy paste event handler\n    document.addEventListener(\"copy\", this.handleCopy);\n    document.addEventListener(\"paste\", this.handlePaste);\n  }\n\n  componentWillUnmount() {\n    this.removeAllListeners();\n  }\n\n  removeAllListeners = () => {\n    document.removeEventListener(\"copy\", this.handleCopy);\n    document.removeEventListener(\"paste\", this.handlePaste);\n  };\n\n  handleCopy = e => {\n    console.debug(\"handleCopy Called\");\n    e.preventDefault();\n    const { topLeft, botRight } = this.state;\n\n    // Loop through each row\n    const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\n      .map(\n        // Loop through each column\n        rowIdx =>\n          columns\n            .slice(topLeft.colIdx, botRight.colIdx + 1)\n            .map(\n              // Grab the row values and make a text string\n              col => this.rowGetter(rowIdx)[col.key]\n            )\n            .join(\"\\t\")\n      )\n      .join(\"\\n\");\n    console.debug(\"text\", text);\n    e.clipboardData.setData(\"text/plain\", text);\n  };\n\n  handlePaste = e => {\n    console.debug(\"handlePaste Called\");\n    e.preventDefault();\n    const { topLeft } = this.state;\n\n    const newRows = [];\n    const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n\n    console.debug(\"pasteData\", pasteData);\n\n    pasteData.forEach(row => {\n      const rowData = {};\n      // Merge the values from pasting and the keys from the columns\n      columns\n        .slice(topLeft.colIdx, topLeft.colIdx + row.length)\n        .forEach((col, j) => {\n          // Create the key-value pair for the row\n          rowData[col.key] = row[j];\n        });\n      // Push the new row to the changes\n      newRows.push(rowData);\n    });\n\n    console.debug(\"newRows\", newRows);\n\n    this.updateRows(topLeft.rowIdx, newRows);\n  };\n\n  onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\n    console.debug(\"onGridRowsUpdated!\", action);\n    console.debug(\"updated\", updated);\n    if (action !== \"COPY_PASTE\") {\n      this.setState(state => {\n        const rows = state.rows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = { ...rows[i], ...updated };\n        }\n        return { rows };\n      });\n    }\n  };\n\n  setSelection = args => {\n    this.setState({\n      topLeft: {\n        rowIdx: args.topLeft.rowIdx,\n        colIdx: args.topLeft.idx\n      },\n      botRight: {\n        rowIdx: args.bottomRight.rowIdx,\n        colIdx: args.bottomRight.idx\n      }\n    });\n  };\n\n  updateRows = (startIdx, newRows) => {\n    this.setState(state => {\n      const rows = state.rows.slice();\n      for (let i = 0; i < newRows.length; i++) {\n        if (startIdx + i < rows.length) {\n          rows[startIdx + i] = { ...rows[startIdx + i], ...newRows[i] };\n        }\n      }\n      return { rows };\n    });\n  };\n\n  render() {\n    return (\n      <ReactDataGrid\n        columns={columns}\n        rowGetter={i => this.state.rows[i]}\n        rowsCount={rows.length}\n        onGridRowsUpdated={this.onGridRowsUpdated}\n        enableCellSelect={true}\n        cellRangeSelection={{\n          onComplete: this.setSelection\n        }}\n      />\n    );\n  }\n}\n\nexport default GridOne;\n"]},"metadata":{},"sourceType":"module"}