{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellVolume(props) {\n  _s();\n\n  const {\n    Panel\n  } = Collapse;\n  const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n  const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n  const getWellVolumeGridRow = t => {\n    return t.rows.map(label => {\n      const columns = [];\n      TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n        const defaultVal = column.field === \"type\" ? label : \"\";\n        columns.push({\n          value: defaultVal,\n          field: column.field\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const callback = key => {\n    console.log(key);\n  };\n\n  const getWellVolumeEstimationsGridRow = t => {\n    return t.rows.map(row => {\n      return [{\n        value: \"\",\n        field: row.field\n      }, {\n        value: row.label,\n        readOnly: true,\n        disableEvents: true\n      }];\n    });\n  };\n\n  const populateWellVolumeGrid = index => {\n    const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeGridRow(t));\n    }, []);\n    return newWellVolGrid;\n  };\n\n  const populateWellVolumeEstimationsGrid = index => {\n    const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeEstimationsGridRow(t));\n    }, []);\n    return newWellVolEstimationsGrid;\n  };\n\n  const handleWellVolumeGridChanged = (updatedGridData, index) => {\n    const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n\n    newWellVolGrid[index] = updatedGridData;\n    props.setWellVolumeFormValue(newWellVolGrid);\n    setWellVolumeGrids(newWellVolGrid);\n  };\n\n  const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n    const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n\n    newWellVolEstimationsGrid[index] = updatedGridData;\n    props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n    setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n  };\n\n  const gotoNextStep = () => {\n    props.next();\n  };\n\n  useState(() => {\n    if (props.wellInfoValues) {\n      let wellVolumeGridData = [];\n      let wellVolumeEstimationsGridData = [];\n      props.wellInfoValues.map((wellInfoValue, index) => {\n        if (props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n          wellVolumeGridData.push(props.wellVolumeFormValues[index]);\n        } else {\n          wellVolumeGridData.push(populateWellVolumeGrid(index));\n        }\n\n        if (props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n          wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index]);\n        } else {\n          wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n        }\n      });\n      setWellVolumeGrids(wellVolumeGridData);\n      setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Collapse, {\n      defaultActiveKey: ['1'],\n      onChange: callback,\n      children: props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n        return;\n\n        /*#__PURE__*/\n        _jsxDEV(Panel, {\n          header: well.well_name,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"well-volume-grid mb-8\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                columns: TableHeadersUtil.wellVolumeFormTableData.columns,\n                grid: wellVolumeGrids[index],\n                gridValueChanged: handleWellVolumeGridChanged,\n                index: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"well-volume-estimation-grid mb-8\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                columns: TableHeadersUtil.wellVolumeEstimationsFormTableData.columns,\n                grid: wellVolumeEstimationsGrids[index],\n                gridValueChanged: handleWellVolumeEstimationsGridChanged,\n                index: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)\n        }, index + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellVolume, \"uL/LS9egJ/uJUZjN+Pm9W1JEcFE=\");\n\n_c = WellVolume;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellVolume\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","Collapse","WellVolume","props","Panel","wellVolumeGrids","setWellVolumeGrids","wellVolumeEstimationsGrids","setWellVolumeEstimationsGrids","getWellVolumeGridRow","t","rows","map","label","columns","wellVolumeFormTableData","column","defaultVal","field","push","value","callback","key","console","log","getWellVolumeEstimationsGridRow","row","readOnly","disableEvents","populateWellVolumeGrid","index","newWellVolGrid","grid","reduce","rowIdx","concat","populateWellVolumeEstimationsGrid","newWellVolEstimationsGrid","wellVolumeEstimationsFormTableData","handleWellVolumeGridChanged","updatedGridData","cloneDeep","setWellVolumeFormValue","handleWellVolumeEstimationsGridChanged","setWellVolumeEstimationsFormValue","gotoNextStep","next","wellInfoValues","wellVolumeGridData","wellVolumeEstimationsGridData","wellInfoValue","wellVolumeFormValues","wellVolumeEstimationsFormValues","well","well_name","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,QAAyB,MAAzB;;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAYH,QAAlB;AACA,QAAM,CAACI,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACW,0BAAD,EAA6BC,6BAA7B,IAA8DZ,QAAQ,CAAC,EAAD,CAA5E;;AAEA,QAAMa,oBAAoB,GAAIC,CAAD,IAAO;AAChC,WAAOA,CAAC,CAACC,IAAF,CAAOC,GAAP,CAAWC,KAAK,IAAI;AACvB,YAAMC,OAAO,GAAG,EAAhB;AACAhB,MAAAA,gBAAgB,CAACiB,uBAAjB,CAAyCD,OAAzC,CAAiDF,GAAjD,CAAqDI,MAAM,IAAI;AAC3D,cAAMC,UAAU,GAAGD,MAAM,CAACE,KAAP,KAAiB,MAAjB,GAA0BL,KAA1B,GAAkC,EAArD;AACAC,QAAAA,OAAO,CAACK,IAAR,CAAa;AAAEC,UAAAA,KAAK,EAAEH,UAAT;AAAqBC,UAAAA,KAAK,EAAEF,MAAM,CAACE;AAAnC,SAAb;AACA,eAAOF,MAAP;AACH,OAJD;AAKA,aAAOF,OAAP;AACH,KARM,CAAP;AASH,GAVD;;AAYA,QAAMO,QAAQ,GAAIC,GAAD,IAAU;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GAFD;;AAIA,QAAMG,+BAA+B,GAAIf,CAAD,IAAO;AAC3C,WAAOA,CAAC,CAACC,IAAF,CAAOC,GAAP,CAAWc,GAAG,IAAI;AACrB,aAAO,CACH;AAAEN,QAAAA,KAAK,EAAE,EAAT;AAAaF,QAAAA,KAAK,EAAEQ,GAAG,CAACR;AAAxB,OADG,EAEH;AAAEE,QAAAA,KAAK,EAAEM,GAAG,CAACb,KAAb;AAAoBc,QAAAA,QAAQ,EAAE,IAA9B;AAAoCC,QAAAA,aAAa,EAAE;AAAnD,OAFG,CAAP;AAIH,KALM,CAAP;AAMH,GAPD;;AASA,QAAMC,sBAAsB,GAAIC,KAAD,IAAW;AACtC,UAAMC,cAAc,GAAGjC,gBAAgB,CAACiB,uBAAjB,CAAyCiB,IAAzC,CAA8CC,MAA9C,CAAqD,CAACtB,IAAD,EAAOD,CAAP,EAAUwB,MAAV,KAAqB;AAC7F,aAAOvB,IAAI,CAACwB,MAAL,CAAY1B,oBAAoB,CAACC,CAAD,CAAhC,CAAP;AACH,KAFsB,EAEpB,EAFoB,CAAvB;AAGA,WAAOqB,cAAP;AACH,GALD;;AAOA,QAAMK,iCAAiC,GAAIN,KAAD,IAAW;AACjD,UAAMO,yBAAyB,GAAGvC,gBAAgB,CAACwC,kCAAjB,CAAoDN,IAApD,CAAyDC,MAAzD,CAAgE,CAACtB,IAAD,EAAOD,CAAP,EAAUwB,MAAV,KAAqB;AACnH,aAAOvB,IAAI,CAACwB,MAAL,CAAYV,+BAA+B,CAACf,CAAD,CAA3C,CAAP;AACH,KAFiC,EAE/B,EAF+B,CAAlC;AAGA,WAAO2B,yBAAP;AACH,GALD;;AAOA,QAAME,2BAA2B,GAAG,CAACC,eAAD,EAAkBV,KAAlB,KAA4B;AAC5D,UAAMC,cAAc,GAAG/B,CAAC,CAACyC,SAAF,CAAYpC,eAAZ,CAAvB;;AACA0B,IAAAA,cAAc,CAACD,KAAD,CAAd,GAAwBU,eAAxB;AACArC,IAAAA,KAAK,CAACuC,sBAAN,CAA6BX,cAA7B;AACAzB,IAAAA,kBAAkB,CAACyB,cAAD,CAAlB;AACH,GALD;;AAOA,QAAMY,sCAAsC,GAAG,CAACH,eAAD,EAAkBV,KAAlB,KAA4B;AACvE,UAAMO,yBAAyB,GAAGrC,CAAC,CAACyC,SAAF,CAAYlC,0BAAZ,CAAlC;;AACA8B,IAAAA,yBAAyB,CAACP,KAAD,CAAzB,GAAmCU,eAAnC;AACArC,IAAAA,KAAK,CAACyC,iCAAN,CAAwCP,yBAAxC;AACA7B,IAAAA,6BAA6B,CAAC6B,yBAAD,CAA7B;AACH,GALD;;AAOA,QAAMQ,YAAY,GAAG,MAAM;AACvB1C,IAAAA,KAAK,CAAC2C,IAAN;AACH,GAFD;;AAIAlD,EAAAA,QAAQ,CAAC,MAAM;AACX,QAAGO,KAAK,CAAC4C,cAAT,EAAyB;AACrB,UAAIC,kBAAkB,GAAG,EAAzB;AACA,UAAIC,6BAA6B,GAAG,EAApC;AACA9C,MAAAA,KAAK,CAAC4C,cAAN,CAAqBnC,GAArB,CAAyB,CAACsC,aAAD,EAAgBpB,KAAhB,KAA0B;AAC/C,YAAG3B,KAAK,CAACgD,oBAAN,IAA8B,IAA9B,IAAsChD,KAAK,CAACgD,oBAAN,CAA2BrB,KAA3B,CAAzC,EAA4E;AACxEkB,UAAAA,kBAAkB,CAAC7B,IAAnB,CAAwBhB,KAAK,CAACgD,oBAAN,CAA2BrB,KAA3B,CAAxB;AACH,SAFD,MAEO;AACHkB,UAAAA,kBAAkB,CAAC7B,IAAnB,CAAwBU,sBAAsB,CAACC,KAAD,CAA9C;AACH;;AACD,YAAG3B,KAAK,CAACiD,+BAAN,IAAyC,IAAzC,IAAiDjD,KAAK,CAACiD,+BAAN,CAAsCtB,KAAtC,CAApD,EAAkG;AAC9FmB,UAAAA,6BAA6B,CAAC9B,IAA9B,CAAmChB,KAAK,CAACiD,+BAAN,CAAsCtB,KAAtC,CAAnC;AACH,SAFD,MAEO;AACHmB,UAAAA,6BAA6B,CAAC9B,IAA9B,CAAmCiB,iCAAiC,CAACN,KAAD,CAApE;AACH;AACJ,OAXD;AAYAxB,MAAAA,kBAAkB,CAAC0C,kBAAD,CAAlB;AACAxC,MAAAA,6BAA6B,CAACyC,6BAAD,CAA7B;AACH;AACJ,GAnBO,EAmBL9C,KAnBK,CAAR;AAqBA,sBACI;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,gBAAgB,EAAE,CAAC,GAAD,CAA5B;AAAmC,MAAA,QAAQ,EAAEkB,QAA7C;AAAA,gBAEIlB,KAAK,CAAC4C,cAAN,IAAwB5C,KAAK,CAAC4C,cAAN,CAAqBnC,GAArB,CAAyB,CAACyC,IAAD,EAAOvB,KAAP,KAAiB;AAC9D;;AACA;AAAA,gBAAC,KAAD;AAAO,UAAA,MAAM,EAAEuB,IAAI,CAACC,SAApB;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,uBAAf;AAAA,qCACI,QAAC,IAAD;AACI,gBAAA,OAAO,EAAExD,gBAAgB,CAACiB,uBAAjB,CAAyCD,OADtD;AAEI,gBAAA,IAAI,EAAET,eAAe,CAACyB,KAAD,CAFzB;AAGI,gBAAA,gBAAgB,EAAES,2BAHtB;AAII,gBAAA,KAAK,EAAET;AAJX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ,eASI;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBATJ,eAUI;AAAK,cAAA,SAAS,EAAC,kCAAf;AAAA,qCACI,QAAC,IAAD;AACI,gBAAA,OAAO,EAAEhC,gBAAgB,CAACwC,kCAAjB,CAAoDxB,OADjE;AAEI,gBAAA,IAAI,EAAEP,0BAA0B,CAACuB,KAAD,CAFpC;AAGI,gBAAA,gBAAgB,EAAEa,sCAHtB;AAII,gBAAA,KAAK,EAAEb;AAJX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAVJ;AAAA,aAA2BA,KAA3B;AAAA;AAAA;AAAA;AAAA;AADJ,WAAoCA,KAAK,GAAC,CAA1C;AAAA;AAAA;AAAA;AAAA;AAqBH,OAvBuB;AAF5B;AAAA;AAAA;AAAA;AAAA,YADJ,eA6BI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO,EAAGyB,CAAD,IAAO;AAACV,UAAAA,YAAY;AAAG,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YA7BJ;AAAA,kBADJ;AAqCH;;GAxHuB3C,U;;KAAAA,U","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\n\nexport default function WellVolume(props) {\n    const { Panel } = Collapse;\n    const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n    const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n    const getWellVolumeGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"type\" ? label : \"\";\n                columns.push({ value: defaultVal, field: column.field});\n                return column;\n            })\n            return columns;\n        });\n    }\n\n    const callback = (key)  => {\n        console.log(key);\n    }\n\n    const getWellVolumeEstimationsGridRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: \"\", field: row.field },\n                { value: row.label, readOnly: true, disableEvents: true },\n            ]\n        })\n    }\n\n    const populateWellVolumeGrid = (index) => {\n        const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeGridRow(t));\n        }, []);\n        return newWellVolGrid;\n    }\n\n    const populateWellVolumeEstimationsGrid = (index) => {\n        const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeEstimationsGridRow(t));\n        }, []);\n        return newWellVolEstimationsGrid;\n    }\n\n    const handleWellVolumeGridChanged = (updatedGridData, index) => {\n        const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n        newWellVolGrid[index] = updatedGridData;\n        props.setWellVolumeFormValue(newWellVolGrid);\n        setWellVolumeGrids(newWellVolGrid);\n    }\n\n    const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n        newWellVolEstimationsGrid[index] = updatedGridData;\n        props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n        setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n    }\n\n    const gotoNextStep = () => {\n        props.next();\n    }\n\n    useState(() => {\n        if(props.wellInfoValues) {\n            let wellVolumeGridData = [];\n            let wellVolumeEstimationsGridData = [];\n            props.wellInfoValues.map((wellInfoValue, index) => {\n                if(props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n                    wellVolumeGridData.push(props.wellVolumeFormValues[index])\n                } else {\n                    wellVolumeGridData.push(populateWellVolumeGrid(index));\n                }\n                if(props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n                    wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index] );\n                } else {\n                    wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n                }\n            });\n            setWellVolumeGrids(wellVolumeGridData);\n            setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n        }\n    }, props);\n\n    return (\n        <>\n            <Collapse defaultActiveKey={['1']} onChange={callback}>\n            {\n                props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n                    return \n                    <Panel header={well.well_name} key={index+1}>\n                        <div className=\"flex\" key={index}>\n                            <div className=\"well-volume-grid mb-8\">\n                                <Grid \n                                    columns={TableHeadersUtil.wellVolumeFormTableData.columns}\n                                    grid={wellVolumeGrids[index]}\n                                    gridValueChanged={handleWellVolumeGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                            <div className=\"p-4\"></div>\n                            <div className=\"well-volume-estimation-grid mb-8\">\n                                <Grid\n                                    columns={TableHeadersUtil.wellVolumeEstimationsFormTableData.columns}\n                                    grid={wellVolumeEstimationsGrids[index]}\n                                    gridValueChanged={handleWellVolumeEstimationsGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                        </div>\n                    </Panel>\n                })\n            }\n            </Collapse>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}