{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/DailyLog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport config from \"config\";\nimport axios from \"axiosConfig\";\nimport { Form, Button, Row, Col, Card, Input, DatePicker, TimePicker, Table } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport \"./DailyLog.css\";\nimport { useToasts } from \"react-toast-notifications\";\nimport ENUMS from \"constants/appEnums\";\nimport HttpUtil from \"util/HttpUtil\";\nimport { useHistory, useLocation } from \"react-router\";\nimport moment from \"moment\";\nimport { map } from \"underscore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function DailyLog() {\n  _s();\n\n  let location = useLocation();\n  const {\n    addToast\n  } = useToasts();\n  const history = useHistory();\n  const [form] = Form.useForm();\n  const initialFormValues = {\n    dailyLogData: [{\n      date: null,\n      time: null,\n      description: null\n    }]\n  };\n  const [dailyLogs, setDailyLogs] = useState([]);\n  const [projectId, setProjectId] = useState();\n  const [wellId, setWellId] = useState();\n\n  const onChange = (date, dateString) => {// console.log(date, dateString);\n  };\n\n  const columns = [{\n    title: 'Date',\n    dataIndex: 'date',\n    key: 'date'\n  }, {\n    title: 'Time',\n    dataIndex: 'time',\n    key: 'time'\n  }, {\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'description'\n  }];\n\n  const resetForm = () => {\n    form.resetFields();\n  };\n\n  const onFinish = values => {\n    if (values.dailyLogData.length < 1) return;\n    const val = values.dailyLogData.map(log => {\n      return {\n        description: log.description,\n        date: Number(moment(log.date).set(\"hour\", moment(log.time).hours()).set(\"minute\", moment(log.time).minutes()).set(\"seconds\", moment(log.time).seconds()).format('x'))\n      };\n    });\n    axios.post(config.API_URL + ENUMS.API_ROUTES.DAILY_LOG, {\n      project_id: Number(projectId),\n      well_id: Number(wellId),\n      logs: val\n    }, { ...HttpUtil.adminHttpHeaders()\n    }).then(res => {\n      if (res.status === 201) {\n        fetchDailyLog(Number(wellId));\n        addToast(\"Daily logs added successfully.\", {\n          appearance: 'success',\n          autoDismiss: true\n        });\n        resetForm(values);\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const fetchDailyLog = well_id => {\n    axios.get(config.API_URL + ENUMS.API_ROUTES.DAILY_LOG + '/' + well_id, { ...HttpUtil.adminHttpHeaders()\n    }).then(res => {\n      if (res.status === 200 && res.data) {\n        let logs = [];\n\n        if (res.data.logs) {\n          logs = res.data.logs.map((log, index) => {\n            return {\n              key: index,\n              date: moment(log.date).format(\"YYYY-MM-DD\"),\n              time: moment(log.date).format(\"HH : mm\"),\n              description: log.description\n            };\n          });\n        }\n\n        setDailyLogs(logs);\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const setParams = locationData => {\n    if (locationData.state && locationData.state.projectId) {\n      setProjectId(locationData.state.projectId);\n      setWellId(locationData.state.wellId);\n      fetchDailyLog(locationData.state.wellId);\n      resetForm();\n    } else if (locationData.search) {\n      const params = new URLSearchParams(locationData.search);\n      const projectIdSearch = params.get('projectId');\n      const wellIdSearch = params.get('wellId');\n      setProjectId(projectIdSearch);\n      setWellId(wellIdSearch);\n      fetchDailyLog(wellIdSearch);\n      resetForm();\n    }\n  };\n\n  useEffect(() => {\n    setParams(location);\n  }, []);\n  useEffect(() => {\n    return history.listen(locationData => {\n      setParams(locationData);\n    });\n  }, [history]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      bordered: false,\n      style: {\n        width: '100%',\n        marginBottom: '5px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-580-px mx-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Note: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), \"All times entered In tracking sheet are to be in 24 hour time format. The site layout and frac equipment info needs to be notated in the Daily log, with objectives including:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            listStyle: \"disc\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"The distance from the last pump to the well (estimate) pip length \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Size of iron from pumps \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Pump types (triplex, quadplex, quinplex) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Number of pumps \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Surface line volume \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Photographs to be collected of the equipment layout if allowed by client \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:ml-64\",\n        style: {\n          width: '650px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          gutter: 24,\n          className: \"mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 6,\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 39\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 6,\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 39\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 10,\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          form: form,\n          name: \"dynamic_form_nest_item\",\n          onFinish: onFinish,\n          autoComplete: \"off\",\n          initialValues: initialFormValues,\n          children: [/*#__PURE__*/_jsxDEV(Form.List, {\n            name: \"dailyLogData\",\n            children: (fields, {\n              add,\n              remove\n            }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [fields.map(({\n                key,\n                name,\n                fieldKey,\n                ...restField\n              }) => /*#__PURE__*/_jsxDEV(Row, {\n                gutter: 24,\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  span: 6,\n                  children: /*#__PURE__*/_jsxDEV(Form.Item, { ...restField,\n                    name: [name, 'date'],\n                    fieldKey: [fieldKey, 'date'],\n                    rules: [{\n                      required: true,\n                      message: 'Missing date'\n                    }],\n                    children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                      onChange: onChange,\n                      className: \"w-full\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 185,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  span: 6,\n                  children: /*#__PURE__*/_jsxDEV(Form.Item, { ...restField,\n                    name: [name, 'time'],\n                    fieldKey: [fieldKey, 'time'],\n                    rules: [{\n                      required: true,\n                      message: 'Missing time'\n                    }],\n                    children: /*#__PURE__*/_jsxDEV(TimePicker, {\n                      onChange: onChange,\n                      className: \"w-full\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 195,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  span: 10,\n                  children: /*#__PURE__*/_jsxDEV(Form.Item, { ...restField,\n                    name: [name, 'description'],\n                    fieldKey: [fieldKey, 'description'],\n                    rules: [{\n                      required: true,\n                      message: 'Missing description'\n                    }],\n                    className: \"w-full\",\n                    children: /*#__PURE__*/_jsxDEV(Input, {\n                      placeholder: \"Description\",\n                      className: \"w-full\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 206,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  span: 2,\n                  children: /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n                    onClick: () => remove(name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 45\n                }, this)]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 41\n              }, this)), /*#__PURE__*/_jsxDEV(Row, {\n                gutter: 24,\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  span: 8,\n                  children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"dashed\",\n                      onClick: () => add(),\n                      block: true,\n                      icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 221,\n                        columnNumber: 59\n                      }, this),\n                      children: \"Add line\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 217,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              children: \"Submit log\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), dailyLogs && /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-580-px mx-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"module-title\",\n            children: \"All Logs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          dataSource: dailyLogs,\n          columns: columns,\n          pagination: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DailyLog, \"F7txDP3MKlluFKD8ZLT0YDhvJbE=\", false, function () {\n  return [useLocation, useToasts, useHistory, Form.useForm];\n});\n\n_c = DailyLog;\n\nvar _c;\n\n$RefreshReg$(_c, \"DailyLog\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/DailyLog.js"],"names":["React","useEffect","useState","config","axios","Form","Button","Row","Col","Card","Input","DatePicker","TimePicker","Table","MinusCircleOutlined","PlusOutlined","useToasts","ENUMS","HttpUtil","useHistory","useLocation","moment","map","DailyLog","location","addToast","history","form","useForm","initialFormValues","dailyLogData","date","time","description","dailyLogs","setDailyLogs","projectId","setProjectId","wellId","setWellId","onChange","dateString","columns","title","dataIndex","key","resetForm","resetFields","onFinish","values","length","val","log","Number","set","hours","minutes","seconds","format","post","API_URL","API_ROUTES","DAILY_LOG","project_id","well_id","logs","adminHttpHeaders","then","res","status","fetchDailyLog","appearance","autoDismiss","catch","e","console","get","data","index","setParams","locationData","state","search","params","URLSearchParams","projectIdSearch","wellIdSearch","listen","width","marginBottom","listStyle","fields","add","remove","name","fieldKey","restField","required","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport config from \"config\";\nimport axios from \"axiosConfig\";\nimport { Form, Button, Row, Col, Card, Input, DatePicker, TimePicker, Table } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport \"./DailyLog.css\";\nimport { useToasts } from \"react-toast-notifications\";\nimport ENUMS from \"constants/appEnums\";\nimport HttpUtil from \"util/HttpUtil\";\nimport { useHistory, useLocation } from \"react-router\";\nimport moment from \"moment\";\nimport { map } from \"underscore\";\n\nexport default function DailyLog() {\n    let location = useLocation();\n    const { addToast } = useToasts();\n    const history = useHistory();\n    const [form] = Form.useForm();\n\n    const initialFormValues = { dailyLogData: [{ date: null, time: null, description: null }] }\n\n    const [dailyLogs, setDailyLogs] = useState([]);\n    const [projectId, setProjectId] = useState();\n    const [wellId, setWellId] = useState();\n    \n    const onChange = (date, dateString)  => {\n        // console.log(date, dateString);\n    }\n\n    const columns = [\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n        },\n        {\n            title: 'Time',\n            dataIndex: 'time',\n            key: 'time',\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        },\n    ];\n    \n    const resetForm = () => {\n        form.resetFields();\n    }\n\n    const onFinish = values => {\n        if (values.dailyLogData.length < 1)\n            return;\n        const val = values.dailyLogData.map(log => {\n            return {\n                description: log.description,\n                date: Number(moment(log.date).set(\"hour\", moment(log.time).hours()).set(\"minute\", moment(log.time).minutes()).set(\"seconds\", moment(log.time).seconds()).format('x'))\n            }\n        });\n        \n        axios.post(config.API_URL + ENUMS.API_ROUTES.DAILY_LOG,\n            {\n                project_id: Number(projectId),\n                well_id: Number(wellId),\n                logs: val\n            }, {...HttpUtil.adminHttpHeaders()})\n            .then(res => {\n                if (res.status === 201) {\n                    fetchDailyLog(Number(wellId))\n                    addToast(\"Daily logs added successfully.\", { \n                        appearance: 'success',\n                        autoDismiss: true\n                    });\n                    resetForm(values);\n                }\n            })\n            .catch(e => {\n                console.log(e)\n            });\n    };\n\n    const fetchDailyLog = (well_id) => {\n        axios.get(config.API_URL + ENUMS.API_ROUTES.DAILY_LOG + '/' + well_id,\n            {\n                ...HttpUtil.adminHttpHeaders(),\n            })\n            .then(res => {\n                if (res.status === 200 && res.data) {\n                    let logs = [];\n                    if (res.data.logs) {\n                        logs = res.data.logs.map((log, index) => {\n                            return {\n                                key: index,\n                                date: moment(log.date).format(\"YYYY-MM-DD\"),\n                                time: moment(log.date).format(\"HH : mm\"),\n                                description: log.description,\n                            }\n                        })\n                    }\n                    setDailyLogs(logs);\n                }\n            })\n            .catch(e => {\n                console.log(e)\n            })\n    }\n\n    const setParams = (locationData) => {\n        if (locationData.state && locationData.state.projectId) {\n            setProjectId(locationData.state.projectId);\n            setWellId(locationData.state.wellId);\n            fetchDailyLog(locationData.state.wellId);\n            resetForm();\n        }\n        else if (locationData.search) {\n            const params = new URLSearchParams(locationData.search);\n            const projectIdSearch = params.get('projectId');\n            const wellIdSearch = params.get('wellId');\n            setProjectId(projectIdSearch);\n            setWellId(wellIdSearch);\n            fetchDailyLog(wellIdSearch);\n            resetForm();\n        }\n    }\n\n    useEffect(() => {\n        setParams(location);\n    }, [])\n\n    useEffect(() => {\n        return history.listen((locationData) => { \n            setParams(locationData)\n        }) \n    }, [history])\n\n      \n    return (\n        <>\n            <Card bordered={false} style={{ width: '100%', marginBottom: '5px' }}>\n                <div className=\"max-w-580-px mx-auto\">\n                        <strong>Note: </strong>\n                         All times entered In tracking sheet are to be in 24 hour time format. The site layout and frac equipment info needs to be notated in the Daily log, with objectives including: \n                        <br></br>\n                        <br></br>\n                        <ul style={{listStyle: \"disc\"}}>\n                            <li>The distance from the last pump to the well (estimate) pip length </li>\n                            <li>Size of iron from pumps </li>\n                            <li>Pump types (triplex, quadplex, quinplex) </li>\n                            <li>Number of pumps </li>\n                            <li>Surface line volume </li>\n                            <li>Photographs to be collected of the equipment layout if allowed by client </li>\n                        </ul>\n                </div>\n            </Card>\n            <Card>\n                {/* <div className=\"text-right\">\n                    <Button type=\"primary\" >Submit log</Button>\n                </div> */}\n                <div className=\"md:ml-64\" style={{width: '650px'}}>\n                    <Row gutter={24} className=\"mb-2\">\n                        <Col span={6}><strong>Date</strong></Col>\n                        <Col span={6}><strong>Time</strong></Col>\n                        <Col span={10}><strong>Description</strong></Col>\n                    </Row>\n                    <Form\n                        form={form}\n                        name=\"dynamic_form_nest_item\"\n                        onFinish={onFinish}\n                        autoComplete=\"off\"\n                        initialValues={initialFormValues}\n                    >\n                        <Form.List name=\"dailyLogData\">\n                            {(fields, { add, remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                        <Row gutter={24} key={key}>\n                                            <Col span={6}>\n                                                <Form.Item\n                                                    {...restField}\n                                                    name={[name, 'date']}\n                                                    fieldKey={[fieldKey, 'date']}\n                                                    rules={[{ required: true, message: 'Missing date' }]}\n                                                >\n                                                    <DatePicker onChange={onChange} className=\"w-full\"/>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={6}>\n                                                <Form.Item\n                                                    {...restField}\n                                                    name={[name, 'time']}\n                                                    fieldKey={[fieldKey, 'time']}\n                                                    rules={[{ required: true, message: 'Missing time' }]}\n                                                >\n                                                    <TimePicker onChange={onChange} className=\"w-full\"/>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={10}>\n                                                <Form.Item\n                                                    {...restField}\n                                                    name={[name, 'description']}\n                                                    fieldKey={[fieldKey, 'description']}\n                                                    rules={[{ required: true, message: 'Missing description' }]}\n                                                    className=\"w-full\"\n                                                >\n                                                    <Input placeholder=\"Description\" className=\"w-full\"/>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={2}>\n                                                <MinusCircleOutlined onClick={() => remove(name)} />\n                                            </Col>\n                                        </Row>\n                                    ))}\n                                    <Row gutter={24}>\n                                        <Col span={8}>\n                                            <Form.Item>\n                                                <Button\n                                                    type=\"dashed\"\n                                                    onClick={() => add()}\n                                                    block\n                                                    icon={<PlusOutlined />}\n                                                >\n                                                    Add line\n                                                </Button>\n                                            </Form.Item>\n                                        </Col>\n                                    </Row>\n                                    \n                                </>\n                            )}\n                        </Form.List>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Submit log\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </div>\n            </Card>\n            {\n                dailyLogs && \n                <Card>\n                    <div className=\"max-w-580-px mx-auto\">\n                        <div><h2 className=\"module-title\">All Logs</h2></div>\n                        <Table dataSource={dailyLogs} columns={columns} pagination={false} />\n                        {/* <Row gutter={24} className=\"mb-2\">\n                                    <Col span={5}><strong>Date</strong></Col>\n                                    <Col span={5}><strong>Time</strong></Col>\n                                    <Col span={14}><strong>Description</strong></Col>\n                                </Row>\n                        {dailyLogs.map(log => {\n                            return <>\n                                \n                                <Row gutter={24} className=\"mb-2\">\n                                    <Col span={5}>{moment(log.date).format(\"YYYY-MM-DD\")}</Col>\n                                    <Col span={5}>{moment(log.date).format(\"hh : mm\")}</Col>\n                                    <Col span={14}>{log.description}</Col>\n                                </Row>\n                            </>\n                        })} */}\n                    </div>\n                </Card>\n            }\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}