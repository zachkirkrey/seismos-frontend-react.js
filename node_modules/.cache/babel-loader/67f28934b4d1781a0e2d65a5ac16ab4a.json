{"ast":null,"code":"import _toConsumableArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from'antd';import TableHeadersUtil from\"util/TableHeaderUtil\";import Grid from\"components/Grid/Grid\";import _ from\"lodash\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function WellInfo(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),wellInfoGrid=_useState2[0],setWellInfoGrid=_useState2[1];var populateWillInfoGrid=function populateWillInfoGrid(){var grid=TableHeadersUtil.wellInfoFormTableData.grid.reduce(function(rows,t,rowIdx){var columns=[];TableHeadersUtil.wellInfoFormTableData.columns.map(function(column){var defaultVal=column.field===\"well_name\"?column.defaultValue+\" 1\":\"\";columns.push({value:defaultVal,field:column.field,required:column.required});return column;});return rows.concat([columns]);},[]);setWellInfoGrid(grid);};var addNewWell=function addNewWell(e){e.preventDefault();var columns=[];TableHeadersUtil.wellInfoFormTableData.columns.map(function(column){var defaultVal=column.field===\"well_name\"?column.defaultValue+\" \"+(wellInfoGrid.length+1):\"\";columns.push({value:defaultVal,field:column.field,required:column.required});return column;});var newWellInfoGrid=[].concat(_toConsumableArray(wellInfoGrid),[columns]);setWellInfoGrid(newWellInfoGrid);};var handleWellInfoGridChanged=function handleWellInfoGridChanged(updatedGridData){props.setFormValue(updatedGridData);setWellInfoGrid(updatedGridData);};var gotoNextStep=function gotoNextStep(){var isWellInfoValid=true;var validatedWellGrid=_.cloneDeep(wellInfoGrid);validatedWellGrid.map(function(row){row.map(function(cell){if(cell.required&&cell.value===\"\"){isWellInfoValid=false;cell.className='cell-error';}return cell;});return row;});if(!isWellInfoValid){handleWellInfoGridChanged(validatedWellGrid);}else{props.next();}};useState(function(){if(props.formValues!=null){props.formValues&&setWellInfoGrid(props.formValues);}else{populateWillInfoGrid();}},props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-8\",children:[/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.wellInfoFormTableData.columns,grid:wellInfoGrid,gridValueChanged:handleWellInfoGridChanged}),/*#__PURE__*/_jsx(\"div\",{className:\"text-lightBlue-600 mt-2 cursor-pointer inline-block\",onClick:function onClick(e){return addNewWell(e);},children:\"+ Add a new well\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:function onClick(e){gotoNextStep();},children:\"Next\"})})]});}","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","WellInfo","props","wellInfoGrid","setWellInfoGrid","populateWillInfoGrid","grid","wellInfoFormTableData","reduce","rows","t","rowIdx","columns","map","column","defaultVal","field","defaultValue","push","value","required","concat","addNewWell","e","preventDefault","length","newWellInfoGrid","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","cloneDeep","row","cell","className","next","formValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n    const populateWillInfoGrid = () => {\n        const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" 1\") : \"\";\n                columns.push({ value: defaultVal, field: column.field, required: column.required });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, [])\n        setWellInfoGrid(grid);\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n            columns.push({ value: defaultVal, field: column.field, required: column.required });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid,\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid);\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        validatedWellGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isWellInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n\n        if(!isWellInfoValid) {\n            handleWellInfoGridChanged(validatedWellGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues);\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}