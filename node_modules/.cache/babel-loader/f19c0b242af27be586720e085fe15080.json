{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n  const populateWillInfoGrid = () => {\n    setWellInfoGrid(TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const columns = [];\n      TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n        const defaultVal = column.field === \"well_name\" ? column.defaultValue + \" 1\" : \"\";\n        columns.push({\n          value: defaultVal,\n          field: column.field,\n          required: column.required\n        });\n        return column;\n      });\n      return rows.concat([columns]);\n    }, []));\n  };\n\n  const addNewWell = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n      const defaultVal = column.field === \"well_name\" ? column.defaultValue + \" \" + (wellInfoGrid.length + 1) : \"\";\n      columns.push({\n        value: defaultVal,\n        field: column.field,\n        required: column.required\n      });\n      return column;\n    });\n    const newWellInfoGrid = [...wellInfoGrid, columns];\n    setWellInfoGrid(newWellInfoGrid);\n  };\n\n  const handleWellInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setWellInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isWellInfoValid = true;\n\n    const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n\n    console.log(validatedWellGrid); // validatedWellGrid.map(row => {\n    //     row.map(cell => {\n    //         if(cell.required && cell.value == \"\") {\n    //             isWellInfoValid = false;\n    //             cell.className = 'cell-error';\n    //         }\n    //     })\n    // })\n    // const validatedPadGrid = _.cloneDeep(padInfoGrid);\n    // validatedPadGrid.map(row => {\n    //     row.map(cell => {\n    //         if(cell.required && cell.value == \"\") {\n    //             isPadInfoValid = false;\n    //             cell.className = 'cell-error';\n    //         }\n    //     })\n    // })\n    // if(!isWellInfoValid || !isPadInfoValid) {\n    //     handleWellInfoGridChanged(validatedWellGrid)\n    //     handlePadInfoGridChanged(validatedPadGrid)\n    // } else {\n    //     props.next();\n    // }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setWellInfoGrid(props.formValues);\n    } else {\n      populateWillInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.wellInfoFormTableData.columns,\n        grid: wellInfoGrid,\n        gridValueChanged: handleWellInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewWell(e),\n        children: \"+ Add a new well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"SRaAPwljMBTjwdbaxo29KTstSn0=\");\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","WellInfo","props","wellInfoGrid","setWellInfoGrid","populateWillInfoGrid","wellInfoFormTableData","grid","reduce","rows","t","rowIdx","columns","map","column","defaultVal","field","defaultValue","push","value","required","concat","addNewWell","e","preventDefault","length","newWellInfoGrid","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","cloneDeep","console","log","formValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n    const populateWillInfoGrid = () => {\n        setWellInfoGrid(TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" 1\") : \"\";\n                columns.push({ value: defaultVal, field: column.field, required: column.required });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, []))\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n            columns.push({ value: defaultVal, field: column.field, required: column.required });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid,\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid);\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        console.log(validatedWellGrid);\n        // validatedWellGrid.map(row => {\n        //     row.map(cell => {\n        //         if(cell.required && cell.value == \"\") {\n        //             isWellInfoValid = false;\n        //             cell.className = 'cell-error';\n        //         }\n        //     })\n        // })\n        // const validatedPadGrid = _.cloneDeep(padInfoGrid);\n        // validatedPadGrid.map(row => {\n        //     row.map(cell => {\n        //         if(cell.required && cell.value == \"\") {\n        //             isPadInfoValid = false;\n        //             cell.className = 'cell-error';\n        //         }\n        //     })\n        // })\n        // if(!isWellInfoValid || !isPadInfoValid) {\n        //     handleWellInfoGridChanged(validatedWellGrid)\n        //     handlePadInfoGridChanged(validatedPadGrid)\n        // } else {\n        //     props.next();\n        // }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues);\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}