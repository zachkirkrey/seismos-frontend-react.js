{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n  const [showConfirmationModal, setShowConfirmationModal] = useState();\n  const [modalData, setModalData] = useState();\n\n  const remove = (rowIdx, grid) => {\n    setShowConfirmationModal(true);\n    setModalData({\n      rowIdx,\n      grid\n    });\n  };\n\n  const handleCancel = () => {\n    setShowConfirmationModal(false);\n    setModalData(null);\n  };\n\n  const handleRemoveConfirmed = data => {\n    data.grid.splice(data.rowIdx, 1);\n    setWellInfoGrid(data.grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === \"action\" ? component(index, data.grid) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }));\n    setShowConfirmationModal(false);\n    setModalData(null);\n  };\n\n  const component = (rowIdx, grid) => {\n    return /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: event => remove(rowIdx, grid)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  };\n\n  const isForcedComponent = column => {\n    return column.actionColumn;\n  };\n\n  const populateWillInfoGrid = () => {\n    const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const columns = [];\n      TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n        const className = column.actionColumn ? \"noborder\" : \"\";\n        columns.push({\n          value: column.defaultValue,\n          field: column.field,\n          required: column.required,\n          component: null,\n          forceComponent: isForcedComponent(column),\n          className: className,\n          datatype: column.datatype\n        });\n        return column;\n      });\n      return rows.concat([columns]);\n    }, []);\n    setWellInfoGrid(grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === \"action\" ? component(index, grid) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }));\n  };\n\n  const addNewWell = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n      const className = column.actionColumn ? \"noborder\" : \"\";\n      columns.push({\n        value: column.defaultValue,\n        field: column.field,\n        required: column.required,\n        component: null,\n        forceComponent: isForcedComponent(column),\n        className: className,\n        datatype: column.datatype\n      });\n      return column;\n    });\n    const newWellInfoGrid = [...wellInfoGrid, columns];\n    setWellInfoGrid(newWellInfoGrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === \"action\" ? component(index, newWellInfoGrid) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }));\n  };\n\n  const handleWellInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setWellInfoGrid(updatedGridData.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === \"action\" ? component(index, updatedGridData) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }));\n  };\n\n  const gotoNextStep = () => {\n    let isWellInfoValid = true;\n\n    const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n\n    validatedWellGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isWellInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isWellInfoValid) {\n      handleWellInfoGridChanged(validatedWellGrid);\n    } else {\n      console.log('wellInfoGrid', wellInfoGrid);\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setWellInfoGrid(props.formValues.map((x, index) => {\n        return x.map(y => {\n          const componentData = y.field === \"action\" ? component(index, props.formValues) : null;\n          return { ...y,\n            component: componentData\n          };\n        });\n      }));\n    } else {\n      populateWillInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.wellInfoFormTableData.columns,\n        grid: wellInfoGrid,\n        gridValueChanged: handleWellInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewWell(e),\n        children: \"+ Add a new well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), showConfirmationModal && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      isModalVisible: showConfirmationModal,\n      handleCancel: handleCancel,\n      handleOk: handleRemoveConfirmed,\n      modalTitle: \"Delete Row\",\n      modalText: \"Are you sure you want to delete this row?\",\n      footerButtons: {\n        cancel_text: 'Cancel',\n        confirm_text: 'Yes'\n      },\n      data: modalData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"5xz9M/AyUWNgTSchvPQqZuzFEBc=\");\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","MinusCircleOutlined","ConfirmationModal","WellInfo","props","wellInfoGrid","setWellInfoGrid","showConfirmationModal","setShowConfirmationModal","modalData","setModalData","remove","rowIdx","grid","handleCancel","handleRemoveConfirmed","data","splice","map","x","index","y","componentData","field","component","event","isForcedComponent","column","actionColumn","populateWillInfoGrid","wellInfoFormTableData","reduce","rows","t","columns","className","push","value","defaultValue","required","forceComponent","datatype","concat","addNewWell","e","preventDefault","newWellInfoGrid","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","cloneDeep","row","cell","console","log","next","formValues","cancel_text","confirm_text"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n    const [showConfirmationModal, setShowConfirmationModal] = useState();\n    const [modalData, setModalData] = useState();\n\n    const remove = (rowIdx, grid) => {\n        setShowConfirmationModal(true);\n        setModalData({\n            rowIdx,\n            grid\n        })\n    }\n\n    const handleCancel = () => {\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n\n    const handleRemoveConfirmed = (data) => {\n        data.grid.splice(data.rowIdx, 1);\n        setWellInfoGrid(data.grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === \"action\" ? component(index, data.grid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n\n    const component = (rowIdx, grid) => {\n        return <MinusCircleOutlined onClick={(event) => remove(rowIdx, grid)}/>;\n    }\n\n    const isForcedComponent = (column) => {\n        return column.actionColumn;\n    }\n\n    const populateWillInfoGrid = () => {\n        const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const className = column.actionColumn ? \"noborder\" : \"\";\n                columns.push({\n                    value: column.defaultValue,\n                    field: column.field,\n                    required: column.required,\n                    component: null,\n                    forceComponent: isForcedComponent(column),\n                    className: className,\n                    datatype: column.datatype\n                });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, []);\n        setWellInfoGrid(grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === \"action\" ? component(index, grid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            const className = column.actionColumn ? \"noborder\" : \"\";\n            columns.push({\n                value: column.defaultValue,\n                field: column.field,\n                required: column.required,\n                component: null,\n                forceComponent: isForcedComponent(column),\n                className: className,\n                datatype: column.datatype\n            });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid,\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === \"action\" ? component(index, newWellInfoGrid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === \"action\" ? component(index, updatedGridData) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        validatedWellGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isWellInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n\n        if(!isWellInfoValid) {\n            handleWellInfoGridChanged(validatedWellGrid)\n        } else {\n            console.log('wellInfoGrid', wellInfoGrid)\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues.map((x, index) => {\n                return x.map(y => { \n                    const componentData = y.field === \"action\" ? component(index, props.formValues) : null\n                    return {\n                        ...y,\n                        component: componentData\n                    }\n                })\n            }));\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n            {\n                showConfirmationModal && <ConfirmationModal\n                    isModalVisible={showConfirmationModal}\n                    handleCancel={handleCancel}\n                    handleOk={handleRemoveConfirmed}\n                    modalTitle={\"Delete Row\"}\n                    modalText={\"Are you sure you want to delete this row?\"}\n                    footerButtons={{cancel_text: 'Cancel', confirm_text: 'Yes'}}\n                    data={modalData}\n                >\n                </ConfirmationModal>\n            }\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}