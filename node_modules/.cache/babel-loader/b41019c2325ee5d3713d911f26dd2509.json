{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n  const remove = index => {\n    console.log(index);\n  };\n\n  const populateWillInfoGrid = () => {\n    const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const columns = [];\n      TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n        const defaultVal = column.actionColumn && rows.length > 1 ? /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n          onClick: () => remove(rowIdx)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 77\n        }, this) : column.defaultValue;\n        columns.push({\n          value: defaultVal,\n          field: column.field,\n          required: column.required,\n          component: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => console.log(\"clicked\"),\n            children: \"Rendered\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 110\n          }, this)\n        });\n        return column;\n      });\n      return rows.concat([columns]);\n    }, []);\n    setWellInfoGrid(grid);\n  };\n\n  const addNewWell = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n      // const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n      columns.push({\n        value: column.defaultValue,\n        field: column.field,\n        required: column.required\n      });\n      return column;\n    });\n    const newWellInfoGrid = [...wellInfoGrid, columns];\n    setWellInfoGrid(newWellInfoGrid);\n  };\n\n  const handleWellInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setWellInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isWellInfoValid = true;\n\n    const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n\n    validatedWellGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isWellInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isWellInfoValid) {\n      handleWellInfoGridChanged(validatedWellGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setWellInfoGrid(props.formValues);\n    } else {\n      populateWillInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.wellInfoFormTableData.columns,\n        grid: wellInfoGrid,\n        gridValueChanged: handleWellInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewWell(e),\n        children: \"+ Add a new well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"SRaAPwljMBTjwdbaxo29KTstSn0=\");\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","MinusCircleOutlined","WellInfo","props","wellInfoGrid","setWellInfoGrid","remove","index","console","log","populateWillInfoGrid","grid","wellInfoFormTableData","reduce","rows","t","rowIdx","columns","map","column","defaultVal","actionColumn","length","defaultValue","push","value","field","required","component","concat","addNewWell","e","preventDefault","newWellInfoGrid","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","cloneDeep","row","cell","className","next","formValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n    const remove = (index) => {\n        console.log(index);\n    }\n\n    const populateWillInfoGrid = () => {\n        const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const defaultVal = column.actionColumn && rows.length > 1 ? <MinusCircleOutlined onClick={() => remove(rowIdx)} /> : column.defaultValue;\n                columns.push({ value: defaultVal, field: column.field, required: column.required, component: <button onClick={() => console.log(\"clicked\")}>\n                Rendered\n              </button> });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, [])\n        setWellInfoGrid(grid);\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            // const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n            columns.push({ value: column.defaultValue, field: column.field, required: column.required });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid,\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid);\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        validatedWellGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isWellInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n\n        if(!isWellInfoValid) {\n            handleWellInfoGridChanged(validatedWellGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues);\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}