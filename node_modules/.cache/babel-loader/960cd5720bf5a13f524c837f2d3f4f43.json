{"ast":null,"code":"import _slicedToArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button,Space}from'antd';import TableHeadersUtil from\"util/TableHeaderUtil\";import Grid from\"components/Grid/Grid\";import _ from\"lodash\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function JobInfo(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),jobInfoGrid=_useState2[0],setJobInfoGrid=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),padInfoGrid=_useState4[0],setPadInfoGrid=_useState4[1];var getRow=function getRow(t){return t.rows.map(function(row){return[{value:row.label,readOnly:true,disableEvents:true},{value:\"\",field:row.field,required:row.required}];});};var populateJobInfoGrid=function populateJobInfoGrid(){setJobInfoGrid(TableHeadersUtil.jobInfoFormTableData.grid.reduce(function(rows,t,rowIdx){var row=getRow(t);return rows.concat(row);},[]));};var populatePadInfoGrid=function populatePadInfoGrid(){setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce(function(rows,t,rowIdx){var row=getRow(t);return rows.concat(row);},[]));};var handleJobInfoGridChanged=function handleJobInfoGridChanged(updatedGridData){props.setJobInfoFormValue(updatedGridData);setJobInfoGrid(updatedGridData);};var handlePadInfoGridChanged=function handlePadInfoGridChanged(updatedGridData){props.setPadInfoFormValue(updatedGridData);setPadInfoGrid(updatedGridData);};var gotoNextStep=function gotoNextStep(){var isJobInfoValid=true;var isPadInfoValid=true;var validatedJobGrid=_.cloneDeep(jobInfoGrid);validatedJobGrid.map(function(row){row.map(function(cell){if(cell.required&&cell.value===\"\"){isJobInfoValid=false;cell.className='cell-error';}return cell;});return row;});var validatedPadGrid=_.cloneDeep(padInfoGrid);validatedPadGrid.map(function(row){row.map(function(cell){if(cell.required&&cell.value===\"\"){isPadInfoValid=false;cell.className='cell-error';}return cell;});return row;});if(!isJobInfoValid||!isPadInfoValid){handleJobInfoGridChanged(validatedJobGrid);handlePadInfoGridChanged(validatedPadGrid);}else{props.next();}};useState(function(){if(props.jobInfoFormValues!=null){props.jobInfoFormValues&&setJobInfoGrid(props.jobInfoFormValues);}else{populateJobInfoGrid();}if(props.padInfoFormValues!=null){props.padInfoFormValues&&setPadInfoGrid(props.padInfoFormValues);}else{populatePadInfoGrid();}},props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex\",style:{width:'80%',marginLeft:'auto',marginRight:'auto'},children:/*#__PURE__*/_jsxs(Space,{size:\"large\",children:[/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.jobInfoFormTableData.columns,grid:jobInfoGrid,className:\"job-info-grid mb-8\",gridValueChanged:handleJobInfoGridChanged}),/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.padInfoFormTableData.columns,grid:padInfoGrid,className:\"pad-info-grid mb-8\",gridValueChanged:handlePadInfoGridChanged})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:function onClick(e){gotoNextStep();},children:\"Next\"})})]});}","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js"],"names":["React","useState","Button","Space","TableHeadersUtil","Grid","_","JobInfo","props","jobInfoGrid","setJobInfoGrid","padInfoGrid","setPadInfoGrid","getRow","t","rows","map","row","value","label","readOnly","disableEvents","field","required","populateJobInfoGrid","jobInfoFormTableData","grid","reduce","rowIdx","concat","populatePadInfoGrid","padInfoFormTableData","handleJobInfoGridChanged","updatedGridData","setJobInfoFormValue","handlePadInfoGridChanged","setPadInfoFormValue","gotoNextStep","isJobInfoValid","isPadInfoValid","validatedJobGrid","cloneDeep","cell","className","validatedPadGrid","next","jobInfoFormValues","padInfoFormValues","width","marginLeft","marginRight","columns","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function JobInfo(props) {\n    \n    const [jobInfoGrid, setJobInfoGrid] = useState([]);\n    const [padInfoGrid, setPadInfoGrid] = useState([]);\n\n    const getRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: row.label, readOnly: true, disableEvents: true },\n                { value: \"\", field: row.field, required: row.required },\n            ]\n        })\n    }\n\n    const populateJobInfoGrid = () => {\n        setJobInfoGrid(TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    const populatePadInfoGrid = () => {\n        setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    const handleJobInfoGridChanged = (updatedGridData) => {\n        props.setJobInfoFormValue(updatedGridData);\n        setJobInfoGrid(updatedGridData);\n    }\n\n    const handlePadInfoGridChanged = (updatedGridData) => {\n        props.setPadInfoFormValue(updatedGridData);\n        setPadInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isJobInfoValid = true;\n        let isPadInfoValid = true;\n        const validatedJobGrid = _.cloneDeep(jobInfoGrid);\n        validatedJobGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isJobInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            });\n            return row;\n        })\n        const validatedPadGrid = _.cloneDeep(padInfoGrid);\n        validatedPadGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isPadInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            });\n            return row;\n        })\n        if(!isJobInfoValid || !isPadInfoValid) {\n            handleJobInfoGridChanged(validatedJobGrid)\n            handlePadInfoGridChanged(validatedPadGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.jobInfoFormValues != null) {\n            props.jobInfoFormValues && setJobInfoGrid(props.jobInfoFormValues);\n        } else {\n            populateJobInfoGrid();\n        }\n        if(props.padInfoFormValues != null) {\n            props.padInfoFormValues && setPadInfoGrid(props.padInfoFormValues);\n        } else {\n            populatePadInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"flex\" style={{width: '80%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Space size=\"large\">\n                    <Grid \n                        columns={TableHeadersUtil.jobInfoFormTableData.columns}\n                        grid={jobInfoGrid}\n                        className=\"job-info-grid mb-8\"\n                        gridValueChanged={handleJobInfoGridChanged}\n                    ></Grid>\n                    <Grid \n                        columns={TableHeadersUtil.padInfoFormTableData.columns}\n                        grid={padInfoGrid}\n                        className=\"pad-info-grid mb-8\"\n                        gridValueChanged={handlePadInfoGridChanged}\n                    ></Grid>\n                </Space>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}