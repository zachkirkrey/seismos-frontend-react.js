{"ast":null,"code":"import { extend } from \"underscore\";\n\nconst getNewValue = (values, prevValue, fieldIndex, index, counter) => {\n  if (index >= fieldIndex) {\n    return values[counter] ? values[counter] : prevValue;\n  } else {\n    return prevValue;\n  }\n};\n\nconst setClipboardValues = (fields, values, fieldIndex) => {\n  let newFieldValues = {};\n  let counter = -1;\n  Object.keys(fields).map((field_key, index) => {\n    newFieldValues = { ...newFieldValues,\n      [field_key]: index >= fieldIndex ? getNewValue(values, fields[field_key], fieldIndex, index, ++counter) : fields[field_key]\n    };\n    return field_key;\n  });\n  return newFieldValues;\n};\n\nconst formatFormValuesFromGridData = gridValues => {\n  let fieldVlaues = {};\n  if (!gridValues) return fieldVlaues;\n  gridValues.map(gridRow => {\n    const obj = gridRow.find(val => val.field);\n    const fieldValuePair = {\n      [obj.field]: obj.value\n    };\n    fieldVlaues = extend(fieldVlaues, fieldValuePair);\n    return fieldValuePair;\n  });\n  return fieldVlaues;\n};\n\nconst formatFormValuesFromColumnGridData = gridValues => {\n  let fieldValues = {};\n  if (!gridValues) return fieldVlaues;\n  gridValues.map(col => {\n    fieldVlaues = extend(fieldValues, {\n      [col.field]: col.value\n    });\n    return col;\n  });\n  return fieldValues;\n};\n\nconst ProjectUtil = {\n  setClipboardValues,\n  formatFormValuesFromGridData\n};\nexport default ProjectUtil;","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/ProjectUtil.js"],"names":["extend","getNewValue","values","prevValue","fieldIndex","index","counter","setClipboardValues","fields","newFieldValues","Object","keys","map","field_key","formatFormValuesFromGridData","gridValues","fieldVlaues","gridRow","obj","find","val","field","fieldValuePair","value","formatFormValuesFromColumnGridData","fieldValues","col","ProjectUtil"],"mappings":"AAAA,SAASA,MAAT,QAAuB,YAAvB;;AAEA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,OAAvC,KAAmD;AACnE,MAAGD,KAAK,IAAID,UAAZ,EAAwB;AACpB,WAAOF,MAAM,CAACI,OAAD,CAAN,GAAkBJ,MAAM,CAACI,OAAD,CAAxB,GAAoCH,SAA3C;AACH,GAFD,MAEO;AACH,WAAOA,SAAP;AACH;AACJ,CAND;;AAQA,MAAMI,kBAAkB,GAAG,CAACC,MAAD,EAASN,MAAT,EAAiBE,UAAjB,KAAgC;AACvD,MAAIK,cAAc,GAAG,EAArB;AACA,MAAIH,OAAO,GAAG,CAAC,CAAf;AACAI,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,GAApB,CAAwB,CAACC,SAAD,EAAYR,KAAZ,KAAsB;AAC1CI,IAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEb,OAACI,SAAD,GAAcR,KAAK,IAAID,UAAV,GAAwBH,WAAW,CAACC,MAAD,EAASM,MAAM,CAACK,SAAD,CAAf,EAA4BT,UAA5B,EAAwCC,KAAxC,EAA+C,EAAEC,OAAjD,CAAnC,GAA+FE,MAAM,CAACK,SAAD;AAFrG,KAAjB;AAIA,WAAOA,SAAP;AACH,GAND;AAOA,SAAOJ,cAAP;AACH,CAXD;;AAaA,MAAMK,4BAA4B,GAAIC,UAAD,IAAgB;AACjD,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAI,CAACD,UAAL,EACI,OAAOC,WAAP;AACJD,EAAAA,UAAU,CAACH,GAAX,CAAeK,OAAO,IAAI;AACtB,UAAMC,GAAG,GAAGD,OAAO,CAACE,IAAR,CAAaC,GAAG,IAAIA,GAAG,CAACC,KAAxB,CAAZ;AACA,UAAMC,cAAc,GAAG;AAAC,OAACJ,GAAG,CAACG,KAAL,GAAaH,GAAG,CAACK;AAAlB,KAAvB;AACAP,IAAAA,WAAW,GAAGhB,MAAM,CAACgB,WAAD,EAAcM,cAAd,CAApB;AAEA,WAAOA,cAAP;AACH,GAND;AAQA,SAAON,WAAP;AACH,CAbD;;AAeA,MAAMQ,kCAAkC,GAAIT,UAAD,IAAgB;AACvD,MAAIU,WAAW,GAAG,EAAlB;AACA,MAAI,CAACV,UAAL,EACI,OAAOC,WAAP;AACJD,EAAAA,UAAU,CAACH,GAAX,CAAec,GAAG,IAAI;AAClBV,IAAAA,WAAW,GAAGhB,MAAM,CAACyB,WAAD,EAAc;AAAC,OAACC,GAAG,CAACL,KAAL,GAAaK,GAAG,CAACH;AAAlB,KAAd,CAApB;AAEA,WAAOG,GAAP;AACH,GAJD;AAMA,SAAOD,WAAP;AACH,CAXD;;AAaA,MAAME,WAAW,GAAG;AAChBpB,EAAAA,kBADgB;AAEhBO,EAAAA;AAFgB,CAApB;AAKA,eAAea,WAAf","sourcesContent":["import { extend } from \"underscore\";\n\nconst getNewValue = (values, prevValue, fieldIndex, index, counter) => {\n    if(index >= fieldIndex) {\n        return values[counter] ? values[counter] : prevValue;\n    } else {\n        return prevValue;\n    }\n}\n\nconst setClipboardValues = (fields, values, fieldIndex) => {\n    let newFieldValues = {};\n    let counter = -1;\n    Object.keys(fields).map((field_key, index) => {\n        newFieldValues = {\n            ...newFieldValues,\n            [field_key]: (index >= fieldIndex) ? getNewValue(values, fields[field_key], fieldIndex, index, ++counter) : fields[field_key],\n        }\n        return field_key;\n    });\n    return newFieldValues;\n}\n\nconst formatFormValuesFromGridData = (gridValues) => {\n    let fieldVlaues = {};\n    if (!gridValues)\n        return fieldVlaues;\n    gridValues.map(gridRow => {\n        const obj = gridRow.find(val => val.field);\n        const fieldValuePair = {[obj.field]: obj.value};\n        fieldVlaues = extend(fieldVlaues, fieldValuePair);\n\n        return fieldValuePair;\n    });\n\n    return fieldVlaues;\n}\n\nconst formatFormValuesFromColumnGridData = (gridValues) => {\n    let fieldValues = {};\n    if (!gridValues)\n        return fieldVlaues;\n    gridValues.map(col => {\n        fieldVlaues = extend(fieldValues, {[col.field]: col.value})\n\n        return col;\n    });\n\n    return fieldValues;\n}\n\nconst ProjectUtil = {\n    setClipboardValues,\n    formatFormValuesFromGridData\n}\n\nexport default ProjectUtil;"]},"metadata":{},"sourceType":"module"}