{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form, Table, Button, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport ProjectUtil from \"util/ProjectUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function JobInfo(props) {\n  _s();\n\n  const [form] = Form.useForm();\n  const [jobInfoGrid, setJobInfoGrid] = useState([]);\n  const [padInfoGrid, setPadInfoGrid] = useState([]);\n  const rowLabels = ['Job name', 'Pad name', 'Job type', 'Pad Id', 'Job id', 'Client name', 'AFE #', 'Customer field rep', 'Country', 'Rep contact #', 'Basin', 'Operator', 'State', 'Service company', 'Start date', 'Wireline company'];\n\n  const getRow = t => {\n    return t.rows.map(label => {\n      return [{\n        value: label,\n        readOnly: true,\n        disableEvents: true\n      }, {\n        value: \"\"\n      }];\n    });\n  };\n\n  const populateJobInfoGrid = () => {\n    setJobInfoGrid(TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const row = getRow(t);\n      return rows.concat(row);\n    }, []));\n  };\n\n  const populatePadInfoGrid = () => {\n    setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const row = getRow(t);\n      return rows.concat(row);\n    }, []));\n  };\n\n  useState(() => {\n    props.formValues && form.setFieldsValue(props.formValues);\n    populateJobInfoGrid();\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"flex\",\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        size: \"large\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.jobInfoFormTableData.columns,\n          grid: jobInfoGrid,\n          className: \"job-info-grid mb-8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.padInfoFormTableData.columns,\n          grid: padInfoGrid,\n          className: \"pad-job-info-grid mb-8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          props.next();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(JobInfo, \"vaM/UnsTquom9J9FsNNC9+aCsNA=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = JobInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js"],"names":["React","useState","Form","Table","Button","Space","TableHeadersUtil","ProjectUtil","Grid","JobInfo","props","form","useForm","jobInfoGrid","setJobInfoGrid","padInfoGrid","setPadInfoGrid","rowLabels","getRow","t","rows","map","label","value","readOnly","disableEvents","populateJobInfoGrid","jobInfoFormTableData","grid","reduce","rowIdx","row","concat","populatePadInfoGrid","padInfoFormTableData","formValues","setFieldsValue","columns","e","next"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Table, Button, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport ProjectUtil from \"util/ProjectUtil\";\nimport Grid from \"components/Grid/Grid\";\n\nexport default function JobInfo(props) {\n    const [form] = Form.useForm();\n    \n    const [jobInfoGrid, setJobInfoGrid] = useState([]);\n    const [padInfoGrid, setPadInfoGrid] = useState([]);\n\n    const rowLabels = [\n        'Job name',\n        'Pad name',\n        'Job type',\n        'Pad Id',\n        'Job id',\n        'Client name',\n        'AFE #',\n        'Customer field rep',\n        'Country',\n        'Rep contact #',\n        'Basin',\n        'Operator',\n        'State',\n        'Service company',\n        'Start date',\n        'Wireline company'\n    ];\n\n    const getRow = (t) => {\n        return t.rows.map(label => {\n            return [\n                { value: label, readOnly: true, disableEvents: true },\n                { value: \"\" },\n            ]\n        })\n    }\n    \n    const populateJobInfoGrid = () => {\n        setJobInfoGrid(TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    const populatePadInfoGrid = () => {\n        setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    useState(() => {\n        props.formValues && form.setFieldsValue(props.formValues)\n        populateJobInfoGrid();\n    }, props);\n\n    return (\n        <>\n            <div class=\"flex\">\n                <Space size=\"large\">\n                    <Grid \n                        columns={TableHeadersUtil.jobInfoFormTableData.columns}\n                        grid={jobInfoGrid}\n                        className=\"job-info-grid mb-8\"\n                    ></Grid>\n                    <Grid \n                        columns={TableHeadersUtil.padInfoFormTableData.columns}\n                        grid={padInfoGrid}\n                        className=\"pad-job-info-grid mb-8\"\n                    ></Grid>\n                </Space>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {props.next()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}