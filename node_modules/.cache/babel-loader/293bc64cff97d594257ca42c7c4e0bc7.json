{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useObject } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n  const [showConfirmationModal, setShowConfirmationModal] = useState();\n  const [modalData, setModalData] = useState();\n\n  const remove = (rowIdx, grid) => {\n    setShowConfirmationModal(true);\n    setModalData({\n      data: {\n        rowIdx,\n        grid\n      }\n    });\n  };\n\n  const handleCancel = () => {\n    setShowConfirmationModal(true);\n    setModalData(null);\n  };\n\n  const handleRemoveConfirmed = data => {\n    data.grid.splice(data.rowIdx, 1);\n    setWellInfoGrid(data.grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == \"action\" ? component(index, data.grid) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }));\n  };\n\n  const component = (rowIdx, grid) => {\n    console.log(rowIdx, grid);\n    return /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: event => remove(rowIdx, grid)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  };\n\n  const isForcedComponent = column => {\n    return column.actionColumn;\n  };\n\n  const populateWillInfoGrid = () => {\n    const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const columns = [];\n      TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n        const className = column.actionColumn ? \"noborder\" : \"\";\n        columns.push({\n          value: column.defaultValue,\n          field: column.field,\n          required: column.required,\n          component: null,\n          forceComponent: isForcedComponent(column),\n          className: className\n        });\n        return column;\n      });\n      return rows.concat([columns]);\n    }, []);\n    console.log(grid);\n    setWellInfoGrid(grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == \"action\" ? component(index, grid) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }));\n  };\n\n  const addNewWell = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n      const className = column.actionColumn ? \"noborder\" : \"\";\n      columns.push({\n        value: column.defaultValue,\n        field: column.field,\n        required: column.required,\n        component: null,\n        forceComponent: isForcedComponent(column),\n        className: className\n      });\n      return column;\n    });\n    const newWellInfoGrid = [...wellInfoGrid, columns];\n    setWellInfoGrid(newWellInfoGrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == \"action\" ? component(index, newWellInfoGrid) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }));\n  };\n\n  const handleWellInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setWellInfoGrid(updatedGridData.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == \"action\" ? component(index, updatedGridData) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }));\n  };\n\n  const gotoNextStep = () => {\n    let isWellInfoValid = true;\n\n    const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n\n    validatedWellGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isWellInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isWellInfoValid) {\n      handleWellInfoGridChanged(validatedWellGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setWellInfoGrid(props.formValues);\n    } else {\n      populateWillInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.wellInfoFormTableData.columns,\n        grid: wellInfoGrid,\n        gridValueChanged: handleWellInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewWell(e),\n        children: \"+ Add a new well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), showConfirmationModal && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      isModalVisible: showConfirmationModal,\n      handleCancel: handleCancel,\n      handleOk: handleRemoveConfirmed,\n      modalText: modalText,\n      button: {\n        cancel_text: 'Cancel',\n        confirm_text: 'Yes'\n      },\n      data: modalData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"bgf4A5xe1npXgPQMlJjKyLH28BA=\");\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","useObject","Button","TableHeadersUtil","Grid","_","MinusCircleOutlined","ConfirmationModal","WellInfo","props","wellInfoGrid","setWellInfoGrid","showConfirmationModal","setShowConfirmationModal","modalData","setModalData","remove","rowIdx","grid","data","handleCancel","handleRemoveConfirmed","splice","map","x","index","y","componentData","field","component","console","log","event","isForcedComponent","column","actionColumn","populateWillInfoGrid","wellInfoFormTableData","reduce","rows","t","columns","className","push","value","defaultValue","required","forceComponent","concat","addNewWell","e","preventDefault","newWellInfoGrid","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","cloneDeep","row","cell","next","formValues","modalText","cancel_text","confirm_text"],"mappings":"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","sourcesContent":["import React, { useState, useObject } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n    const [showConfirmationModal, setShowConfirmationModal] = useState();\n    const [modalData, setModalData] = useState();\n\n    const remove = (rowIdx, grid) => {\n        setShowConfirmationModal(true);\n        setModalData({\n            data: {\n                rowIdx,\n                grid\n            }\n        })\n    }\n\n    const handleCancel = () => {\n        setShowConfirmationModal(true);\n        setModalData(null);\n    }\n\n    const handleRemoveConfirmed = (data) => {\n        data.grid.splice(data.rowIdx, 1);\n        setWellInfoGrid(data.grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field == \"action\" ? component(index, data.grid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n    const component = (rowIdx, grid) => {\n        console.log(rowIdx, grid);\n        return <MinusCircleOutlined onClick={(event) => remove(rowIdx, grid)}/>;\n    }\n\n    const isForcedComponent = (column) => {\n        return column.actionColumn;\n    }\n\n    const populateWillInfoGrid = () => {\n        const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const className = column.actionColumn ? \"noborder\" : \"\";\n                columns.push({\n                    value: column.defaultValue,\n                    field: column.field,\n                    required: column.required,\n                    component: null,\n                    forceComponent: isForcedComponent(column),\n                    className: className\n                });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, [])\n        console.log(grid);\n        setWellInfoGrid(grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field == \"action\" ? component(index, grid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            const className = column.actionColumn ? \"noborder\" : \"\";\n            columns.push({\n                value: column.defaultValue,\n                field: column.field,\n                required: column.required,\n                component: null,\n                forceComponent: isForcedComponent(column),\n                className: className\n            });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid,\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field == \"action\" ? component(index, newWellInfoGrid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field == \"action\" ? component(index, updatedGridData) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        validatedWellGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isWellInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n\n        if(!isWellInfoValid) {\n            handleWellInfoGridChanged(validatedWellGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues);\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n            {\n                showConfirmationModal && <ConfirmationModal\n                    isModalVisible={showConfirmationModal}\n                    handleCancel={handleCancel}\n                    handleOk={handleRemoveConfirmed}\n                    modalText={modalText}\n                    button={{cancel_text: 'Cancel', confirm_text: 'Yes'}}\n                    data={modalData}\n                >\n                </ConfirmationModal>\n            }\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}