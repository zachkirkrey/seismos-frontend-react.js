{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SheetRenderer = props => {\n  console.log(props);\n  const {\n    className,\n    columns\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: className + \" seismos-spreadsheet-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          className: `cell ${className}`,\n          style: {\n            width: col.width,\n            background: \"#f9f9f9\",\n            padding: \"10px 0px\",\n            textAlign: \"center\"\n          },\n          colSpan: col.colSpan ? col.colSpan : 1,\n          children: col.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SheetRenderer;\n\nconst CellRenderer = props => {\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"cell\",\n    style: {\n      textAlign: \"center\"\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = CellRenderer;\nexport default function Gxrid(props) {\n  _s();\n\n  const [columns, setColumns] = useState();\n  const [grid, setGrid] = useState();\n\n  const renderSheet = sheetProps => {\n    return /*#__PURE__*/_jsxDEV(SheetRenderer, {\n      columns: columns,\n      ...sheetProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  };\n\n  const renderRow = rowProps => {\n    const {\n      row,\n      cells,\n      ...rest\n    } = rowProps;\n    return /*#__PURE__*/_jsxDEV(CellRenderer, {\n      rowIndex: row,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  };\n\n  useEffect(() => {\n    console.log(props);\n    setColumns(props.columns);\n    setGrid(props.grid);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: props.width ? props.width : \"100%\"\n    },\n    children: grid && /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n      data: grid,\n      valueRenderer: cell => cell.value,\n      sheetRenderer: renderSheet,\n      className: props.className,\n      isCellNavigable: (cell, row, col) => {\n        return !cell.disableEvents ? true : false;\n      } // cellRenderer={renderRow}\n      ,\n      onCellsChanged: changes => {\n        console.log('HERE');\n        const gridData = grid.map(row => [...row]);\n        changes.forEach(({\n          cell,\n          row,\n          col,\n          value\n        }) => {\n          gridData[row][col] = { ...gridData[row][col],\n            value\n          };\n        });\n        setGrid(gridData);\n        props.gridValueChanged(gridData);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n} // class Grid extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       columns: props.columns,\n//       grid: props.grid,\n//       className: props.className\n//     }\n//     this.renderSheet = this.renderSheet.bind(this);\n//     this.renderRow = this.renderRow.bind(this);\n//   }\n//   renderSheet(props) {\n//     return <SheetRenderer columns={this.state.columns} {...props} />;\n//   }\n//   renderRow(props) {\n//     const { row, cells, ...rest } = props;\n//     return <CellRenderer rowIndex={row} {...rest} />;\n//   }\n//   render() {\n//     return (\n//       <div style={{ width: this.props.width ? this.props.width : \"100%\" }}>\n//         <ReactDataSheet\n//             data={this.state.grid}\n//             valueRenderer={cell => cell.value}\n//             sheetRenderer={this.renderSheet}\n//             className={this.state.className}\n//             isCellNavigable={(cell, row, col) => {return !cell.disableEvents ? true : false}}\n//             // cellRenderer={this.renderRow}\n//             onCellsChanged={changes => {\n//                 const grid = this.state.grid.map(row => [...row]);\n//                     changes.forEach(({ cell, row, col, value }) => {\n//                     grid[row][col] = { ...grid[row][col], value };\n//                 });\n//                 this.setState({ grid });\n//             }}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// export default Grid;\n\n_s(Gxrid, \"MZoDtHo1giPfeM50l2VPHULcZj0=\");\n\n_c3 = Gxrid;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SheetRenderer\");\n$RefreshReg$(_c2, \"CellRenderer\");\n$RefreshReg$(_c3, \"Gxrid\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/Grid.js"],"names":["React","useEffect","useState","ReactDataSheet","SheetRenderer","props","console","log","className","columns","map","col","index","width","background","padding","textAlign","colSpan","label","children","CellRenderer","Gxrid","setColumns","grid","setGrid","renderSheet","sheetProps","renderRow","rowProps","row","cells","rest","cell","value","disableEvents","changes","gridData","forEach","gridValueChanged"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./Grid.css\";\n\nconst SheetRenderer = props => {\n  console.log(props)\n  const { className, columns } = props;\n  return (\n    <table className={className + \" seismos-spreadsheet-grid\"}>\n      <thead>\n        <tr>\n          {columns.map((col, index) => (\n            <th\n              className={`cell ${className}`}\n              style={{\n                width: col.width,\n                background: \"#f9f9f9\",\n                padding: \"10px 0px\",\n                textAlign: \"center\"\n              }}\n              colSpan={col.colSpan ? col.colSpan : 1}\n            >\n              {col.label}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>{props.children}</tbody>\n    </table>\n  );\n};\n\nconst CellRenderer = props => {\n  const { children } = props;\n  return (\n    <td className=\"cell\" style={{ textAlign: \"center\" }}>\n      {children}\n    </td>\n  );\n};\n\nexport default function Gxrid(props) {\n\n  const [columns, setColumns] = useState();\n  const [grid, setGrid] = useState();\n\n  const renderSheet = (sheetProps) => {\n    return <SheetRenderer columns={columns} {...sheetProps} />;\n  }\n\n  const renderRow = (rowProps) => {\n    const { row, cells, ...rest } = rowProps;\n    return <CellRenderer rowIndex={row} {...rest} />;\n  }\n\n  useEffect(() => {\n    console.log(props)\n    setColumns(props.columns);\n    setGrid(props.grid);\n  }, [props]);\n\n  return (\n    <div style={{ width: props.width ? props.width : \"100%\" }}>\n      {grid && <ReactDataSheet\n          data={grid}\n          valueRenderer={cell => cell.value}\n          sheetRenderer={renderSheet}\n          className={props.className}\n          isCellNavigable={(cell, row, col) => {return !cell.disableEvents ? true : false}}\n          // cellRenderer={renderRow}\n          onCellsChanged={changes => {\n            console.log('HERE');\n              const gridData = grid.map(row => [...row]);\n                  changes.forEach(({ cell, row, col, value }) => {\n                    gridData[row][col] = { ...gridData[row][col], value };\n              });\n              setGrid(gridData);\n              props.gridValueChanged(gridData);\n          }}\n      />}\n    </div>\n  );\n}\n\n// class Grid extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       columns: props.columns,\n//       grid: props.grid,\n//       className: props.className\n//     }\n//     this.renderSheet = this.renderSheet.bind(this);\n//     this.renderRow = this.renderRow.bind(this);\n//   }\n\n//   renderSheet(props) {\n//     return <SheetRenderer columns={this.state.columns} {...props} />;\n//   }\n\n//   renderRow(props) {\n//     const { row, cells, ...rest } = props;\n//     return <CellRenderer rowIndex={row} {...rest} />;\n//   }\n\n//   render() {\n//     return (\n//       <div style={{ width: this.props.width ? this.props.width : \"100%\" }}>\n//         <ReactDataSheet\n//             data={this.state.grid}\n//             valueRenderer={cell => cell.value}\n//             sheetRenderer={this.renderSheet}\n//             className={this.state.className}\n//             isCellNavigable={(cell, row, col) => {return !cell.disableEvents ? true : false}}\n//             // cellRenderer={this.renderRow}\n//             onCellsChanged={changes => {\n//                 const grid = this.state.grid.map(row => [...row]);\n//                     changes.forEach(({ cell, row, col, value }) => {\n//                     grid[row][col] = { ...grid[row][col], value };\n//                 });\n//                 this.setState({ grid });\n//             }}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// export default Grid;\n"]},"metadata":{},"sourceType":"module"}