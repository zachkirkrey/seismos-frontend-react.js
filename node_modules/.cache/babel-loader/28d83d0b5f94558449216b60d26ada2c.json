{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Form, Input } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo() {\n  _s();\n\n  const [form] = Form.useForm();\n  const columns = TableHeadersUtil.projectTable;\n  const data = FAKE_DATA.LIST_OF_PROJECTS;\n\n  const onFinish = values => {\n    props.setFormValue(values);\n    props.next();\n  };\n\n  const handlePaste = (e, form, fieldIndex) => {\n    var data = e.clipboardData.items[0];\n    const values = [];\n    data.getAsString(str => {\n      str.split(/\\s/).forEach(v => {\n        values.push(v);\n      });\n      form.setFieldsValue(ProjectUtil.setClipboardValues(form.getFieldsValue(), values, fieldIndex));\n    });\n  };\n\n  useState(() => {\n    props.formValues && form.setFieldsValue(props.formValues);\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(WellInfo, \"nUUTpLI9g6ZmEVmct33bFE/sJ/k=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","Form","Input","WellInfo","form","useForm","columns","TableHeadersUtil","projectTable","data","FAKE_DATA","LIST_OF_PROJECTS","onFinish","values","props","setFormValue","next","handlePaste","e","fieldIndex","clipboardData","items","getAsString","str","split","forEach","v","push","setFieldsValue","ProjectUtil","setClipboardValues","getFieldsValue","useState","formValues"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,MAA5B;;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAC/B,QAAM,CAACC,IAAD,IAASH,IAAI,CAACI,OAAL,EAAf;AAEA,QAAMC,OAAO,GAAGC,gBAAgB,CAACC,YAAjC;AACA,QAAMC,IAAI,GAAGC,SAAS,CAACC,gBAAvB;;AAEA,QAAMC,QAAQ,GAAGC,MAAM,IAAI;AACvBC,IAAAA,KAAK,CAACC,YAAN,CAAmBF,MAAnB;AACAC,IAAAA,KAAK,CAACE,IAAN;AACH,GAHD;;AAKA,QAAMC,WAAW,GAAG,CAACC,CAAD,EAAId,IAAJ,EAAUe,UAAV,KAAyB;AACzC,QAAIV,IAAI,GAAGS,CAAC,CAACE,aAAF,CAAgBC,KAAhB,CAAsB,CAAtB,CAAX;AAEA,UAAMR,MAAM,GAAG,EAAf;AACAJ,IAAAA,IAAI,CAACa,WAAL,CAAiBC,GAAG,IAAI;AACpBA,MAAAA,GAAG,CAACC,KAAJ,CAAU,IAAV,EAAgBC,OAAhB,CAAyBC,CAAD,IAAO;AAC7Bb,QAAAA,MAAM,CAACc,IAAP,CAAYD,CAAZ;AACD,OAFD;AAGAtB,MAAAA,IAAI,CAACwB,cAAL,CAAoBC,WAAW,CAACC,kBAAZ,CAA+B1B,IAAI,CAAC2B,cAAL,EAA/B,EAAsDlB,MAAtD,EAA8DM,UAA9D,CAApB;AACH,KALD;AAMH,GAVD;;AAYAa,EAAAA,QAAQ,CAAC,MAAM;AACXlB,IAAAA,KAAK,CAACmB,UAAN,IAAoB7B,IAAI,CAACwB,cAAL,CAAoBd,KAAK,CAACmB,UAA1B,CAApB;AACH,GAFO,EAELnB,KAFK,CAAR;AAIA,sBACI;AAAA,2BACI,QAAC,IAAD;AAAA,6BACI,QAAC,KAAD;AACI,QAAA,OAAO,EAAER,OADb;AAEI,QAAA,UAAU,EAAEG;AAFhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAUH;;GArCuBN,Q;UACLF,IAAI,CAACI,O;;;KADAF,Q","sourcesContent":["import React from \"react\";\nimport { Form, Input } from 'antd';\n\nexport default function WellInfo() {\n    const [form] = Form.useForm();\n    \n    const columns = TableHeadersUtil.projectTable;\n    const data = FAKE_DATA.LIST_OF_PROJECTS;\n\n    const onFinish = values => {\n        props.setFormValue(values);\n        props.next();\n    };\n\n    const handlePaste = (e, form, fieldIndex) => {\n        var data = e.clipboardData.items[0];\n        \n        const values = [];\n        data.getAsString(str => {\n            str.split(/\\s/).forEach((v) => {\n              values.push(v);\n            })\n            form.setFieldsValue(ProjectUtil.setClipboardValues(form.getFieldsValue(), values, fieldIndex));\n        });\n    }\n\n    useState(() => {\n        props.formValues && form.setFieldsValue(props.formValues)\n    }, props);\n\n    return (\n        <>\n            <Form>\n                <Table\n                    columns={columns}\n                    dataSource={data}\n                />\n            </Form>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}