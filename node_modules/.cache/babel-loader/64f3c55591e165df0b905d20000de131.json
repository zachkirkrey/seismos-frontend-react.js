{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/OcReport.js\";\nimport React from \"react\";\nimport { Card, Space, Table, Button } from 'antd';\nimport FAKE_DATA from \"constants/fakeData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function OcReport() {\n  const approveStage = (text, record) => {\n    const index = data.findIndex(d => d.key === record.key);\n    data[index].approved = true;\n  };\n\n  const columns = [{\n    title: 'Stage',\n    dataIndex: 'stage',\n    key: 'stage'\n  }, {\n    title: 'Pre Frac',\n    dataIndex: 'pre_frac',\n    key: 'pre_frac'\n  }, {\n    title: 'Post Frac',\n    dataIndex: 'post_frac',\n    key: 'post_frac'\n  }, {\n    title: 'NF',\n    dataIndex: 'nf',\n    key: 'nf'\n  }, {\n    title: 'FF',\n    dataIndex: 'ff',\n    key: 'ff'\n  }, {\n    title: 'Half length [ft]',\n    dataIndex: 'half_length',\n    key: 'half_length'\n  }, {\n    title: 'Width [in]',\n    dataIndex: 'width',\n    key: 'width'\n  }, {\n    title: 'Height',\n    dataIndex: 'height',\n    key: 'height'\n  }, {\n    title: 'Reserve potential',\n    dataIndex: 'reserve_potential',\n    key: 'reserve_potential'\n  }, {\n    title: 'Pore pressure',\n    dataIndex: 'pore_pressure',\n    key: 'pore_pressure'\n  }, {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Space, {\n      size: \"middle\",\n      children: record.approved ? 'Approved' : /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => approveStage(text, record),\n        children: \"Approve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)\n  }];\n  const data = FAKE_DATA.STAGE_REPORT;\n\n  const renderBody = (props, columns) => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      className: props.className,\n      children: columns.map((item, idx) => {\n        console.log(item);\n\n        if (!item.hidden) {\n          return props.children[idx];\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: data,\n        components: {\n          body: {\n            row: props => renderBody(props, columns)\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        children: \"Export stage report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = OcReport;\n\nvar _c;\n\n$RefreshReg$(_c, \"OcReport\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/OcReport.js"],"names":["React","Card","Space","Table","Button","FAKE_DATA","OcReport","approveStage","text","record","index","data","findIndex","d","key","approved","columns","title","dataIndex","render","e","STAGE_REPORT","renderBody","props","className","map","item","idx","console","log","hidden","children","body","row"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Card, Space, Table, Button } from 'antd';\nimport FAKE_DATA from \"constants/fakeData\";\n\nexport default function OcReport() {\n    const approveStage = (text, record) => {\n        const index = data.findIndex(d => d.key === record.key);\n        data[index].approved = true;\n    }\n    \n    const columns = [\n        {\n            title: 'Stage',\n            dataIndex: 'stage',\n            key: 'stage',\n        },\n        {\n            title: 'Pre Frac',\n            dataIndex: 'pre_frac',\n            key: 'pre_frac',\n        },\n        {\n            title: 'Post Frac',\n            dataIndex: 'post_frac',\n            key: 'post_frac',\n        },\n        {\n            title: 'NF',\n            dataIndex: 'nf',\n            key: 'nf',\n        },\n        {\n            title: 'FF',\n            dataIndex: 'ff',\n            key: 'ff',\n        },\n        {\n            title: 'Half length [ft]',\n            dataIndex: 'half_length',\n            key: 'half_length',\n        },\n        {\n            title: 'Width [in]',\n            dataIndex: 'width',\n            key: 'width',\n        },\n        {\n            title: 'Height',\n            dataIndex: 'height',\n            key: 'height',\n        },\n        {\n            title: 'Reserve potential',\n            dataIndex: 'reserve_potential',\n            key: 'reserve_potential',\n        },\n        {\n            title: 'Pore pressure',\n            dataIndex: 'pore_pressure',\n            key: 'pore_pressure',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Space size=\"middle\">\n                    {   record.approved \n                        ? 'Approved'\n                        : <Button type=\"primary\" onClick={(e) => approveStage(text, record)}>Approve</Button>\n                    }\n                </Space>\n            ),\n        },\n    ];\n    const data = FAKE_DATA.STAGE_REPORT;\n\n    const renderBody = (props, columns) => {\n        return (\n          <tr className={props.className}>\n            {columns.map((item, idx) => {\n                console.log(item)\n              if (!item.hidden) {\n                return props.children[idx]\n              }\n            })}\n          </tr>\n        );\n    }\n\n    return (\n        <>\n            <Card>\n                <Table\n                    columns={columns}\n                    dataSource={data}\n                    components={{\n                        body: {\n                          row: (props) => renderBody(props, columns)\n                        },\n                      }}\n                />\n                <Button type=\"primary\">Export stage report</Button>\n            </Card>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}