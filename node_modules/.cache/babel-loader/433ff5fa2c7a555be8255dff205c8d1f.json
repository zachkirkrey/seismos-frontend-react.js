{"ast":null,"code":"import _slicedToArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from'antd';import TableHeadersUtil from\"util/TableHeaderUtil\";import Grid from\"components/Grid/Grid\";import _ from\"lodash\";import{Collapse}from'antd';import{Tooltip}from'antd';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function WellVolume(props){var Panel=Collapse.Panel;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),wellVolumeGrids=_useState2[0],setWellVolumeGrids=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),wellVolumeEstimationsGrids=_useState4[0],setWellVolumeEstimationsGrids=_useState4[1];var getWellVolumeGridRow=function getWellVolumeGridRow(t){return t.rows.map(function(label){var columns=[];TableHeadersUtil.wellVolumeFormTableData.columns.map(function(column){var defaultVal=column.field===\"type\"?label:\"\";columns.push({value:defaultVal,field:column.field,required:column.required});return column;});return columns;});};var callback=function callback(key){};var getWellVolumeEstimationsGridRow=function getWellVolumeEstimationsGridRow(t){return t.rows.map(function(row){return[{value:\"\",field:row.field},{value:row.label,readOnly:true,disableEvents:true}];});};var populateWellVolumeGrid=function populateWellVolumeGrid(index){var newWellVolGrid=TableHeadersUtil.wellVolumeFormTableData.grid.reduce(function(rows,t,rowIdx){return rows.concat(getWellVolumeGridRow(t));},[]);return newWellVolGrid;};var populateWellVolumeEstimationsGrid=function populateWellVolumeEstimationsGrid(index){var newWellVolEstimationsGrid=TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce(function(rows,t,rowIdx){return rows.concat(getWellVolumeEstimationsGridRow(t));},[]);return newWellVolEstimationsGrid;};var handleWellVolumeGridChanged=function handleWellVolumeGridChanged(updatedGridData,index){var newWellVolGrid=_.cloneDeep(wellVolumeGrids);newWellVolGrid[index]=updatedGridData;props.setWellVolumeFormValue(newWellVolGrid);setWellVolumeGrids(newWellVolGrid);};var handleWellVolumeEstimationsGridChanged=function handleWellVolumeEstimationsGridChanged(updatedGridData,index){var newWellVolEstimationsGrid=_.cloneDeep(wellVolumeEstimationsGrids);newWellVolEstimationsGrid[index]=updatedGridData;props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);};var gotoNextStep=function gotoNextStep(){var formValid=true;var checkWellVolumeGrids=_.cloneDeep(wellVolumeGrids);var validatedWellVolumeGrids=[];checkWellVolumeGrids.map(function(grid,index){var isWellVolumeValid=true;var validatedGrid=grid.map(function(row){var validatedRow=row.map(function(cell){if(cell.required&&cell.value===\"\"){isWellVolumeValid=false;formValid=false;cell.className='cell-error';cell.error=true;}return cell;});return validatedRow;});if(!isWellVolumeValid){validatedWellVolumeGrids.push({grid:validatedGrid,index:index});}return grid;});if(formValid){props.next();}else{var newWellVolGrid=_.cloneDeep(wellVolumeGrids);validatedWellVolumeGrids.map(function(gridData){newWellVolGrid[gridData.index]=gridData.grid;return gridData;});props.setWellVolumeFormValue(newWellVolGrid);setWellVolumeGrids(newWellVolGrid);}};useState(function(){if(props.wellInfoValues){var wellVolumeGridData=[];var wellVolumeEstimationsGridData=[];props.wellInfoValues.map(function(wellInfoValue,index){if(props.wellVolumeFormValues!=null&&props.wellVolumeFormValues[index]){wellVolumeGridData.push(props.wellVolumeFormValues[index]);}else{wellVolumeGridData.push(populateWellVolumeGrid(index));}if(props.wellVolumeEstimationsFormValues!=null&&props.wellVolumeEstimationsFormValues[index]){wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index]);}else{wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));}return wellInfoValue;});setWellVolumeGrids(wellVolumeGridData);setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);}},props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Collapse,{defaultActiveKey:['1'],onChange:callback,children:props.wellInfoValues&&props.wellInfoValues.map(function(well,index){return/*#__PURE__*/_jsx(Panel,{header:well[0].value,extra:wellVolumeGrids[index]&&wellVolumeGrids[index].find(function(row){return row.find(function(cell){return cell.error;})?true:false;})?/*#__PURE__*/_jsx(Tooltip,{title:\"Please fill all the fields\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-exclamation-circle text-red-500\"})}):\"\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"well-volume-grid\",children:/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.wellVolumeFormTableData.columns,grid:wellVolumeGrids[index],gridValueChanged:handleWellVolumeGridChanged,index:index})}),/*#__PURE__*/_jsx(\"div\",{className:\"p-4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"well-volume-estimation-grid\",children:/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value),grid:wellVolumeEstimationsGrids[index],gridValueChanged:handleWellVolumeEstimationsGridChanged,index:index})})]},index)},index+1);})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right mt-8\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:function onClick(e){gotoNextStep();},children:\"Next\"})})]});}","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","Collapse","Tooltip","WellVolume","props","Panel","wellVolumeGrids","setWellVolumeGrids","wellVolumeEstimationsGrids","setWellVolumeEstimationsGrids","getWellVolumeGridRow","t","rows","map","label","columns","wellVolumeFormTableData","column","defaultVal","field","push","value","required","callback","key","getWellVolumeEstimationsGridRow","row","readOnly","disableEvents","populateWellVolumeGrid","index","newWellVolGrid","grid","reduce","rowIdx","concat","populateWellVolumeEstimationsGrid","newWellVolEstimationsGrid","wellVolumeEstimationsFormTableData","handleWellVolumeGridChanged","updatedGridData","cloneDeep","setWellVolumeFormValue","handleWellVolumeEstimationsGridChanged","setWellVolumeEstimationsFormValue","gotoNextStep","formValid","checkWellVolumeGrids","validatedWellVolumeGrids","isWellVolumeValid","validatedGrid","validatedRow","cell","className","error","next","gridData","wellInfoValues","wellVolumeGridData","wellVolumeEstimationsGridData","wellInfoValue","wellVolumeFormValues","wellVolumeEstimationsFormValues","well","find","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\nimport { Tooltip } from 'antd';\n\nexport default function WellVolume(props) {\n    const { Panel } = Collapse;\n    const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n    const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n    const getWellVolumeGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"type\" ? label : \"\";\n                columns.push({ value: defaultVal, field: column.field, required: column.required});\n                return column;\n            })\n            return columns;\n        });\n    }\n\n    const callback = (key)  => {\n    }\n\n    const getWellVolumeEstimationsGridRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: \"\", field: row.field },\n                { value: row.label, readOnly: true, disableEvents: true },\n            ]\n        })\n    }\n\n    const populateWellVolumeGrid = (index) => {\n        const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeGridRow(t));\n        }, []);\n        return newWellVolGrid;\n    }\n\n    const populateWellVolumeEstimationsGrid = (index) => {\n        const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeEstimationsGridRow(t));\n        }, []);\n        return newWellVolEstimationsGrid;\n    }\n\n    const handleWellVolumeGridChanged = (updatedGridData, index) => {\n        const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n        newWellVolGrid[index] = updatedGridData;\n        props.setWellVolumeFormValue(newWellVolGrid);\n        setWellVolumeGrids(newWellVolGrid);\n    }\n\n    const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n        newWellVolEstimationsGrid[index] = updatedGridData;\n        props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n        setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n    }\n\n    const gotoNextStep = () => {\n        let formValid = true;\n        const checkWellVolumeGrids = _.cloneDeep(wellVolumeGrids);\n        let validatedWellVolumeGrids = [];\n        checkWellVolumeGrids.map((grid, index) => {\n            let isWellVolumeValid = true;\n            const validatedGrid = grid.map(row => {\n                const validatedRow = row.map(cell => {\n                    if(cell.required && cell.value === \"\") {\n                        isWellVolumeValid = false;\n                        formValid = false;\n                        cell.className = 'cell-error';\n                        cell.error = true;\n                    }\n                    return cell;\n                })\n                return validatedRow;\n            })\n            \n            if(!isWellVolumeValid) {\n                validatedWellVolumeGrids.push({grid: validatedGrid, index: index});\n            }\n\n            return grid;\n        });\n        \n        if(formValid) {\n            props.next();\n        } else {\n            const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n            validatedWellVolumeGrids.map(gridData => {\n                newWellVolGrid[gridData.index] = gridData.grid;\n                return gridData;\n            })\n            props.setWellVolumeFormValue(newWellVolGrid);\n            setWellVolumeGrids(newWellVolGrid);\n        }\n    }\n\n    useState(() => {\n        if(props.wellInfoValues) {\n            let wellVolumeGridData = [];\n            let wellVolumeEstimationsGridData = [];\n            props.wellInfoValues.map((wellInfoValue, index) => {\n                if(props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n                    wellVolumeGridData.push(props.wellVolumeFormValues[index])\n                } else {\n                    wellVolumeGridData.push(populateWellVolumeGrid(index));\n                }\n                if(props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n                    wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index] );\n                } else {\n                    wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n                }\n                return wellInfoValue;\n            });\n            setWellVolumeGrids(wellVolumeGridData);\n            setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n        }\n    }, props);\n\n    return (\n        <>\n            <Collapse defaultActiveKey={['1']} onChange={callback}>\n            {\n                props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n                    return <Panel \n                        header={well[0].value}\n                        key={index+1}\n                        extra={\n                            wellVolumeGrids[index] && wellVolumeGrids[index].find(row => row.find(cell => cell.error) ? true : false)\n                            ? <Tooltip title=\"Please fill all the fields\"><i className=\"fas fa-exclamation-circle text-red-500\"></i></Tooltip>\n                            : \"\"\n                        }\n                    >\n                        <div className=\"flex\" key={index}>\n                            <div className=\"well-volume-grid\">\n                                <Grid \n                                    columns={TableHeadersUtil.wellVolumeFormTableData.columns}\n                                    grid={wellVolumeGrids[index]}\n                                    gridValueChanged={handleWellVolumeGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                            <div className=\"p-4\"></div>\n                            <div className=\"well-volume-estimation-grid\">\n                                <Grid\n                                    columns={TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value)}\n                                    grid={wellVolumeEstimationsGrids[index]}\n                                    gridValueChanged={handleWellVolumeEstimationsGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                        </div>\n                    </Panel>\n                })\n            }\n            </Collapse>\n            <div className=\"text-right mt-8\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}