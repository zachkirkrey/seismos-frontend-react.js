{"ast":null,"code":"import _slicedToArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from'antd';import TableHeadersUtil from\"util/TableHeaderUtil\";import Grid from\"components/Grid/Grid\";import _ from\"lodash\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Equipment(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),equipmentGrid=_useState2[0],setEquipmentGrid=_useState2[1];var getEquipmentGridRow=function getEquipmentGridRow(t){return t.rows.map(function(row){return[{value:row.label,readOnly:true,disableEvents:true},{value:\"\",field:row.field,required:row.required}];});};var populateEquipmentGrid=function populateEquipmentGrid(){setEquipmentGrid(TableHeadersUtil.equipmentFormTableData.grid.reduce(function(rows,t,rowIdx){return rows.concat(getEquipmentGridRow(t));},[]));};var handleEquipmentGridChanged=function handleEquipmentGridChanged(updatedGridData){props.setFormValue(updatedGridData);setEquipmentGrid(updatedGridData);};var createProject=function createProject(){var isEquipmentInfoValid=true;var validatedEquipmentGrid=_.cloneDeep(equipmentGrid);validatedEquipmentGrid.map(function(row){row.map(function(cell){if(cell.required&&cell.value===\"\"){isEquipmentInfoValid=false;cell.className='cell-error';}return cell;});return row;});if(!isEquipmentInfoValid){handleEquipmentGridChanged(validatedEquipmentGrid);}else{props.createProjectSubmit();}};useState(function(){if(props.formValues!=null){props.formValues&&setEquipmentGrid(props.formValues);}else{populateEquipmentGrid();}},props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"mb-8\",style:{width:'50%',marginLeft:'auto',marginRight:'auto'},children:/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.equipmentFormTableData.columns,grid:equipmentGrid,gridValueChanged:handleEquipmentGridChanged})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:function onClick(e){createProject();},children:\"Create Project\"})})]});}","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Equipment.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","Equipment","props","equipmentGrid","setEquipmentGrid","getEquipmentGridRow","t","rows","map","row","value","label","readOnly","disableEvents","field","required","populateEquipmentGrid","equipmentFormTableData","grid","reduce","rowIdx","concat","handleEquipmentGridChanged","updatedGridData","setFormValue","createProject","isEquipmentInfoValid","validatedEquipmentGrid","cloneDeep","cell","className","createProjectSubmit","formValues","width","marginLeft","marginRight","columns","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function Equipment(props) {\n    \n    const [equipmentGrid, setEquipmentGrid] = useState([]);\n\n    const getEquipmentGridRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: row.label, readOnly: true, disableEvents: true},\n                { value: \"\", field: row.field, required: row.required },\n            ]\n        })\n    }\n\n    const populateEquipmentGrid = () => {\n        setEquipmentGrid(TableHeadersUtil.equipmentFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getEquipmentGridRow(t));\n        }, []));\n    }\n\n    const handleEquipmentGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setEquipmentGrid(updatedGridData)\n    }\n\n    const createProject = () => {\n        let isEquipmentInfoValid = true;\n        const validatedEquipmentGrid = _.cloneDeep(equipmentGrid);\n        validatedEquipmentGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isEquipmentInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n        if(!isEquipmentInfoValid) {\n            handleEquipmentGridChanged(validatedEquipmentGrid);\n        } else {\n            props.createProjectSubmit();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setEquipmentGrid(props.formValues);\n        } else {\n            populateEquipmentGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '50%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.equipmentFormTableData.columns}\n                    grid={equipmentGrid}\n                    gridValueChanged={handleEquipmentGridChanged}\n                ></Grid>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {createProject()}}>\n                    Create Project\n                </Button>\n            </div>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}