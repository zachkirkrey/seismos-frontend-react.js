{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\nimport { Tooltip } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellVolume(props) {\n  _s();\n\n  const {\n    Panel\n  } = Collapse;\n  const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n  const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n  const getWellVolumeGridRow = t => {\n    return t.rows.map(label => {\n      const columns = [];\n      TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n        const defaultVal = column.field === \"type\" ? label : \"\";\n        columns.push({\n          value: defaultVal,\n          field: column.field,\n          required: column.required\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const callback = key => {};\n\n  const getWellVolumeEstimationsGridRow = t => {\n    return t.rows.map(row => {\n      return [{\n        value: \"\",\n        field: row.field\n      }, {\n        value: row.label,\n        readOnly: true,\n        disableEvents: true\n      }];\n    });\n  };\n\n  const populateWellVolumeGrid = index => {\n    const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeGridRow(t));\n    }, []);\n    return newWellVolGrid;\n  };\n\n  const populateWellVolumeEstimationsGrid = index => {\n    const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeEstimationsGridRow(t));\n    }, []);\n    return newWellVolEstimationsGrid;\n  };\n\n  const calculateHValue = (gridDetail, index) => {\n    const depthCasing = gridDetail[index].find(g => g.field === \"depth_md\").value;\n    const idCasing = gridDetail[index].find(g => g.field === \"id\").value;\n    const tolLinear = gridDetail[index + 1].find(g => g.field === \"tol\").value;\n\n    if (depthCasing) {\n      if (tolLinear) {\n        return idCasing ^ 2 * 0.0009714 * tolLinear;\n      } else {\n        return idCasing ^ 2 * 0.0009714 * depthCasing;\n      }\n    } else {}\n  };\n\n  const handleWellVolumeGridChanged = (updatedGridData, index) => {\n    console.log(updatedGridData, index);\n\n    const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n\n    const hvalue = calculateHValue(updatedGridData, 0);\n    console.log(hvalue);\n    newWellVolGrid[index] = updatedGridData;\n    props.setWellVolumeFormValue(newWellVolGrid);\n    setWellVolumeGrids(newWellVolGrid);\n  };\n\n  const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n    const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n\n    newWellVolEstimationsGrid[index] = updatedGridData;\n    props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n    setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n  };\n\n  const gotoNextStep = () => {\n    let formValid = true;\n\n    const checkWellVolumeGrids = _.cloneDeep(wellVolumeGrids);\n\n    let validatedWellVolumeGrids = [];\n    checkWellVolumeGrids.map((grid, index) => {\n      let isWellVolumeValid = true;\n      const validatedGrid = grid.map(row => {\n        const validatedRow = row.map(cell => {\n          if (cell.required && cell.value === \"\") {\n            isWellVolumeValid = false;\n            formValid = false;\n            cell.className = 'cell-error';\n            cell.error = true;\n          }\n\n          return cell;\n        });\n        return validatedRow;\n      });\n\n      if (!isWellVolumeValid) {\n        validatedWellVolumeGrids.push({\n          grid: validatedGrid,\n          index: index\n        });\n      }\n\n      return grid;\n    });\n\n    if (formValid) {\n      props.next();\n    } else {\n      const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n\n      validatedWellVolumeGrids.map(gridData => {\n        newWellVolGrid[gridData.index] = gridData.grid;\n        return gridData;\n      });\n      props.setWellVolumeFormValue(newWellVolGrid);\n      setWellVolumeGrids(newWellVolGrid);\n    }\n  };\n\n  useState(() => {\n    if (props.wellInfoValues) {\n      let wellVolumeGridData = [];\n      let wellVolumeEstimationsGridData = [];\n      props.wellInfoValues.map((wellInfoValue, index) => {\n        if (props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n          wellVolumeGridData.push(props.wellVolumeFormValues[index]);\n        } else {\n          wellVolumeGridData.push(populateWellVolumeGrid(index));\n        }\n\n        if (props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n          wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index]);\n        } else {\n          wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n        }\n\n        return wellInfoValue;\n      });\n      setWellVolumeGrids(wellVolumeGridData);\n      setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Collapse, {\n      defaultActiveKey: ['1'],\n      onChange: callback,\n      children: props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n        return /*#__PURE__*/_jsxDEV(Panel, {\n          header: well[0].value,\n          extra: wellVolumeGrids[index] && wellVolumeGrids[index].find(row => row.find(cell => cell.error) ? true : false) ? /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Please fill all the fields\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-exclamation-circle text-red-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 75\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 31\n          }, this) : \"\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"well-volume-grid\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                columns: TableHeadersUtil.wellVolumeFormTableData.columns,\n                grid: wellVolumeGrids[index],\n                gridValueChanged: handleWellVolumeGridChanged,\n                index: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"well-volume-estimation-grid\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                columns: TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value),\n                grid: wellVolumeEstimationsGrids[index],\n                gridValueChanged: handleWellVolumeEstimationsGridChanged,\n                index: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)\n        }, index + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right mt-8\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellVolume, \"eQIw6e5qPxezkqJsRqxFH3MDB1k=\");\n\n_c = WellVolume;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellVolume\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","Collapse","Tooltip","WellVolume","props","Panel","wellVolumeGrids","setWellVolumeGrids","wellVolumeEstimationsGrids","setWellVolumeEstimationsGrids","getWellVolumeGridRow","t","rows","map","label","columns","wellVolumeFormTableData","column","defaultVal","field","push","value","required","callback","key","getWellVolumeEstimationsGridRow","row","readOnly","disableEvents","populateWellVolumeGrid","index","newWellVolGrid","grid","reduce","rowIdx","concat","populateWellVolumeEstimationsGrid","newWellVolEstimationsGrid","wellVolumeEstimationsFormTableData","calculateHValue","gridDetail","depthCasing","find","g","idCasing","tolLinear","handleWellVolumeGridChanged","updatedGridData","console","log","cloneDeep","hvalue","setWellVolumeFormValue","handleWellVolumeEstimationsGridChanged","setWellVolumeEstimationsFormValue","gotoNextStep","formValid","checkWellVolumeGrids","validatedWellVolumeGrids","isWellVolumeValid","validatedGrid","validatedRow","cell","className","error","next","gridData","wellInfoValues","wellVolumeGridData","wellVolumeEstimationsGridData","wellInfoValue","wellVolumeFormValues","wellVolumeEstimationsFormValues","well","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\nimport { Tooltip } from 'antd';\n\nexport default function WellVolume(props) {\n    const { Panel } = Collapse;\n    const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n    const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n    const getWellVolumeGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"type\" ? label : \"\";\n                columns.push({ value: defaultVal, field: column.field, required: column.required});\n                return column;\n            })\n            return columns;\n        });\n    }\n\n    const callback = (key)  => {\n    }\n\n    const getWellVolumeEstimationsGridRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: \"\", field: row.field },\n                { value: row.label, readOnly: true, disableEvents: true },\n            ]\n        })\n    }\n\n    const populateWellVolumeGrid = (index) => {\n        const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeGridRow(t));\n        }, []);\n        return newWellVolGrid;\n    }\n\n    const populateWellVolumeEstimationsGrid = (index) => {\n        const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeEstimationsGridRow(t));\n        }, []);\n        return newWellVolEstimationsGrid;\n    }\n\n    const calculateHValue = (gridDetail, index) => {\n        const depthCasing = gridDetail[index].find(g => g.field === \"depth_md\").value;\n        const idCasing = gridDetail[index].find(g => g.field === \"id\").value;\n        const tolLinear = gridDetail[index+1].find(g => g.field === \"tol\").value;\n        if(depthCasing) {\n            if(tolLinear) {\n                return idCasing ^ 2 *0.0009714 * tolLinear;\n            } else {\n                return idCasing ^ 2 *0.0009714 * depthCasing;\n            }\n        } else {\n\n        }\n    }\n\n    const handleWellVolumeGridChanged = (updatedGridData, index) => {\n        console.log(updatedGridData, index)\n        const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n        const hvalue = calculateHValue(updatedGridData, 0);\n        console.log(hvalue)\n        newWellVolGrid[index] = updatedGridData;\n        props.setWellVolumeFormValue(newWellVolGrid);\n        setWellVolumeGrids(newWellVolGrid);\n    }\n\n    const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n        newWellVolEstimationsGrid[index] = updatedGridData;\n        props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n        setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n    }\n\n    const gotoNextStep = () => {\n        let formValid = true;\n        const checkWellVolumeGrids = _.cloneDeep(wellVolumeGrids);\n        let validatedWellVolumeGrids = [];\n        checkWellVolumeGrids.map((grid, index) => {\n            let isWellVolumeValid = true;\n            const validatedGrid = grid.map(row => {\n                const validatedRow = row.map(cell => {\n                    if(cell.required && cell.value === \"\") {\n                        isWellVolumeValid = false;\n                        formValid = false;\n                        cell.className = 'cell-error';\n                        cell.error = true;\n                    }\n                    return cell;\n                })\n                return validatedRow;\n            })\n            \n            if(!isWellVolumeValid) {\n                validatedWellVolumeGrids.push({grid: validatedGrid, index: index});\n            }\n\n            return grid;\n        });\n        \n        if(formValid) {\n            props.next();\n        } else {\n            const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n            validatedWellVolumeGrids.map(gridData => {\n                newWellVolGrid[gridData.index] = gridData.grid;\n                return gridData;\n            })\n            props.setWellVolumeFormValue(newWellVolGrid);\n            setWellVolumeGrids(newWellVolGrid);\n        }\n    }\n\n    useState(() => {\n        if(props.wellInfoValues) {\n            let wellVolumeGridData = [];\n            let wellVolumeEstimationsGridData = [];\n            props.wellInfoValues.map((wellInfoValue, index) => {\n                if(props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n                    wellVolumeGridData.push(props.wellVolumeFormValues[index])\n                } else {\n                    wellVolumeGridData.push(populateWellVolumeGrid(index));\n                }\n                if(props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n                    wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index] );\n                } else {\n                    wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n                }\n                return wellInfoValue;\n            });\n            setWellVolumeGrids(wellVolumeGridData);\n            setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n        }\n    }, props);\n\n    return (\n        <>\n            <Collapse defaultActiveKey={['1']} onChange={callback}>\n            {\n                props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n                    return <Panel \n                        header={well[0].value}\n                        key={index+1}\n                        extra={\n                            wellVolumeGrids[index] && wellVolumeGrids[index].find(row => row.find(cell => cell.error) ? true : false)\n                            ? <Tooltip title=\"Please fill all the fields\"><i className=\"fas fa-exclamation-circle text-red-500\"></i></Tooltip>\n                            : \"\"\n                        }\n                    >\n                        <div className=\"flex\" key={index}>\n                            <div className=\"well-volume-grid\">\n                                <Grid \n                                    columns={TableHeadersUtil.wellVolumeFormTableData.columns}\n                                    grid={wellVolumeGrids[index]}\n                                    gridValueChanged={handleWellVolumeGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                            <div className=\"p-4\"></div>\n                            <div className=\"well-volume-estimation-grid\">\n                                <Grid\n                                    columns={TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value)}\n                                    grid={wellVolumeEstimationsGrids[index]}\n                                    gridValueChanged={handleWellVolumeEstimationsGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                        </div>\n                    </Panel>\n                })\n            }\n            </Collapse>\n            <div className=\"text-right mt-8\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}