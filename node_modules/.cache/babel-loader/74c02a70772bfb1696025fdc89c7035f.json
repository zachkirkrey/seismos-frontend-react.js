{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form, Table } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport ProjectUtil from \"util/ProjectUtil\";\nimport FAKE_DATA from \"constants/fakeData\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [form] = Form.useForm();\n  const columns = TableHeadersUtil.wellInfoFormTable;\n  const data = FAKE_DATA.WELL_INFO_FORM;\n\n  const onFinish = values => {\n    props.setFormValue(values);\n    props.next();\n  };\n\n  const handlePaste = (e, form, fieldIndex) => {\n    var data = e.clipboardData.items[0];\n    const values = [];\n    data.getAsString(str => {\n      str.split(/\\s/).forEach(v => {\n        values.push(v);\n      });\n      form.setFieldsValue(ProjectUtil.setClipboardValues(form.getFieldsValue(), values, fieldIndex));\n    });\n  };\n\n  useState(() => {\n    props.formValues && form.setFieldsValue(props.formValues);\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(WellInfo, \"nUUTpLI9g6ZmEVmct33bFE/sJ/k=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Form","Table","TableHeadersUtil","ProjectUtil","FAKE_DATA","Grid","WellInfo","props","form","useForm","columns","wellInfoFormTable","data","WELL_INFO_FORM","onFinish","values","setFormValue","next","handlePaste","e","fieldIndex","clipboardData","items","getAsString","str","split","forEach","v","push","setFieldsValue","setClipboardValues","getFieldsValue","formValues"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,MAA5B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACpC,QAAM,CAACC,IAAD,IAASR,IAAI,CAACS,OAAL,EAAf;AAEA,QAAMC,OAAO,GAAGR,gBAAgB,CAACS,iBAAjC;AACA,QAAMC,IAAI,GAAGR,SAAS,CAACS,cAAvB;;AAEA,QAAMC,QAAQ,GAAGC,MAAM,IAAI;AACvBR,IAAAA,KAAK,CAACS,YAAN,CAAmBD,MAAnB;AACAR,IAAAA,KAAK,CAACU,IAAN;AACH,GAHD;;AAKA,QAAMC,WAAW,GAAG,CAACC,CAAD,EAAIX,IAAJ,EAAUY,UAAV,KAAyB;AACzC,QAAIR,IAAI,GAAGO,CAAC,CAACE,aAAF,CAAgBC,KAAhB,CAAsB,CAAtB,CAAX;AAEA,UAAMP,MAAM,GAAG,EAAf;AACAH,IAAAA,IAAI,CAACW,WAAL,CAAiBC,GAAG,IAAI;AACpBA,MAAAA,GAAG,CAACC,KAAJ,CAAU,IAAV,EAAgBC,OAAhB,CAAyBC,CAAD,IAAO;AAC7BZ,QAAAA,MAAM,CAACa,IAAP,CAAYD,CAAZ;AACD,OAFD;AAGAnB,MAAAA,IAAI,CAACqB,cAAL,CAAoB1B,WAAW,CAAC2B,kBAAZ,CAA+BtB,IAAI,CAACuB,cAAL,EAA/B,EAAsDhB,MAAtD,EAA8DK,UAA9D,CAApB;AACH,KALD;AAMH,GAVD;;AAYArB,EAAAA,QAAQ,CAAC,MAAM;AACXQ,IAAAA,KAAK,CAACyB,UAAN,IAAoBxB,IAAI,CAACqB,cAAL,CAAoBtB,KAAK,CAACyB,UAA1B,CAApB;AACH,GAFO,EAELzB,KAFK,CAAR;AAIA,sBACI;AAAA,2BASI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AATJ,mBADJ;AAaH;;GAxCuBD,Q;UACLN,IAAI,CAACS,O;;;KADAH,Q","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Table } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport ProjectUtil from \"util/ProjectUtil\";\nimport FAKE_DATA from \"constants/fakeData\";\nimport Grid from \"./Grid\";\n\nexport default function WellInfo(props) {\n    const [form] = Form.useForm();\n    \n    const columns = TableHeadersUtil.wellInfoFormTable;\n    const data = FAKE_DATA.WELL_INFO_FORM;\n\n    const onFinish = values => {\n        props.setFormValue(values);\n        props.next();\n    };\n\n    const handlePaste = (e, form, fieldIndex) => {\n        var data = e.clipboardData.items[0];\n        \n        const values = [];\n        data.getAsString(str => {\n            str.split(/\\s/).forEach((v) => {\n              values.push(v);\n            })\n            form.setFieldsValue(ProjectUtil.setClipboardValues(form.getFieldsValue(), values, fieldIndex));\n        });\n    }\n\n    useState(() => {\n        props.formValues && form.setFieldsValue(props.formValues)\n    }, props);\n\n    return (\n        <>\n            {/* <Form>\n                <Table\n                    columns={columns}\n                    dataSource={data}\n                    size=\"small\"\n                    bordered\n                />\n            </Form> */}\n            <Grid></Grid>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}