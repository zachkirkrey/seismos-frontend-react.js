{"ast":null,"code":"import _slicedToArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from'antd';import TableHeadersUtil from\"util/TableHeaderUtil\";import Grid from\"components/Grid/Grid\";import _ from\"lodash\";import{Collapse}from'antd';import{Tooltip}from'antd';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function WellVolume(props){var Panel=Collapse.Panel;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),wellVolumeGrids=_useState2[0],setWellVolumeGrids=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),wellVolumeEstimationsGrids=_useState4[0],setWellVolumeEstimationsGrids=_useState4[1];var getWellVolumeGridRow=function getWellVolumeGridRow(t){return t.rows.map(function(label){var columns=[];TableHeadersUtil.wellVolumeFormTableData.columns.map(function(column){var defaultVal=column.field===\"type\"?label:\"\";columns.push({value:defaultVal,field:column.field,required:column.required});return column;});return columns;});};var callback=function callback(key){};var getWellVolumeEstimationsGridRow=function getWellVolumeEstimationsGridRow(t){return t.rows.map(function(row){return[{value:\"\",field:row.field},{value:row.label,readOnly:true,disableEvents:true}];});};var populateWellVolumeGrid=function populateWellVolumeGrid(index){var newWellVolGrid=TableHeadersUtil.wellVolumeFormTableData.grid.reduce(function(rows,t,rowIdx){return rows.concat(getWellVolumeGridRow(t));},[]);return newWellVolGrid;};var populateWellVolumeEstimationsGrid=function populateWellVolumeEstimationsGrid(index){var newWellVolEstimationsGrid=TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce(function(rows,t,rowIdx){return rows.concat(getWellVolumeEstimationsGridRow(t));},[]);return newWellVolEstimationsGrid;};var formatNumber=function formatNumber(numString){if(typeof numString===\"string\"){return parseFloat(numString.replace(/,/g,''));}else{return numString;}};var calculateHValue=function calculateHValue(gridDetail,index){var depthThisRow=gridDetail[index].find(function(g){return g.field===\"depth_md\";}).value||0;var tolThisRow=gridDetail[index].find(function(g){return g.field===\"tol\";}).value||0;var idThisRow=gridDetail[index].find(function(g){return g.field===\"id\";}).value||0;if(depthThisRow){if(index==2){var tolPreviousRow=gridDetail[index-1].find(function(g){return g.field===\"tol\";}).value||0;var diff=formatNumber(depthThisRow)-formatNumber(tolPreviousRow);return Math.pow(formatNumber(idThisRow),2)*0.0009714*diff;}else{var tolNextRow=gridDetail[index+1].find(function(g){return g.field===\"tol\";}).value||0;if(tolNextRow){return Math.pow(formatNumber(idThisRow),2)*0.0009714*(index==0?formatNumber(tolNextRow):formatNumber(tolNextRow)-formatNumber(tolThisRow));}else{return Math.pow(formatNumber(idThisRow),2)*0.0009714*(index==0?formatNumber(depthThisRow):formatNumber(depthThisRow)-formatNumber(tolThisRow));}}}};var calculateWellVolumeEstimations=function calculateWellVolumeEstimations(wellVolGridData,wellVolEstGridData,index){var hvalueCasing=calculateHValue(wellVolGridData,0);console.log(hvalueCasing);var hvalueLinear1=calculateHValue(wellVolGridData,1);console.log(hvalueLinear1);var hvalueLinear2=calculateHValue(wellVolGridData,2);console.log(hvalueLinear2);var totalHValue=(hvalueCasing||0)+(hvalueLinear1||0)+(hvalueLinear2||0);console.log(totalHValue);var newWellVolEstimationsGrid=_.cloneDeep(wellVolEstGridData?wellVolEstGridData:wellVolumeEstimationsGrids);var surfaveVol=newWellVolEstimationsGrid[index][0].find(function(wvG){return wvG.field===\"surface_vol\";}).value||0;console.log(surfaveVol);var bbls=formatNumber(totalHValue)+formatNumber(surfaveVol);console.log(bbls,totalHValue);var gallons=bbls*42;newWellVolEstimationsGrid[index][1].find(function(k){return k.field===\"bbls\";}).value=bbls.toFixed();newWellVolEstimationsGrid[index][2].find(function(k){return k.field===\"gallons\";}).value=gallons.toFixed();props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);};var handleWellVolumeGridChanged=function handleWellVolumeGridChanged(updatedGridData,index){var newWellVolGrid=_.cloneDeep(wellVolumeGrids);calculateWellVolumeEstimations(updatedGridData,null,index);newWellVolGrid[index]=updatedGridData;props.setWellVolumeFormValue(newWellVolGrid);setWellVolumeGrids(newWellVolGrid);};var handleWellVolumeEstimationsGridChanged=function handleWellVolumeEstimationsGridChanged(updatedGridData,index){var newWellVolEstimationsGrid=_.cloneDeep(wellVolumeEstimationsGrids);newWellVolEstimationsGrid[index]=updatedGridData;calculateWellVolumeEstimations(wellVolumeGrids[index],newWellVolEstimationsGrid,index);// props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n// setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n};var gotoNextStep=function gotoNextStep(){var formValid=true;var checkWellVolumeGrids=_.cloneDeep(wellVolumeGrids);var validatedWellVolumeGrids=[];checkWellVolumeGrids.map(function(grid,index){var isWellVolumeValid=true;var validatedGrid=grid.map(function(row){var validatedRow=row.map(function(cell){if(cell.required&&cell.value===\"\"){isWellVolumeValid=false;formValid=false;cell.className='cell-error';cell.error=true;}return cell;});return validatedRow;});if(!isWellVolumeValid){validatedWellVolumeGrids.push({grid:validatedGrid,index:index});}return grid;});if(formValid){props.next();}else{var newWellVolGrid=_.cloneDeep(wellVolumeGrids);validatedWellVolumeGrids.map(function(gridData){newWellVolGrid[gridData.index]=gridData.grid;return gridData;});props.setWellVolumeFormValue(newWellVolGrid);setWellVolumeGrids(newWellVolGrid);}};useState(function(){if(props.wellInfoValues){var wellVolumeGridData=[];var wellVolumeEstimationsGridData=[];props.wellInfoValues.map(function(wellInfoValue,index){if(props.wellVolumeFormValues!=null&&props.wellVolumeFormValues[index]){wellVolumeGridData.push(props.wellVolumeFormValues[index]);}else{wellVolumeGridData.push(populateWellVolumeGrid(index));}if(props.wellVolumeEstimationsFormValues!=null&&props.wellVolumeEstimationsFormValues[index]){wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index]);}else{wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));}return wellInfoValue;});setWellVolumeGrids(wellVolumeGridData);setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);}},props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Collapse,{defaultActiveKey:['1'],onChange:callback,children:props.wellInfoValues&&props.wellInfoValues.map(function(well,index){return/*#__PURE__*/_jsx(Panel,{header:well[0].value,extra:wellVolumeGrids[index]&&wellVolumeGrids[index].find(function(row){return row.find(function(cell){return cell.error;})?true:false;})?/*#__PURE__*/_jsx(Tooltip,{title:\"Please fill all the fields\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-exclamation-circle text-red-500\"})}):\"\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"well-volume-grid\",children:/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.wellVolumeFormTableData.columns,grid:wellVolumeGrids[index],gridValueChanged:handleWellVolumeGridChanged,index:index})}),/*#__PURE__*/_jsx(\"div\",{className:\"p-4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"well-volume-estimation-grid\",children:/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value),grid:wellVolumeEstimationsGrids[index],gridValueChanged:handleWellVolumeEstimationsGridChanged,index:index})})]},index)},index+1);})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right mt-8\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:function onClick(e){gotoNextStep();},children:\"Next\"})})]});}","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","Collapse","Tooltip","WellVolume","props","Panel","wellVolumeGrids","setWellVolumeGrids","wellVolumeEstimationsGrids","setWellVolumeEstimationsGrids","getWellVolumeGridRow","t","rows","map","label","columns","wellVolumeFormTableData","column","defaultVal","field","push","value","required","callback","key","getWellVolumeEstimationsGridRow","row","readOnly","disableEvents","populateWellVolumeGrid","index","newWellVolGrid","grid","reduce","rowIdx","concat","populateWellVolumeEstimationsGrid","newWellVolEstimationsGrid","wellVolumeEstimationsFormTableData","formatNumber","numString","parseFloat","replace","calculateHValue","gridDetail","depthThisRow","find","g","tolThisRow","idThisRow","tolPreviousRow","diff","tolNextRow","calculateWellVolumeEstimations","wellVolGridData","wellVolEstGridData","hvalueCasing","console","log","hvalueLinear1","hvalueLinear2","totalHValue","cloneDeep","surfaveVol","wvG","bbls","gallons","k","toFixed","setWellVolumeEstimationsFormValue","handleWellVolumeGridChanged","updatedGridData","setWellVolumeFormValue","handleWellVolumeEstimationsGridChanged","gotoNextStep","formValid","checkWellVolumeGrids","validatedWellVolumeGrids","isWellVolumeValid","validatedGrid","validatedRow","cell","className","error","next","gridData","wellInfoValues","wellVolumeGridData","wellVolumeEstimationsGridData","wellInfoValue","wellVolumeFormValues","wellVolumeEstimationsFormValues","well","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\nimport { Tooltip } from 'antd';\n\nexport default function WellVolume(props) {\n    const { Panel } = Collapse;\n    const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n    const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n    const getWellVolumeGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"type\" ? label : \"\";\n                columns.push({ value: defaultVal, field: column.field, required: column.required});\n                return column;\n            })\n            return columns;\n        });\n    }\n\n    const callback = (key)  => {\n    }\n\n    const getWellVolumeEstimationsGridRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: \"\", field: row.field },\n                { value: row.label, readOnly: true, disableEvents: true },\n            ]\n        })\n    }\n\n    const populateWellVolumeGrid = (index) => {\n        const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeGridRow(t));\n        }, []);\n        return newWellVolGrid;\n    }\n\n    const populateWellVolumeEstimationsGrid = (index) => {\n        const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeEstimationsGridRow(t));\n        }, []);\n        return newWellVolEstimationsGrid;\n    }\n\n    const formatNumber = (numString) => {\n        if (typeof numString === \"string\") {\n            return parseFloat(numString.replace(/,/g, ''));\n        } else {\n            return numString;\n        }\n    }\n    \n    const calculateHValue = (gridDetail, index) => {\n        const depthThisRow = gridDetail[index].find(g => g.field === \"depth_md\").value || 0;\n        const tolThisRow = gridDetail[index].find(g => g.field === \"tol\").value || 0;\n        const idThisRow = gridDetail[index].find(g => g.field === \"id\").value || 0;\n        if (depthThisRow) {\n            if (index == 2) {\n                const tolPreviousRow = gridDetail[index - 1].find(g => g.field === \"tol\").value || 0;\n                const diff = formatNumber(depthThisRow) - formatNumber(tolPreviousRow);\n                return formatNumber(idThisRow) ** 2 * 0.0009714 * diff;\n            } else {\n                const tolNextRow = gridDetail[index + 1].find(g => g.field === \"tol\").value || 0;\n                if (tolNextRow) {\n                    return formatNumber(idThisRow) ** 2 * 0.0009714 * (index == 0 ? formatNumber(tolNextRow) : (formatNumber(tolNextRow) - formatNumber(tolThisRow)));\n                } else {\n                    return formatNumber(idThisRow) ** 2 * 0.0009714 * (index == 0 ? formatNumber(depthThisRow) : (formatNumber(depthThisRow) - formatNumber(tolThisRow)));\n                }\n            }\n        }\n    }\n\n    const calculateWellVolumeEstimations = (wellVolGridData, wellVolEstGridData, index) => {\n        const hvalueCasing = calculateHValue(wellVolGridData, 0);\n        console.log(hvalueCasing)\n        const hvalueLinear1 = calculateHValue(wellVolGridData, 1);\n        console.log(hvalueLinear1)\n        const hvalueLinear2 = calculateHValue(wellVolGridData, 2);\n        console.log(hvalueLinear2)\n        const totalHValue = (hvalueCasing || 0) + (hvalueLinear1 || 0) + (hvalueLinear2 || 0);\n        console.log(totalHValue)\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolEstGridData ? wellVolEstGridData : wellVolumeEstimationsGrids);\n        const surfaveVol = newWellVolEstimationsGrid[index][0].find(wvG => wvG.field === \"surface_vol\").value || 0;\n        console.log(surfaveVol)\n        const bbls = formatNumber(totalHValue) + formatNumber(surfaveVol);\n        console.log(bbls, totalHValue)\n        const gallons = bbls * 42;\n        newWellVolEstimationsGrid[index][1].find(k => k.field === \"bbls\").value = bbls.toFixed();\n        newWellVolEstimationsGrid[index][2].find(k => k.field === \"gallons\").value = gallons.toFixed();\n        props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n        setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n    }\n\n    const handleWellVolumeGridChanged = (updatedGridData, index) => {\n        const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n        calculateWellVolumeEstimations(updatedGridData, null, index);\n        newWellVolGrid[index] = updatedGridData;\n        props.setWellVolumeFormValue(newWellVolGrid);\n        setWellVolumeGrids(newWellVolGrid);\n    }\n\n    const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n        newWellVolEstimationsGrid[index] = updatedGridData;\n        calculateWellVolumeEstimations(wellVolumeGrids[index], newWellVolEstimationsGrid, index);\n        // props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n        // setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n    }\n\n    const gotoNextStep = () => {\n        let formValid = true;\n        const checkWellVolumeGrids = _.cloneDeep(wellVolumeGrids);\n        let validatedWellVolumeGrids = [];\n        checkWellVolumeGrids.map((grid, index) => {\n            let isWellVolumeValid = true;\n            const validatedGrid = grid.map(row => {\n                const validatedRow = row.map(cell => {\n                    if(cell.required && cell.value === \"\") {\n                        isWellVolumeValid = false;\n                        formValid = false;\n                        cell.className = 'cell-error';\n                        cell.error = true;\n                    }\n                    return cell;\n                })\n                return validatedRow;\n            })\n            \n            if(!isWellVolumeValid) {\n                validatedWellVolumeGrids.push({grid: validatedGrid, index: index});\n            }\n\n            return grid;\n        });\n        \n        if(formValid) {\n            props.next();\n        } else {\n            const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n            validatedWellVolumeGrids.map(gridData => {\n                newWellVolGrid[gridData.index] = gridData.grid;\n                return gridData;\n            })\n            props.setWellVolumeFormValue(newWellVolGrid);\n            setWellVolumeGrids(newWellVolGrid);\n        }\n    }\n\n    useState(() => {\n        if(props.wellInfoValues) {\n            let wellVolumeGridData = [];\n            let wellVolumeEstimationsGridData = [];\n            props.wellInfoValues.map((wellInfoValue, index) => {\n                if(props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n                    wellVolumeGridData.push(props.wellVolumeFormValues[index])\n                } else {\n                    wellVolumeGridData.push(populateWellVolumeGrid(index));\n                }\n                if(props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n                    wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index] );\n                } else {\n                    wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n                }\n                return wellInfoValue;\n            });\n            setWellVolumeGrids(wellVolumeGridData);\n            setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n        }\n    }, props);\n\n    return (\n        <>\n            <Collapse defaultActiveKey={['1']} onChange={callback}>\n            {\n                props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n                    return <Panel \n                        header={well[0].value}\n                        key={index+1}\n                        extra={\n                            wellVolumeGrids[index] && wellVolumeGrids[index].find(row => row.find(cell => cell.error) ? true : false)\n                            ? <Tooltip title=\"Please fill all the fields\"><i className=\"fas fa-exclamation-circle text-red-500\"></i></Tooltip>\n                            : \"\"\n                        }\n                    >\n                        <div className=\"flex\" key={index}>\n                            <div className=\"well-volume-grid\">\n                                <Grid \n                                    columns={TableHeadersUtil.wellVolumeFormTableData.columns}\n                                    grid={wellVolumeGrids[index]}\n                                    gridValueChanged={handleWellVolumeGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                            <div className=\"p-4\"></div>\n                            <div className=\"well-volume-estimation-grid\">\n                                <Grid\n                                    columns={TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value)}\n                                    grid={wellVolumeEstimationsGrids[index]}\n                                    gridValueChanged={handleWellVolumeEstimationsGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                        </div>\n                    </Panel>\n                })\n            }\n            </Collapse>\n            <div className=\"text-right mt-8\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}