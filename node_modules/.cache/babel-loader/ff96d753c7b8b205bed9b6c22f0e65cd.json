{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\nimport { Tooltip } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellVolume(props) {\n  _s();\n\n  const {\n    Panel\n  } = Collapse;\n  const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n  const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n  const getWellVolumeGridRow = t => {\n    return t.rows.map(label => {\n      const columns = [];\n      TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n        const defaultVal = column.field === \"type\" ? label : \"\";\n        columns.push({\n          value: defaultVal,\n          field: column.field,\n          required: column.required,\n          datatype: column.datatype\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const callback = key => {};\n\n  const getWellVolumeEstimationsGridRow = t => {\n    return t.rows.map(row => {\n      return [{\n        value: \"\",\n        field: row.field\n      }, {\n        value: row.label,\n        readOnly: true,\n        disableEvents: true\n      }];\n    });\n  };\n\n  const populateWellVolumeGrid = index => {\n    const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeGridRow(t));\n    }, []);\n    return newWellVolGrid;\n  };\n\n  const populateWellVolumeEstimationsGrid = index => {\n    const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeEstimationsGridRow(t));\n    }, []);\n    return newWellVolEstimationsGrid;\n  };\n\n  const formatNumber = numString => {\n    if (typeof numString === \"string\") {\n      return parseFloat(numString.replace(/,/g, ''));\n    } else {\n      return numString;\n    }\n  };\n\n  const calculateHValue = (gridDetail, index) => {\n    const depthThisRow = gridDetail[index].find(g => g.field === \"depth_md\").value || 0;\n    const tolThisRow = gridDetail[index].find(g => g.field === \"tol\").value || 0;\n    const idThisRow = gridDetail[index].find(g => g.field === \"id\").value || 0;\n\n    if (depthThisRow) {\n      if (index == 2) {\n        const tolPreviousRow = gridDetail[index - 1].find(g => g.field === \"tol\").value || 0;\n        const diff = formatNumber(depthThisRow) - formatNumber(tolPreviousRow);\n        return formatNumber(idThisRow) ** 2 * 0.0009714 * diff;\n      } else {\n        const tolNextRow = gridDetail[index + 1].find(g => g.field === \"tol\").value || 0;\n\n        if (tolNextRow) {\n          return formatNumber(idThisRow) ** 2 * 0.0009714 * (index == 0 ? formatNumber(tolNextRow) : formatNumber(tolNextRow) - formatNumber(tolThisRow));\n        } else {\n          return formatNumber(idThisRow) ** 2 * 0.0009714 * (index == 0 ? formatNumber(depthThisRow) : formatNumber(depthThisRow) - formatNumber(tolThisRow));\n        }\n      }\n    }\n  };\n\n  const calculateWellVolumeEstimations = (wellVolGridData, wellVolEstGridData, index) => {\n    const hvalueCasing = calculateHValue(wellVolGridData, 0);\n    const hvalueLinear1 = calculateHValue(wellVolGridData, 1);\n    const hvalueLinear2 = calculateHValue(wellVolGridData, 2);\n    const totalHValue = (hvalueCasing || 0) + (hvalueLinear1 || 0) + (hvalueLinear2 || 0);\n\n    const newWellVolEstimationsGrid = _.cloneDeep(wellVolEstGridData ? wellVolEstGridData : wellVolumeEstimationsGrids);\n\n    const surfaveVol = newWellVolEstimationsGrid[index][0].find(wvG => wvG.field === \"surface_vol\").value || 0;\n    const bbls = formatNumber(totalHValue) + formatNumber(surfaveVol);\n    const gallons = bbls * 42;\n    newWellVolEstimationsGrid[index][1].find(k => k.field === \"bbls\").value = bbls.toFixed();\n    newWellVolEstimationsGrid[index][2].find(k => k.field === \"gallons\").value = gallons.toFixed();\n    props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n    setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n  };\n\n  const handleWellVolumeGridChanged = (updatedGridData, index) => {\n    const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n\n    calculateWellVolumeEstimations(updatedGridData, null, index);\n    newWellVolGrid[index] = updatedGridData;\n    props.setWellVolumeFormValue(newWellVolGrid);\n    setWellVolumeGrids(newWellVolGrid);\n  };\n\n  const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n    const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n\n    newWellVolEstimationsGrid[index] = updatedGridData;\n    calculateWellVolumeEstimations(wellVolumeGrids[index], newWellVolEstimationsGrid, index);\n  };\n\n  const gotoNextStep = () => {\n    let formValid = true;\n\n    const checkWellVolumeGrids = _.cloneDeep(wellVolumeGrids);\n\n    let validatedWellVolumeGrids = [];\n    checkWellVolumeGrids.map((grid, index) => {\n      let isWellVolumeValid = true;\n      const validatedGrid = grid.map(row => {\n        const validatedRow = row.map(cell => {\n          if (cell.required && cell.value === \"\") {\n            isWellVolumeValid = false;\n            formValid = false;\n            cell.className = 'cell-error';\n            cell.error = true;\n          }\n\n          return cell;\n        });\n        return validatedRow;\n      });\n\n      if (!isWellVolumeValid) {\n        validatedWellVolumeGrids.push({\n          grid: validatedGrid,\n          index: index\n        });\n      }\n\n      return grid;\n    });\n\n    if (formValid) {\n      console.log('wellVolumeGrids', wellVolumeGrids);\n      console.log('wellVolumeEstimationsGrids', wellVolumeEstimationsGrids);\n      props.next();\n    } else {\n      const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n\n      validatedWellVolumeGrids.map(gridData => {\n        newWellVolGrid[gridData.index] = gridData.grid;\n        return gridData;\n      });\n      props.setWellVolumeFormValue(newWellVolGrid);\n      setWellVolumeGrids(newWellVolGrid);\n    }\n  };\n\n  useState(() => {\n    if (props.wellInfoValues) {\n      let wellVolumeGridData = [];\n      let wellVolumeEstimationsGridData = [];\n      props.wellInfoValues.map((wellInfoValue, index) => {\n        if (props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n          wellVolumeGridData.push(props.wellVolumeFormValues[index]);\n        } else {\n          wellVolumeGridData.push(populateWellVolumeGrid(index));\n        }\n\n        if (props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n          wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index]);\n        } else {\n          wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n        }\n\n        return wellInfoValue;\n      });\n      setWellVolumeGrids(wellVolumeGridData);\n      setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Collapse, {\n      defaultActiveKey: ['1'],\n      onChange: callback,\n      children: props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n        return /*#__PURE__*/_jsxDEV(Panel, {\n          header: well[0].value,\n          extra: wellVolumeGrids[index] && wellVolumeGrids[index].find(row => row.find(cell => cell.error) ? true : false) ? /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Please fill all the fields\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-exclamation-circle text-red-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 75\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 31\n          }, this) : \"\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"well-volume-grid\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                columns: TableHeadersUtil.wellVolumeFormTableData.columns,\n                grid: wellVolumeGrids[index],\n                gridValueChanged: handleWellVolumeGridChanged,\n                index: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"well-volume-estimation-grid\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                columns: TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value),\n                grid: wellVolumeEstimationsGrids[index],\n                gridValueChanged: handleWellVolumeEstimationsGridChanged,\n                index: index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)\n        }, index + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right mt-8\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellVolume, \"eQIw6e5qPxezkqJsRqxFH3MDB1k=\");\n\n_c = WellVolume;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellVolume\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","Collapse","Tooltip","WellVolume","props","Panel","wellVolumeGrids","setWellVolumeGrids","wellVolumeEstimationsGrids","setWellVolumeEstimationsGrids","getWellVolumeGridRow","t","rows","map","label","columns","wellVolumeFormTableData","column","defaultVal","field","push","value","required","datatype","callback","key","getWellVolumeEstimationsGridRow","row","readOnly","disableEvents","populateWellVolumeGrid","index","newWellVolGrid","grid","reduce","rowIdx","concat","populateWellVolumeEstimationsGrid","newWellVolEstimationsGrid","wellVolumeEstimationsFormTableData","formatNumber","numString","parseFloat","replace","calculateHValue","gridDetail","depthThisRow","find","g","tolThisRow","idThisRow","tolPreviousRow","diff","tolNextRow","calculateWellVolumeEstimations","wellVolGridData","wellVolEstGridData","hvalueCasing","hvalueLinear1","hvalueLinear2","totalHValue","cloneDeep","surfaveVol","wvG","bbls","gallons","k","toFixed","setWellVolumeEstimationsFormValue","handleWellVolumeGridChanged","updatedGridData","setWellVolumeFormValue","handleWellVolumeEstimationsGridChanged","gotoNextStep","formValid","checkWellVolumeGrids","validatedWellVolumeGrids","isWellVolumeValid","validatedGrid","validatedRow","cell","className","error","console","log","next","gridData","wellInfoValues","wellVolumeGridData","wellVolumeEstimationsGridData","wellInfoValue","wellVolumeFormValues","wellVolumeEstimationsFormValues","well","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\nimport { Tooltip } from 'antd';\n\nexport default function WellVolume(props) {\n    const { Panel } = Collapse;\n    const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n    const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n    const getWellVolumeGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"type\" ? label : \"\";\n                columns.push({ value: defaultVal, field: column.field, required: column.required, datatype: column.datatype});\n                return column;\n            })\n            return columns;\n        });\n    }\n\n    const callback = (key)  => {\n    }\n\n    const getWellVolumeEstimationsGridRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: \"\", field: row.field },\n                { value: row.label, readOnly: true, disableEvents: true }\n            ]\n        })\n    }\n\n    const populateWellVolumeGrid = (index) => {\n        const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeGridRow(t));\n        }, []);\n        return newWellVolGrid;\n    }\n\n    const populateWellVolumeEstimationsGrid = (index) => {\n        const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeEstimationsGridRow(t));\n        }, []);\n        return newWellVolEstimationsGrid;\n    }\n\n    const formatNumber = (numString) => {\n        if (typeof numString === \"string\") {\n            return parseFloat(numString.replace(/,/g, ''));\n        } else {\n            return numString;\n        }\n    }\n    \n    const calculateHValue = (gridDetail, index) => {\n        const depthThisRow = gridDetail[index].find(g => g.field === \"depth_md\").value || 0;\n        const tolThisRow = gridDetail[index].find(g => g.field === \"tol\").value || 0;\n        const idThisRow = gridDetail[index].find(g => g.field === \"id\").value || 0;\n        if (depthThisRow) {\n            if (index == 2) {\n                const tolPreviousRow = gridDetail[index - 1].find(g => g.field === \"tol\").value || 0;\n                const diff = formatNumber(depthThisRow) - formatNumber(tolPreviousRow);\n                return formatNumber(idThisRow) ** 2 * 0.0009714 * diff;\n            } else {\n                const tolNextRow = gridDetail[index + 1].find(g => g.field === \"tol\").value || 0;\n                if (tolNextRow) {\n                    return formatNumber(idThisRow) ** 2 * 0.0009714 * (index == 0 ? formatNumber(tolNextRow) : (formatNumber(tolNextRow) - formatNumber(tolThisRow)));\n                } else {\n                    return formatNumber(idThisRow) ** 2 * 0.0009714 * (index == 0 ? formatNumber(depthThisRow) : (formatNumber(depthThisRow) - formatNumber(tolThisRow)));\n                }\n            }\n        }\n    }\n\n    const calculateWellVolumeEstimations = (wellVolGridData, wellVolEstGridData, index) => {\n        const hvalueCasing = calculateHValue(wellVolGridData, 0);\n        const hvalueLinear1 = calculateHValue(wellVolGridData, 1);\n        const hvalueLinear2 = calculateHValue(wellVolGridData, 2);\n        const totalHValue = (hvalueCasing || 0) + (hvalueLinear1 || 0) + (hvalueLinear2 || 0);\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolEstGridData ? wellVolEstGridData : wellVolumeEstimationsGrids);\n        const surfaveVol = newWellVolEstimationsGrid[index][0].find(wvG => wvG.field === \"surface_vol\").value || 0;\n        const bbls = formatNumber(totalHValue) + formatNumber(surfaveVol);\n        const gallons = bbls * 42;\n        newWellVolEstimationsGrid[index][1].find(k => k.field === \"bbls\").value = bbls.toFixed();\n        newWellVolEstimationsGrid[index][2].find(k => k.field === \"gallons\").value = gallons.toFixed();\n        props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n        setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n    }\n\n    const handleWellVolumeGridChanged = (updatedGridData, index) => {\n        const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n        calculateWellVolumeEstimations(updatedGridData, null, index);\n        newWellVolGrid[index] = updatedGridData;\n        props.setWellVolumeFormValue(newWellVolGrid);\n        setWellVolumeGrids(newWellVolGrid);\n    }\n\n    const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n        newWellVolEstimationsGrid[index] = updatedGridData;\n        calculateWellVolumeEstimations(wellVolumeGrids[index], newWellVolEstimationsGrid, index);\n    }\n\n    const gotoNextStep = () => {\n        let formValid = true;\n        const checkWellVolumeGrids = _.cloneDeep(wellVolumeGrids);\n        let validatedWellVolumeGrids = [];\n        checkWellVolumeGrids.map((grid, index) => {\n            let isWellVolumeValid = true;\n            const validatedGrid = grid.map(row => {\n                const validatedRow = row.map(cell => {\n                    if(cell.required && cell.value === \"\") {\n                        isWellVolumeValid = false;\n                        formValid = false;\n                        cell.className = 'cell-error';\n                        cell.error = true;\n                    }\n                    return cell;\n                })\n                return validatedRow;\n            })\n            \n            if(!isWellVolumeValid) {\n                validatedWellVolumeGrids.push({grid: validatedGrid, index: index});\n            }\n\n            return grid;\n        });\n        \n        if(formValid) {\n            console.log('wellVolumeGrids', wellVolumeGrids)\n            console.log('wellVolumeEstimationsGrids', wellVolumeEstimationsGrids)\n            props.next();\n        } else {\n            const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n            validatedWellVolumeGrids.map(gridData => {\n                newWellVolGrid[gridData.index] = gridData.grid;\n                return gridData;\n            })\n            props.setWellVolumeFormValue(newWellVolGrid);\n            setWellVolumeGrids(newWellVolGrid);\n        }\n    }\n\n    useState(() => {\n        if(props.wellInfoValues) {\n            let wellVolumeGridData = [];\n            let wellVolumeEstimationsGridData = [];\n            props.wellInfoValues.map((wellInfoValue, index) => {\n                if(props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n                    wellVolumeGridData.push(props.wellVolumeFormValues[index])\n                } else {\n                    wellVolumeGridData.push(populateWellVolumeGrid(index));\n                }\n                if(props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n                    wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index] );\n                } else {\n                    wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n                }\n                return wellInfoValue;\n            });\n            setWellVolumeGrids(wellVolumeGridData);\n            setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n        }\n    }, props);\n\n    return (\n        <>\n            <Collapse defaultActiveKey={['1']} onChange={callback}>\n            {\n                props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n                    return <Panel \n                        header={well[0].value}\n                        key={index+1}\n                        extra={\n                            wellVolumeGrids[index] && wellVolumeGrids[index].find(row => row.find(cell => cell.error) ? true : false)\n                            ? <Tooltip title=\"Please fill all the fields\"><i className=\"fas fa-exclamation-circle text-red-500\"></i></Tooltip>\n                            : \"\"\n                        }\n                    >\n                        <div className=\"flex\" key={index}>\n                            <div className=\"well-volume-grid\">\n                                <Grid \n                                    columns={TableHeadersUtil.wellVolumeFormTableData.columns}\n                                    grid={wellVolumeGrids[index]}\n                                    gridValueChanged={handleWellVolumeGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                            <div className=\"p-4\"></div>\n                            <div className=\"well-volume-estimation-grid\">\n                                <Grid\n                                    columns={TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value)}\n                                    grid={wellVolumeEstimationsGrids[index]}\n                                    gridValueChanged={handleWellVolumeEstimationsGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                        </div>\n                    </Panel>\n                })\n            }\n            </Collapse>\n            <div className=\"text-right mt-8\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}