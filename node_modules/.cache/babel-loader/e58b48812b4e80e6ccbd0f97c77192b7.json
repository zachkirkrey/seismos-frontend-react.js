{"ast":null,"code":"import _slicedToArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from'antd';import TableHeadersUtil from\"util/TableHeaderUtil\";import Grid from\"components/Grid/Grid\";import _ from\"lodash\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function CrewInfo(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),crewInfoGrid=_useState2[0],setCrewInfoGrid=_useState2[1];var getCrewInfoGridRow=function getCrewInfoGridRow(t){return t.rows.map(function(row){var columns=[];TableHeadersUtil.crewInfoFormTableData.columns.map(function(column){var col={};if(column.field===\"role\"){col={value:row.label,field:column.field,readOnly:true,disableEvents:true};}else{col={value:\"\",field:column.field,required:column.required};}columns.push(col);return column;});return columns;});};var populateCrewInfoGrid=function populateCrewInfoGrid(){setCrewInfoGrid(TableHeadersUtil.crewInfoFormTableData.grid.reduce(function(rows,t,rowIdx){return rows.concat(getCrewInfoGridRow(t));},[]));};// const addNewCrew = (e) => {\n//     e.preventDefault();\n//     const newCrewInfoGrid = [\n//         ...crewInfoGrid,\n//         [\n//             { value: \"Field engineer\", readOnly: true},\n//             { value: \"\" },\n//             { value: \"\" }\n//         ]\n//     ];\n//     setCrewInfoGrid(newCrewInfoGrid);\n// }\nvar handleCrewInfoGridChanged=function handleCrewInfoGridChanged(updatedGridData){props.setFormValue(updatedGridData);setCrewInfoGrid(updatedGridData);};var gotoNextStep=function gotoNextStep(){var isCrewInfoValid=true;var validatedCrewGrid=_.cloneDeep(crewInfoGrid);validatedCrewGrid.map(function(row){row.map(function(cell){if(cell.required&&cell.value===\"\"){isCrewInfoValid=false;cell.className='cell-error';}return cell;});return row;});if(!isCrewInfoValid){handleCrewInfoGridChanged(validatedCrewGrid);}else{props.next();}};useState(function(){if(props.formValues!=null){props.formValues&&setCrewInfoGrid(props.formValues);}else{populateCrewInfoGrid();}},props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"mb-8\",style:{width:'70%',marginLeft:'auto',marginRight:'auto'},children:/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.crewInfoFormTableData.columns,grid:crewInfoGrid,gridValueChanged:handleCrewInfoGridChanged})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:function onClick(e){gotoNextStep();},children:\"Next\"})})]});}","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","CrewInfo","props","crewInfoGrid","setCrewInfoGrid","getCrewInfoGridRow","t","rows","map","row","columns","crewInfoFormTableData","column","col","field","value","label","readOnly","disableEvents","required","push","populateCrewInfoGrid","grid","reduce","rowIdx","concat","handleCrewInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isCrewInfoValid","validatedCrewGrid","cloneDeep","cell","className","next","formValues","width","marginLeft","marginRight","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function CrewInfo(props) {\n    \n    const [crewInfoGrid, setCrewInfoGrid] = useState([]);\n\n    const getCrewInfoGridRow = (t) => {\n        return t.rows.map(row => {\n            const columns = [];\n            TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n                let col = {};\n                if(column.field === \"role\") {\n                    col = { value: row.label, field: column.field, readOnly: true, disableEvents: true} \n                } else {\n                    col = { value: \"\", field: column.field, required: column.required };\n                }\n                columns.push(col);\n                return column;\n            })\n            return columns;\n        })\n    }\n\n    const populateCrewInfoGrid = () => {\n        setCrewInfoGrid(TableHeadersUtil.crewInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getCrewInfoGridRow(t));\n        }, []));\n    }\n\n    // const addNewCrew = (e) => {\n    //     e.preventDefault();\n    //     const newCrewInfoGrid = [\n    //         ...crewInfoGrid,\n    //         [\n    //             { value: \"Field engineer\", readOnly: true},\n    //             { value: \"\" },\n    //             { value: \"\" }\n    //         ]\n    //     ];\n    //     setCrewInfoGrid(newCrewInfoGrid);\n    // }\n\n    const handleCrewInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setCrewInfoGrid(updatedGridData)\n    }\n\n    const gotoNextStep = () => {\n        let isCrewInfoValid = true;\n        const validatedCrewGrid = _.cloneDeep(crewInfoGrid);\n        validatedCrewGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isCrewInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        });\n\n        if(!isCrewInfoValid) {\n            handleCrewInfoGridChanged(validatedCrewGrid);\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setCrewInfoGrid(props.formValues);\n        } else {\n            populateCrewInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '70%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.crewInfoFormTableData.columns}\n                    grid={crewInfoGrid}\n                    gridValueChanged={handleCrewInfoGridChanged}\n                ></Grid>\n                {/* <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewCrew(e)}>+ Add a new client</div> */}\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}