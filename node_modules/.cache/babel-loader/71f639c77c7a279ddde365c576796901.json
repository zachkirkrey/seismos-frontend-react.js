{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellVolume(props) {\n  _s();\n\n  const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n  const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n  const getWellVolumeGridRow = t => {\n    return t.rows.map(label => {\n      const columns = [];\n      TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n        const defaultVal = column.field === \"type\" ? label : \"\";\n        columns.push({\n          value: defaultVal,\n          field: column.field\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const getWellVolumeEstimationsGridRow = t => {\n    return t.rows.map(row => {\n      return [{\n        value: \"\",\n        field: row.field\n      }, {\n        value: row.label,\n        readOnly: true,\n        disableEvents: true\n      }];\n    });\n  };\n\n  const populateWellVolumeGrid = index => {\n    const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n\n    newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeGridRow(t));\n    }, []);\n    return newWellVolGrid;\n  };\n\n  const populateWellVolumeEstimationsGrid = index => {\n    const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n\n    newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getWellVolumeEstimationsGridRow(t));\n    }, []);\n    return newWellVolEstimationsGrid;\n  };\n\n  const handleWellVolumeGridChanged = (updatedGridData, index) => {\n    const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n\n    newWellVolGrid[index] = updatedGridData;\n    props.setWellVolumeFormValue(newWellVolGrid);\n    setWellVolumeGrids(newWellVolGrid);\n  };\n\n  const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n    const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n\n    newWellVolEstimationsGrid[index] = updatedGridData;\n    props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n    setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n  };\n\n  const gotoNextStep = () => {\n    props.next();\n  };\n\n  useState(() => {\n    if (props.wellInfoValues) {\n      let wellVolumeGridData = [];\n      let wellVolumeEstimationsGridData = [];\n      props.wellInfoValues.map((wellInfoValue, index) => {\n        if (props.wellVolumeFormValues != null) {\n          props.wellVolumeFormValues && setWellVolumeGrids(props.wellVolumeFormValues);\n        } else {\n          wellVolumeGridData.push(populateWellVolumeGrid(index));\n        }\n\n        if (props.wellVolumeEstimationsFormValues != null) {\n          props.wellVolumeEstimationsFormValues && setWellVolumeEstimationsGrids(props.wellVolumeEstimationsFormValues);\n        } else {\n          wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n        }\n      });\n      console.log(wellVolumeGridData);\n      console.log(wellVolumeEstimationsGridData);\n      setWellVolumeGrids(wellVolumeGridData);\n      setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"well-volume-grid mb-8\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            columns: TableHeadersUtil.wellVolumeFormTableData.columns,\n            grid: wellVolumeGrids[index],\n            gridValueChanged: handleWellVolumeGridChanged,\n            index: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"well-volume-estimation-grid mb-8\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            columns: TableHeadersUtil.wellVolumeEstimationsFormTableData.columns,\n            grid: wellVolumeEstimationsGrids[index],\n            gridValueChanged: handleWellVolumeEstimationsGridChanged,\n            index: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 28\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellVolume, \"LqVWiaPD9Imi6mKmQvEvxLn3bQg=\");\n\n_c = WellVolume;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellVolume\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","WellVolume","props","wellVolumeGrids","setWellVolumeGrids","wellVolumeEstimationsGrids","setWellVolumeEstimationsGrids","getWellVolumeGridRow","t","rows","map","label","columns","wellVolumeFormTableData","column","defaultVal","field","push","value","getWellVolumeEstimationsGridRow","row","readOnly","disableEvents","populateWellVolumeGrid","index","newWellVolGrid","cloneDeep","grid","reduce","rowIdx","concat","populateWellVolumeEstimationsGrid","newWellVolEstimationsGrid","wellVolumeEstimationsFormTableData","handleWellVolumeGridChanged","updatedGridData","setWellVolumeFormValue","handleWellVolumeEstimationsGridChanged","setWellVolumeEstimationsFormValue","gotoNextStep","next","wellInfoValues","wellVolumeGridData","wellVolumeEstimationsGridData","wellInfoValue","wellVolumeFormValues","wellVolumeEstimationsFormValues","console","log","well","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function WellVolume(props) {\n    \n    const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n    const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n    const getWellVolumeGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"type\" ? label : \"\";\n                columns.push({ value: defaultVal, field: column.field});\n                return column;\n            })\n            return columns;\n        });\n    }\n\n    const getWellVolumeEstimationsGridRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: \"\", field: row.field },\n                { value: row.label, readOnly: true, disableEvents: true },\n            ]\n        })\n    }\n\n    const populateWellVolumeGrid = (index) => {\n        const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n        newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeGridRow(t));\n        }, []);\n        return newWellVolGrid;\n    }\n\n    const populateWellVolumeEstimationsGrid = (index) => {\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n        newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeEstimationsGridRow(t));\n        }, []);\n        return newWellVolEstimationsGrid;\n    }\n\n    const handleWellVolumeGridChanged = (updatedGridData, index) => {\n        const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n        newWellVolGrid[index] = updatedGridData;\n        props.setWellVolumeFormValue(newWellVolGrid);\n        setWellVolumeGrids(newWellVolGrid);\n    }\n\n    const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n        newWellVolEstimationsGrid[index] = updatedGridData;\n        props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n        setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n    }\n\n    const gotoNextStep = () => {\n        props.next();\n    }\n\n    useState(() => {\n        if(props.wellInfoValues) {\n            let wellVolumeGridData = [];\n            let wellVolumeEstimationsGridData = [];\n            props.wellInfoValues.map((wellInfoValue, index) => {\n                if(props.wellVolumeFormValues != null) {\n                    props.wellVolumeFormValues && setWellVolumeGrids(props.wellVolumeFormValues);\n                } else {\n                    wellVolumeGridData.push(populateWellVolumeGrid(index));\n                }\n                if(props.wellVolumeEstimationsFormValues != null) {\n                    props.wellVolumeEstimationsFormValues && setWellVolumeEstimationsGrids(props.wellVolumeEstimationsFormValues);\n                } else {\n                    wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n                }\n            });\n            console.log(wellVolumeGridData);\n            console.log(wellVolumeEstimationsGridData);\n            setWellVolumeGrids(wellVolumeGridData);\n            setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n        }\n    }, props);\n\n    return (\n        <>\n            {\n                props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n                    return <div className=\"flex\" key={index}>\n                        <div className=\"well-volume-grid mb-8\">\n                            <Grid \n                                columns={TableHeadersUtil.wellVolumeFormTableData.columns}\n                                grid={wellVolumeGrids[index]}\n                                gridValueChanged={handleWellVolumeGridChanged}\n                                index={index}\n                            ></Grid>\n                        </div>\n                        <div className=\"p-4\"></div>\n                        <div className=\"well-volume-estimation-grid mb-8\">\n                            <Grid\n                                columns={TableHeadersUtil.wellVolumeEstimationsFormTableData.columns}\n                                grid={wellVolumeEstimationsGrids[index]}\n                                gridValueChanged={handleWellVolumeEstimationsGridChanged}\n                                index={index}\n                            ></Grid>\n                        </div>\n                    </div>\n                })\n            }\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}