{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form, Table, Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport ProjectUtil from \"util/ProjectUtil\";\nimport FAKE_DATA from \"constants/fakeData\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [form] = Form.useForm();\n  const columns = TableHeadersUtil.wellInfoFormTable;\n  const data = FAKE_DATA.WELL_INFO_FORM;\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n  const onFinish = values => {\n    props.setFormValue(values);\n    props.next();\n  };\n\n  const handlePaste = (e, form, fieldIndex) => {\n    var data = e.clipboardData.items[0];\n    const values = [];\n    data.getAsString(str => {\n      str.split(/\\s/).forEach(v => {\n        values.push(v);\n      });\n      form.setFieldsValue(ProjectUtil.setClipboardValues(form.getFieldsValue(), values, fieldIndex));\n    });\n  };\n\n  const populateWillInfoGrid = () => {\n    setWellInfoGrid(TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const descripts = [[{\n        value: idx === 0 ? t.title : \"\"\n      }, {\n        value: \"\"\n      }, {\n        value: \"\"\n      }, {\n        value: \"\"\n      }, {\n        value: \"\"\n      }, {\n        value: \"\"\n      }]];\n      return rows.concat(descripts);\n    }, []));\n  };\n\n  useState(() => {\n    props.formValues && form.setFieldsValue(props.formValues);\n    populateWillInfoGrid();\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      columns: TableHeadersUtil.wellInfoFormTableData.columns,\n      grid: wellInfoGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"r7RIkaP+ujawc7TSHWqayiyGJdU=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Form","Table","Button","TableHeadersUtil","ProjectUtil","FAKE_DATA","Grid","WellInfo","props","form","useForm","columns","wellInfoFormTable","data","WELL_INFO_FORM","wellInfoGrid","setWellInfoGrid","onFinish","values","setFormValue","next","handlePaste","e","fieldIndex","clipboardData","items","getAsString","str","split","forEach","v","push","setFieldsValue","setClipboardValues","getFieldsValue","populateWillInfoGrid","wellInfoFormTableData","grid","reduce","rows","t","rowIdx","descripts","value","idx","title","concat","formValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Table, Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport ProjectUtil from \"util/ProjectUtil\";\nimport FAKE_DATA from \"constants/fakeData\";\nimport Grid from \"./Grid\";\n\nexport default function WellInfo(props) {\n    const [form] = Form.useForm();\n    \n    const columns = TableHeadersUtil.wellInfoFormTable;\n    const data = FAKE_DATA.WELL_INFO_FORM;\n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n    const onFinish = values => {\n        props.setFormValue(values);\n        props.next();\n    };\n\n    const handlePaste = (e, form, fieldIndex) => {\n        var data = e.clipboardData.items[0];\n        \n        const values = [];\n        data.getAsString(str => {\n            str.split(/\\s/).forEach((v) => {\n              values.push(v);\n            })\n            form.setFieldsValue(ProjectUtil.setClipboardValues(form.getFieldsValue(), values, fieldIndex));\n        });\n    }\n\n    const populateWillInfoGrid = () => {\n        setWellInfoGrid(TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const descripts = [\n                [\n                    { value: idx === 0 ? t.title : \"\" },\n                    { value: \"\" },\n                    { value: \"\" },\n                    { value: \"\" },\n                    { value: \"\" },\n                    { value: \"\" },\n                ]\n            ]\n    \n            return rows.concat(descripts);\n        }, []))\n    }\n\n    useState(() => {\n        props.formValues && form.setFieldsValue(props.formValues)\n        populateWillInfoGrid();\n    }, props);\n\n    return (\n        <>\n            {/* <Form>\n                <Table\n                    columns={columns}\n                    dataSource={data}\n                    size=\"small\"\n                    bordered\n                />\n            </Form> */}\n            <Grid columns={TableHeadersUtil.wellInfoFormTableData.columns} grid={wellInfoGrid}></Grid>\n            <div className=\"text-right\">\n                <Button type=\"primary\">\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}