{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport SelectEditor from \"components/Grid/DataEditor/SelectEditor\";\nimport _ from \"lodash\";\nimport APP_CONSTANTS from \"constants/appConstants\";\nimport ENUMS from \"constants/appEnums\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CrewInfo(props) {\n  _s();\n\n  const [crewInfoGrid, setCrewInfoGrid] = useState([]);\n  const [showConfirmationModal, setShowConfirmationModal] = useState();\n  const [modalData, setModalData] = useState();\n\n  const remove = (rowIdx, grid) => {\n    setShowConfirmationModal(true);\n    setModalData({\n      rowIdx,\n      grid\n    });\n  };\n\n  const handleCancel = () => {\n    setShowConfirmationModal(false);\n    setModalData(null);\n  };\n\n  const handleRemoveConfirmed = data => {\n    data.grid.splice(data.rowIdx, 1);\n    setCrewInfoGrid(data.grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, data.grid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n        };\n      });\n    }));\n    setShowConfirmationModal(false);\n    setModalData(null);\n  };\n\n  const component = (rowIdx, grid) => {\n    return /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: event => remove(rowIdx, grid)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  };\n\n  const FillViewer = props => {\n    const {\n      value\n    } = props;\n    const foundOption = APP_CONSTANTS.ROLE_OPTIONS.find(op => op.value === value);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell-text-view\",\n      children: foundOption ? foundOption.label : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  };\n\n  const getCrewInfoGridRow = t => {\n    return t.rows.map(row => {\n      const columns = [];\n      TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n        let col = {};\n\n        if (column.field === \"role\") {\n          col = {\n            value: row.label,\n            field: column.field,\n            component: SelectEditor,\n            forceComponent: true,\n            className: 'select-cell'\n          };\n        } else {\n          col = {\n            value: \"\",\n            field: column.field,\n            required: column.required,\n            className: column.className\n          };\n        }\n\n        columns.push(col);\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const populateCrewInfoGrid = () => {\n    const grid = TableHeadersUtil.crewInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getCrewInfoGridRow(t));\n    }, []);\n    setCrewInfoGrid(grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, grid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  };\n\n  const addNewCrewInfo = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n      let col = {};\n\n      if (column.field === \"role\") {\n        col = {\n          value: \"\",\n          field: column.field,\n          dataEditor: SelectEditor,\n          valueViewer: FillViewer,\n          className: 'select-cell'\n        };\n      } else {\n        col = {\n          value: \"\",\n          field: column.field,\n          required: column.required,\n          className: column.className\n        };\n      }\n\n      columns.push(col);\n      return column;\n    });\n    const newCrewInfoGrid = [...crewInfoGrid, columns];\n    setCrewInfoGrid(newCrewInfoGrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, newCrewInfoGrid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  }; // const addNewCrew = (e) => {\n  //     e.preventDefault();\n  //     const newCrewInfoGrid = [\n  //         ...crewInfoGrid,\n  //         [\n  //             { value: \"Field engineer\", readOnly: true},\n  //             { value: \"\" },\n  //             { value: \"\" }\n  //         ]\n  //     ];\n  //     setCrewInfoGrid(newCrewInfoGrid);\n  // }\n\n\n  const handleCrewInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setCrewInfoGrid(updatedGridData.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, updatedGridData) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  };\n\n  const gotoNextStep = () => {\n    let isCrewInfoValid = true;\n\n    const validatedCrewGrid = _.cloneDeep(crewInfoGrid);\n\n    validatedCrewGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isCrewInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isCrewInfoValid) {\n      handleCrewInfoGridChanged(validatedCrewGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setCrewInfoGrid(props.formValues.map((x, index) => {\n        return x.map(y => {\n          const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, props.formValues) : null;\n          return { ...y,\n            component: componentData,\n            forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n          };\n        });\n      }));\n    } else {\n      populateCrewInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        width: '70%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.crewInfoFormTableData.columns,\n        grid: crewInfoGrid,\n        gridValueChanged: handleCrewInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewCrewInfo(e),\n        children: \"+ Add a new crew member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), showConfirmationModal && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      isModalVisible: showConfirmationModal,\n      handleCancel: handleCancel,\n      handleOk: handleRemoveConfirmed,\n      modalTitle: \"Delete Row\",\n      modalText: \"Are you sure you want to delete this row?\",\n      footerButtons: {\n        cancel_text: 'Cancel',\n        confirm_text: 'Yes'\n      },\n      data: modalData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CrewInfo, \"kUbmLwwFY4RGlpSDaS7gsyR8v2g=\");\n\n_c = CrewInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CrewInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","SelectEditor","_","APP_CONSTANTS","ENUMS","MinusCircleOutlined","ConfirmationModal","CrewInfo","props","crewInfoGrid","setCrewInfoGrid","showConfirmationModal","setShowConfirmationModal","modalData","setModalData","remove","rowIdx","grid","handleCancel","handleRemoveConfirmed","data","splice","map","x","index","y","componentData","field","FORM_FIELDS","CREW_INFO","ACTION","component","forceComponent","event","FillViewer","value","foundOption","ROLE_OPTIONS","find","op","label","getCrewInfoGridRow","t","rows","row","columns","crewInfoFormTableData","column","col","className","required","push","populateCrewInfoGrid","reduce","concat","addNewCrewInfo","e","preventDefault","dataEditor","valueViewer","newCrewInfoGrid","handleCrewInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isCrewInfoValid","validatedCrewGrid","cloneDeep","cell","next","formValues","width","marginLeft","marginRight","cancel_text","confirm_text"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport SelectEditor from \"components/Grid/DataEditor/SelectEditor\";\nimport _ from \"lodash\";\nimport APP_CONSTANTS from \"constants/appConstants\";\nimport ENUMS from \"constants/appEnums\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\n\nexport default function CrewInfo(props) {\n    \n    const [crewInfoGrid, setCrewInfoGrid] = useState([]);\n    const [showConfirmationModal, setShowConfirmationModal] = useState();\n    const [modalData, setModalData] = useState();\n\n    const remove = (rowIdx, grid) => {\n        setShowConfirmationModal(true);\n        setModalData({\n            rowIdx,\n            grid\n        })\n    }\n\n    const handleCancel = () => {\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n\n    const handleRemoveConfirmed = (data) => {\n        data.grid.splice(data.rowIdx, 1);\n        setCrewInfoGrid(data.grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, data.grid) : null;\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n                }\n            })\n        }));\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n    \n    const component = (rowIdx, grid) => {\n        return <MinusCircleOutlined onClick={(event) => remove(rowIdx, grid)}/>;\n    }\n\n    const FillViewer = props => {\n        const { value } = props;\n        const foundOption = APP_CONSTANTS.ROLE_OPTIONS.find(op => op.value === value);\n        return (\n            <div className=\"cell-text-view\">\n                {foundOption ? foundOption.label : ''}\n            </div>\n        )\n    }\n\n    const getCrewInfoGridRow = (t) => {\n        return t.rows.map(row => {\n            const columns = [];\n            TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n                let col = {};\n                if(column.field === \"role\") {\n                    col = { value: row.label, field: column.field, component: SelectEditor, forceComponent: true, className: 'select-cell'} \n                } else {\n                    col = { value: \"\", field: column.field, required: column.required, className: column.className };\n                }\n                columns.push(col);\n                return column;\n            })\n            return columns;\n        })\n    }\n\n    const populateCrewInfoGrid = () => {\n        const grid = TableHeadersUtil.crewInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getCrewInfoGridRow(t));\n        }, [])\n        setCrewInfoGrid(grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, grid) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n                }\n            })\n        }));\n    }\n\n    const addNewCrewInfo = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n            let col = {};\n            if(column.field === \"role\") {\n                col = { value: \"\", field: column.field, dataEditor: SelectEditor, valueViewer: FillViewer, className: 'select-cell'} \n            } else {\n                col = { value: \"\", field: column.field, required: column.required, className: column.className };\n            }\n            columns.push(col);\n            return column;\n        })\n        const newCrewInfoGrid = [\n            ...crewInfoGrid,\n            columns\n        ];\n        setCrewInfoGrid(newCrewInfoGrid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, newCrewInfoGrid) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n                }\n            })\n        }));\n    }\n\n    // const addNewCrew = (e) => {\n    //     e.preventDefault();\n    //     const newCrewInfoGrid = [\n    //         ...crewInfoGrid,\n    //         [\n    //             { value: \"Field engineer\", readOnly: true},\n    //             { value: \"\" },\n    //             { value: \"\" }\n    //         ]\n    //     ];\n    //     setCrewInfoGrid(newCrewInfoGrid);\n    // }\n\n    const handleCrewInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setCrewInfoGrid(updatedGridData.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, updatedGridData) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n                }\n            })\n        }))\n    }\n\n    const gotoNextStep = () => {\n        let isCrewInfoValid = true;\n        const validatedCrewGrid = _.cloneDeep(crewInfoGrid);\n        validatedCrewGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isCrewInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        });\n\n        if(!isCrewInfoValid) {\n            handleCrewInfoGridChanged(validatedCrewGrid);\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setCrewInfoGrid(props.formValues.map((x, index) => {\n                return x.map(y => { \n                    const componentData = y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? component(index, props.formValues) : null\n                    return {\n                        ...y,\n                        component: componentData,\n                        forceComponent: y.field === ENUMS.FORM_FIELDS.CREW_INFO.ACTION ? true : false\n                    }\n                })\n            }));\n        } else {\n            populateCrewInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '70%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.crewInfoFormTableData.columns}\n                    grid={crewInfoGrid}\n                    gridValueChanged={handleCrewInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewCrewInfo(e)}>+ Add a new crew member</div>\n            </div>\n            \n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n            {\n                showConfirmationModal && <ConfirmationModal\n                    isModalVisible={showConfirmationModal}\n                    handleCancel={handleCancel}\n                    handleOk={handleRemoveConfirmed}\n                    modalTitle={\"Delete Row\"}\n                    modalText={\"Are you sure you want to delete this row?\"}\n                    footerButtons={{cancel_text: 'Cancel', confirm_text: 'Yes'}}\n                    data={modalData}\n                >\n                </ConfirmationModal>\n            }\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}