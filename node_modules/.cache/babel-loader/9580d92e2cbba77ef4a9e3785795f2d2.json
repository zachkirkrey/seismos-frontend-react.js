{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/app.js\",\n    _s = $RefreshSig$();\n\nimport Auth from \"layouts/Auth.js\";\nimport HttpUtil from \"util/HttpUtil\";\nimport Admin from \"layouts/Admin.js\";\nimport ENUMS from \"constants/appEnums\";\nimport { useDispatch } from \"react-redux\";\nimport allActions from 'redux/actions/index';\nimport { AppContext } from \"util/ContextUtil\";\nimport React, { useState, useEffect } from \"react\";\nimport NotFound from \"components/NotFound/NotFound\";\nimport { useToasts } from 'react-toast-notifications';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport axios from \"axiosConfig\";\nimport { classicNameResolver } from \"typescript\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Application() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    addToast\n  } = useToasts();\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\n  const [isAuthenticating, setIsAuthenticating] = useState(true);\n  useEffect(() => {\n    onLoad();\n  }, []);\n\n  async function onLoad() {\n    if (localStorage.getItem('JWT')) {\n      console.log('in side jwt token');\n      axios.get(ENUMS.API_ROUTES.AUTH_STATUS, { ...HttpUtil.adminHttpHeaders()\n      }).then(res => {\n        dispatch(allActions.authActions.setUserState(res.data.user));\n        dispatch(allActions.authActions.setUserProjectList(res.data.projectList));\n        userHasAuthenticated(true);\n        setIsAuthenticating(false);\n      }).catch(error => {\n        userHasAuthenticated(false);\n        setIsAuthenticating(false);\n\n        if (error.response) {\n          console.log(error, 'error');\n          console.log('errorrespon', error.response);\n\n          if (error.response.data && error.response.data.message === 'jwt expired') {\n            localStorage.removeItem('JWT');\n            addToast(\"Your login token has expired. Please login again!\", {\n              appearance: 'info'\n            });\n          } else {\n            addToast(error.response.data ? error.response.data.message : \"Failed to fetch user details. Please login again!\", {\n              appearance: 'error',\n              autoDismiss: true\n            });\n          }\n\n          console.error(error.response.data.message);\n        }\n      });\n    } else {\n      setIsAuthenticating(false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !isAuthenticating && /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        isAuthenticated,\n        userHasAuthenticated\n      },\n      children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: ENUMS.ROUTES.ADMIN,\n            render: props => /*#__PURE__*/_jsxDEV(Admin, { ...props,\n              isAuthenticated: isAuthenticated\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 75\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: ENUMS.ROUTES.AUTH,\n            render: props => /*#__PURE__*/_jsxDEV(Auth, { ...props,\n              isAuthenticated: isAuthenticated\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 74\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n            from: \"/\",\n            to: \"/auth/login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            render: props => /*#__PURE__*/_jsxDEV(NotFound, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Application, \"fmXUlRKp4s0ZpaVC0nsb/tRn6bI=\", false, function () {\n  return [useDispatch, useToasts];\n});\n\n_c = Application;\n\nvar _c;\n\n$RefreshReg$(_c, \"Application\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/app.js"],"names":["Auth","HttpUtil","Admin","ENUMS","useDispatch","allActions","AppContext","React","useState","useEffect","NotFound","useToasts","BrowserRouter","Route","Switch","Redirect","axios","classicNameResolver","Application","dispatch","addToast","isAuthenticated","userHasAuthenticated","isAuthenticating","setIsAuthenticating","onLoad","localStorage","getItem","console","log","get","API_ROUTES","AUTH_STATUS","adminHttpHeaders","then","res","authActions","setUserState","data","user","setUserProjectList","projectList","catch","error","response","message","removeItem","appearance","autoDismiss","ROUTES","ADMIN","props","AUTH"],"mappings":"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","sourcesContent":["import Auth from \"layouts/Auth.js\";\nimport HttpUtil from \"util/HttpUtil\";\nimport Admin from \"layouts/Admin.js\";\nimport ENUMS from \"constants/appEnums\";\nimport { useDispatch } from \"react-redux\";\nimport allActions from 'redux/actions/index';\nimport { AppContext } from \"util/ContextUtil\";\nimport React, { useState, useEffect } from \"react\";\nimport NotFound from \"components/NotFound/NotFound\";\nimport { useToasts } from 'react-toast-notifications';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport axios from \"axiosConfig\";\nimport { classicNameResolver } from \"typescript\";\n\nexport default function Application () {\n    const dispatch = useDispatch();\n    const { addToast } = useToasts();\n\n    const [isAuthenticated, userHasAuthenticated] = useState(false);\n    const [isAuthenticating, setIsAuthenticating] = useState(true);\n\n    useEffect(() => {\n        onLoad();\n    }, []);\n      \n    async function onLoad() {\n        if (localStorage.getItem('JWT')) {\n            console.log('in side jwt token');\n            axios.get(ENUMS.API_ROUTES.AUTH_STATUS,\n            {\n                ...HttpUtil.adminHttpHeaders()\n            })\n            .then(res => {\n                dispatch(allActions.authActions.setUserState(res.data.user));\n                dispatch(allActions.authActions.setUserProjectList(res.data.projectList));\n                userHasAuthenticated(true);\n                setIsAuthenticating(false);\n            })\n            .catch(error => {\n                userHasAuthenticated(false);\n                setIsAuthenticating(false);\n                if (error.response) {\n                    console.log(error, 'error')\n                    console.log('errorrespon', error.response)\n                    if (error.response.data && error.response.data.message === 'jwt expired') {\n                        localStorage.removeItem('JWT');\n                        addToast(\"Your login token has expired. Please login again!\", { appearance: 'info' });\n                    }\n                    else {\n                        addToast(\n                            error.response.data ? \n                                error.response.data.message : \n                                \"Failed to fetch user details. Please login again!\", \n                            { \n                                appearance: 'error',\n                                autoDismiss: true\n                            }\n                        );\n                    }\n                    \n                    console.error(error.response.data.message);\n                }\n            })\n        }\n        else {\n            setIsAuthenticating(false);\n        }\n    }       \n\n    return (\n        <>\n            { !isAuthenticating &&\n            <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\n                <BrowserRouter>\n                    <Switch>\n                        <Route path={ENUMS.ROUTES.ADMIN} render={props => <Admin {...props} isAuthenticated={isAuthenticated} />} />\n                        <Route path={ENUMS.ROUTES.AUTH} render={props => <Auth {...props} isAuthenticated={isAuthenticated} />} />\n                        {/* <Redirect from=\"/\" to=\"/auth/home\" /> */}\n                        <Redirect from=\"/\" to=\"/auth/login\" />\n                        <Route render={props => <NotFound {...props} />} />\n                    </Switch>\n                </BrowserRouter>\n            </AppContext.Provider>\n            }\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}