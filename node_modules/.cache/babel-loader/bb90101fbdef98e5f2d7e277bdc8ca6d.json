{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, DatePicker, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function JobInfo(props) {\n  _s();\n\n  const [jobInfoGrid, setJobInfoGrid] = useState([]);\n  const [padInfoGrid, setPadInfoGrid] = useState([]);\n\n  const onDateChange = (date, dateString, grid, index) => {\n    let newDate = null;\n\n    if (date) {\n      newDate = date.format('x');\n    }\n\n    const newJobInfoGrid = _.cloneDeep(grid);\n\n    newJobInfoGrid[index].find(r => r.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE).value = Number(newDate);\n    setJobInfoGrid(newJobInfoGrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? component(index, newJobInfoGrid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? true : false\n        };\n      });\n    }));\n  };\n\n  const getRow = t => {\n    return t.rows.map((row, index) => {\n      return [{\n        value: row.label,\n        readOnly: true,\n        disableEvents: true\n      }, {\n        value: \"\",\n        field: row.field,\n        required: row.required\n      }];\n    });\n  };\n\n  const component = (rowIdx, grid) => {\n    const currentVal = grid[rowIdx].find(r => r.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE).value;\n    console.log(currentVal);\n    const momentDate = currentVal ? moment(Number(currentVal)) : null;\n    console.log(momentDate);\n    return /*#__PURE__*/_jsxDEV(DatePicker, {\n      className: \"w-100\",\n      value: momentDate,\n      onChange: (date, dateString) => onDateChange(date, dateString, grid, rowIdx)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  };\n\n  const populateJobInfoGrid = () => {\n    const jobgrid = TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const row = getRow(t);\n      return rows.concat(row);\n    }, []);\n    setJobInfoGrid(jobgrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? component(index, jobgrid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? true : false\n        };\n      });\n    }));\n  };\n\n  const populatePadInfoGrid = () => {\n    setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const row = getRow(t);\n      return rows.concat(row);\n    }, []));\n  };\n\n  const handleJobInfoGridChanged = updatedGridData => {\n    props.setJobInfoFormValue(updatedGridData);\n    setJobInfoGrid(updatedGridData.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? component(index, updatedGridData) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? true : false\n        };\n      });\n    }));\n  };\n\n  const handlePadInfoGridChanged = updatedGridData => {\n    props.setPadInfoFormValue(updatedGridData);\n    setPadInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isJobInfoValid = true;\n    let isPadInfoValid = true;\n\n    const validatedJobGrid = _.cloneDeep(jobInfoGrid);\n\n    validatedJobGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isJobInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    const validatedPadGrid = _.cloneDeep(padInfoGrid);\n\n    validatedPadGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isPadInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isJobInfoValid || !isPadInfoValid) {\n      handleJobInfoGridChanged(validatedJobGrid);\n      handlePadInfoGridChanged(validatedPadGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.jobInfoFormValues != null) {\n      props.jobInfoFormValues && setJobInfoGrid(props.jobInfoFormValues);\n    } else {\n      populateJobInfoGrid();\n    }\n\n    if (props.padInfoFormValues != null) {\n      props.padInfoFormValues && setPadInfoGrid(props.padInfoFormValues);\n    } else {\n      populatePadInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      style: {\n        width: '80%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        size: \"large\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.jobInfoFormTableData.columns,\n          grid: jobInfoGrid,\n          className: \"job-info-grid mb-8\",\n          gridValueChanged: handleJobInfoGridChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.padInfoFormTableData.columns,\n          grid: padInfoGrid,\n          className: \"pad-info-grid mb-8\",\n          gridValueChanged: handlePadInfoGridChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(JobInfo, \"kL26Q264/sZQUMOQMoqhA95mkF4=\");\n\n_c = JobInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js"],"names":["React","useState","Button","DatePicker","Space","TableHeadersUtil","Grid","_","ENUMS","moment","JobInfo","props","jobInfoGrid","setJobInfoGrid","padInfoGrid","setPadInfoGrid","onDateChange","date","dateString","grid","index","newDate","format","newJobInfoGrid","cloneDeep","find","r","field","FORM_FIELDS","JOB_INFO","START_DATE","value","Number","map","x","y","componentData","component","forceComponent","getRow","t","rows","row","label","readOnly","disableEvents","required","rowIdx","currentVal","console","log","momentDate","populateJobInfoGrid","jobgrid","jobInfoFormTableData","reduce","concat","populatePadInfoGrid","padInfoFormTableData","handleJobInfoGridChanged","updatedGridData","setJobInfoFormValue","handlePadInfoGridChanged","setPadInfoFormValue","gotoNextStep","isJobInfoValid","isPadInfoValid","validatedJobGrid","cell","className","validatedPadGrid","next","jobInfoFormValues","padInfoFormValues","width","marginLeft","marginRight","columns","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, DatePicker, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\nimport moment from 'moment';\n\nexport default function JobInfo(props) {\n    \n    const [jobInfoGrid, setJobInfoGrid] = useState([]);\n    const [padInfoGrid, setPadInfoGrid] = useState([]);\n\n    const onDateChange = (date, dateString, grid, index) => {\n        let newDate = null;\n        if(date) {\n            newDate = date.format('x');\n        }\n        const newJobInfoGrid = _.cloneDeep(grid);\n        newJobInfoGrid[index].find(r => r.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE).value = Number(newDate);\n        setJobInfoGrid(newJobInfoGrid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? component(index, newJobInfoGrid) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? true : false\n                }\n            })\n        }));\n    }\n\n    const getRow = (t) => {\n        return t.rows.map((row, index) => {\n            return [\n                { value: row.label, readOnly: true, disableEvents: true },\n                { value: \"\", field: row.field, required: row.required },\n            ]\n        })\n    }\n\n    const component = (rowIdx, grid) => {\n        const currentVal = grid[rowIdx].find(r => r.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE).value;\n        console.log(currentVal);\n        const momentDate = currentVal ? moment(Number(currentVal)) : null;\n        console.log(momentDate)\n        return <DatePicker className=\"w-100\" value={momentDate} onChange={(date, dateString) => onDateChange(date, dateString, grid, rowIdx)} />;\n    }\n\n    const populateJobInfoGrid = () => {\n        const jobgrid = TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []);\n        setJobInfoGrid(jobgrid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? component(index, jobgrid) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? true : false\n                }\n            })\n        }));\n    }\n\n    const populatePadInfoGrid = () => {\n        setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    const handleJobInfoGridChanged = (updatedGridData) => {\n        props.setJobInfoFormValue(updatedGridData);\n        setJobInfoGrid(updatedGridData.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? component(index, updatedGridData) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE ? true : false\n                }\n            })\n        }));\n    }\n\n    const handlePadInfoGridChanged = (updatedGridData) => {\n        props.setPadInfoFormValue(updatedGridData);\n        setPadInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isJobInfoValid = true;\n        let isPadInfoValid = true;\n        const validatedJobGrid = _.cloneDeep(jobInfoGrid);\n        validatedJobGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isJobInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            });\n            return row;\n        })\n        const validatedPadGrid = _.cloneDeep(padInfoGrid);\n        validatedPadGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isPadInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            });\n            return row;\n        })\n        if(!isJobInfoValid || !isPadInfoValid) {\n            handleJobInfoGridChanged(validatedJobGrid)\n            handlePadInfoGridChanged(validatedPadGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.jobInfoFormValues != null) {\n            props.jobInfoFormValues && setJobInfoGrid(props.jobInfoFormValues);\n        } else {\n            populateJobInfoGrid();\n        }\n        if(props.padInfoFormValues != null) {\n            props.padInfoFormValues && setPadInfoGrid(props.padInfoFormValues);\n        } else {\n            populatePadInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"flex\" style={{width: '80%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Space size=\"large\">\n                    <Grid \n                        columns={TableHeadersUtil.jobInfoFormTableData.columns}\n                        grid={jobInfoGrid}\n                        className=\"job-info-grid mb-8\"\n                        gridValueChanged={handleJobInfoGridChanged}\n                    ></Grid>\n                    <Grid \n                        columns={TableHeadersUtil.padInfoFormTableData.columns}\n                        grid={padInfoGrid}\n                        className=\"pad-info-grid mb-8\"\n                        gridValueChanged={handlePadInfoGridChanged}\n                    ></Grid>\n                </Space>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}