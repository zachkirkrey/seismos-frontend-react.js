{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Equipment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport NumberInput from \"components/Grid/DataEditor/NumberInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Equipment(props) {\n  _s();\n\n  const [equipmentGrid, setEquipmentGrid] = useState([]);\n\n  const getEquipmentGridRow = t => {\n    return t.rows.map(row => {\n      console.log(row.field);\n      return [{\n        value: row.label,\n        readOnly: true,\n        disableEvents: true\n      }, {\n        value: \"\",\n        field: row.field,\n        dataEditor: NumberInput,\n        required: row.required,\n        datatype: row.datatype\n      }];\n    });\n  };\n\n  const populateEquipmentGrid = () => {\n    setEquipmentGrid(TableHeadersUtil.equipmentFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getEquipmentGridRow(t));\n    }, []));\n  };\n\n  const handleEquipmentGridChanged = updatedGridData => {\n    console.log(updatedGridData);\n    props.setFormValue(updatedGridData);\n    setEquipmentGrid(updatedGridData);\n  };\n\n  const createProject = () => {\n    let isEquipmentInfoValid = true;\n\n    const validatedEquipmentGrid = _.cloneDeep(equipmentGrid);\n\n    validatedEquipmentGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isEquipmentInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isEquipmentInfoValid) {\n      handleEquipmentGridChanged(validatedEquipmentGrid);\n    } else {\n      props.createProjectSubmit();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setEquipmentGrid(props.formValues);\n    } else {\n      populateEquipmentGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        width: '50%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.equipmentFormTableData.columns,\n        grid: equipmentGrid,\n        gridValueChanged: handleEquipmentGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          createProject();\n        },\n        children: \"Create Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Equipment, \"Zrwg6yEjE+PuDpuxD37X3GZtNPg=\");\n\n_c = Equipment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Equipment\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Equipment.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","NumberInput","Equipment","props","equipmentGrid","setEquipmentGrid","getEquipmentGridRow","t","rows","map","row","console","log","field","value","label","readOnly","disableEvents","dataEditor","required","datatype","populateEquipmentGrid","equipmentFormTableData","grid","reduce","rowIdx","concat","handleEquipmentGridChanged","updatedGridData","setFormValue","createProject","isEquipmentInfoValid","validatedEquipmentGrid","cloneDeep","cell","className","createProjectSubmit","formValues","width","marginLeft","marginRight","columns","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport NumberInput from \"components/Grid/DataEditor/NumberInput\";\n\nexport default function Equipment(props) {\n    \n    const [equipmentGrid, setEquipmentGrid] = useState([]);\n\n    const getEquipmentGridRow = (t) => {\n        return t.rows.map(row => {\n            console.log(row.field)\n            return [\n                { value: row.label, readOnly: true, disableEvents: true},\n                { value: \"\", field: row.field, dataEditor: NumberInput, required: row.required, datatype: row.datatype },\n            ]\n        })\n    }\n\n    const populateEquipmentGrid = () => {\n        setEquipmentGrid(TableHeadersUtil.equipmentFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getEquipmentGridRow(t));\n        }, []));\n    }\n\n    const handleEquipmentGridChanged = (updatedGridData) => {\n        console.log(updatedGridData)\n        props.setFormValue(updatedGridData);\n        setEquipmentGrid(updatedGridData)\n    }\n\n    const createProject = () => {\n        let isEquipmentInfoValid = true;\n        const validatedEquipmentGrid = _.cloneDeep(equipmentGrid);\n        validatedEquipmentGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isEquipmentInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n        if(!isEquipmentInfoValid) {\n            handleEquipmentGridChanged(validatedEquipmentGrid);\n        } else {\n            props.createProjectSubmit();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setEquipmentGrid(props.formValues);\n        } else {\n            populateEquipmentGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '50%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.equipmentFormTableData.columns}\n                    grid={equipmentGrid}\n                    gridValueChanged={handleEquipmentGridChanged}\n                ></Grid>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {createProject()}}>\n                    Create Project\n                </Button>\n            </div>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}