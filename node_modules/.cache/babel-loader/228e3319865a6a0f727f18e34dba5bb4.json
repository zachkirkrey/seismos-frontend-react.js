{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, DatePicker, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function JobInfo(props) {\n  _s();\n\n  const [jobInfoGrid, setJobInfoGrid] = useState([]);\n  const [padInfoGrid, setPadInfoGrid] = useState([]);\n\n  const onDateChange = (date, dateString, field, index) => {\n    console.log(date.unix(), dateString, field, index);\n    console.log(date.unix());\n  };\n\n  const getRow = t => {\n    return t.rows.map((row, index) => {\n      let newRow = [];\n\n      if (row.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE) {\n        newRow = [{\n          value: row.label,\n          readOnly: true,\n          disableEvents: true\n        }, {\n          value: \"\",\n          field: row.field,\n          required: row.required,\n          forceComponent: true,\n          component: /*#__PURE__*/_jsxDEV(DatePicker, {\n            className: \"w-100\",\n            onChange: (date, dateString) => onDateChange(date, dateString, row.field, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 109\n          }, this)\n        }];\n      } else {\n        newRow = [{\n          value: row.label,\n          readOnly: true,\n          disableEvents: true\n        }, {\n          value: \"\",\n          field: row.field,\n          required: row.required\n        }];\n      }\n\n      return newRow;\n    });\n  };\n\n  const populateJobInfoGrid = () => {\n    setJobInfoGrid(TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const row = getRow(t);\n      return rows.concat(row);\n    }, []));\n  };\n\n  const populatePadInfoGrid = () => {\n    setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const row = getRow(t);\n      return rows.concat(row);\n    }, []));\n  };\n\n  const handleJobInfoGridChanged = updatedGridData => {\n    console.log('here', updatedGridData);\n    props.setJobInfoFormValue(updatedGridData);\n    setJobInfoGrid(updatedGridData);\n  };\n\n  const handlePadInfoGridChanged = updatedGridData => {\n    props.setPadInfoFormValue(updatedGridData);\n    setPadInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isJobInfoValid = true;\n    let isPadInfoValid = true;\n\n    const validatedJobGrid = _.cloneDeep(jobInfoGrid);\n\n    validatedJobGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isJobInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    const validatedPadGrid = _.cloneDeep(padInfoGrid);\n\n    validatedPadGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isPadInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isJobInfoValid || !isPadInfoValid) {\n      handleJobInfoGridChanged(validatedJobGrid);\n      handlePadInfoGridChanged(validatedPadGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.jobInfoFormValues != null) {\n      props.jobInfoFormValues && setJobInfoGrid(props.jobInfoFormValues);\n    } else {\n      populateJobInfoGrid();\n    }\n\n    if (props.padInfoFormValues != null) {\n      props.padInfoFormValues && setPadInfoGrid(props.padInfoFormValues);\n    } else {\n      populatePadInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      style: {\n        width: '80%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        size: \"large\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.jobInfoFormTableData.columns,\n          grid: jobInfoGrid,\n          className: \"job-info-grid mb-8\",\n          gridValueChanged: handleJobInfoGridChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.padInfoFormTableData.columns,\n          grid: padInfoGrid,\n          className: \"pad-info-grid mb-8\",\n          gridValueChanged: handlePadInfoGridChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(JobInfo, \"kL26Q264/sZQUMOQMoqhA95mkF4=\");\n\n_c = JobInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js"],"names":["React","useState","Button","DatePicker","Space","TableHeadersUtil","Grid","_","ENUMS","JobInfo","props","jobInfoGrid","setJobInfoGrid","padInfoGrid","setPadInfoGrid","onDateChange","date","dateString","field","index","console","log","unix","getRow","t","rows","map","row","newRow","FORM_FIELDS","JOB_INFO","START_DATE","value","label","readOnly","disableEvents","required","forceComponent","component","populateJobInfoGrid","jobInfoFormTableData","grid","reduce","rowIdx","concat","populatePadInfoGrid","padInfoFormTableData","handleJobInfoGridChanged","updatedGridData","setJobInfoFormValue","handlePadInfoGridChanged","setPadInfoFormValue","gotoNextStep","isJobInfoValid","isPadInfoValid","validatedJobGrid","cloneDeep","cell","className","validatedPadGrid","next","jobInfoFormValues","padInfoFormValues","width","marginLeft","marginRight","columns","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, DatePicker, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\n\nexport default function JobInfo(props) {\n    \n    const [jobInfoGrid, setJobInfoGrid] = useState([]);\n    const [padInfoGrid, setPadInfoGrid] = useState([]);\n\n    const onDateChange = (date, dateString, field, index) => {\n        console.log(date.unix(), dateString, field, index)\n        console.log(date.unix())\n    }\n\n    const getRow = (t) => {\n        return t.rows.map((row, index) => {\n            let newRow = [];\n            if(row.field === ENUMS.FORM_FIELDS.JOB_INFO.START_DATE) {\n                newRow = [\n                    { value: row.label, readOnly: true, disableEvents: true },\n                    { value: \"\", field: row.field, required: row.required, forceComponent: true, component: <DatePicker className=\"w-100\" onChange={(date, dateString) => onDateChange(date, dateString, row.field, index)} /> },\n                ]\n            } else {\n                newRow = [\n                    { value: row.label, readOnly: true, disableEvents: true },\n                    { value: \"\", field: row.field, required: row.required },\n                ]\n            }\n            return newRow;\n        })\n    }\n\n    const populateJobInfoGrid = () => {\n        setJobInfoGrid(TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    const populatePadInfoGrid = () => {\n        setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    const handleJobInfoGridChanged = (updatedGridData) => {\n        console.log('here', updatedGridData)\n        props.setJobInfoFormValue(updatedGridData);\n        setJobInfoGrid(updatedGridData);\n    }\n\n    const handlePadInfoGridChanged = (updatedGridData) => {\n        props.setPadInfoFormValue(updatedGridData);\n        setPadInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isJobInfoValid = true;\n        let isPadInfoValid = true;\n        const validatedJobGrid = _.cloneDeep(jobInfoGrid);\n        validatedJobGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isJobInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            });\n            return row;\n        })\n        const validatedPadGrid = _.cloneDeep(padInfoGrid);\n        validatedPadGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isPadInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            });\n            return row;\n        })\n        if(!isJobInfoValid || !isPadInfoValid) {\n            handleJobInfoGridChanged(validatedJobGrid)\n            handlePadInfoGridChanged(validatedPadGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.jobInfoFormValues != null) {\n            props.jobInfoFormValues && setJobInfoGrid(props.jobInfoFormValues);\n        } else {\n            populateJobInfoGrid();\n        }\n        if(props.padInfoFormValues != null) {\n            props.padInfoFormValues && setPadInfoGrid(props.padInfoFormValues);\n        } else {\n            populatePadInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"flex\" style={{width: '80%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Space size=\"large\">\n                    <Grid \n                        columns={TableHeadersUtil.jobInfoFormTableData.columns}\n                        grid={jobInfoGrid}\n                        className=\"job-info-grid mb-8\"\n                        gridValueChanged={handleJobInfoGridChanged}\n                    ></Grid>\n                    <Grid \n                        columns={TableHeadersUtil.padInfoFormTableData.columns}\n                        grid={padInfoGrid}\n                        className=\"pad-info-grid mb-8\"\n                        gridValueChanged={handlePadInfoGridChanged}\n                    ></Grid>\n                </Space>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}