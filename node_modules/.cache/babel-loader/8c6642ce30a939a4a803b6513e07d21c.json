{"ast":null,"code":"import _toConsumableArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from'antd';import TableHeadersUtil from\"util/TableHeaderUtil\";import Grid from\"components/Grid/Grid\";import _ from\"lodash\";import{MinusCircleOutlined}from\"@ant-design/icons\";import ConfirmationModal from\"components/Modal/ConfirmationModal\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function WellInfo(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),wellInfoGrid=_useState2[0],setWellInfoGrid=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),showConfirmationModal=_useState4[0],setShowConfirmationModal=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),modalData=_useState6[0],setModalData=_useState6[1];var remove=function remove(rowIdx,grid){setShowConfirmationModal(true);setModalData({rowIdx:rowIdx,grid:grid});};var handleCancel=function handleCancel(){setShowConfirmationModal(false);setModalData(null);};var handleRemoveConfirmed=function handleRemoveConfirmed(data){data.grid.splice(data.rowIdx,1);setWellInfoGrid(data.grid.map(function(x,index){return x.map(function(y){var componentData=y.field===\"action\"?component(index,data.grid):null;return _objectSpread(_objectSpread({},y),{},{component:componentData});});}));setShowConfirmationModal(false);setModalData(null);};var component=function component(rowIdx,grid){return/*#__PURE__*/_jsx(MinusCircleOutlined,{onClick:function onClick(event){return remove(rowIdx,grid);}});};var isForcedComponent=function isForcedComponent(column){return column.actionColumn;};var populateWillInfoGrid=function populateWillInfoGrid(){var grid=TableHeadersUtil.wellInfoFormTableData.grid.reduce(function(rows,t,rowIdx){var columns=[];TableHeadersUtil.wellInfoFormTableData.columns.map(function(column){var className=column.actionColumn?\"noborder\":\"\";columns.push({value:column.defaultValue,field:column.field,required:column.required,component:null,forceComponent:isForcedComponent(column),className:className});return column;});return rows.concat([columns]);},[]);setWellInfoGrid(grid.map(function(x,index){return x.map(function(y){var componentData=y.field===\"action\"?component(index,grid):null;return _objectSpread(_objectSpread({},y),{},{component:componentData});});}));};var addNewWell=function addNewWell(e){e.preventDefault();var columns=[];TableHeadersUtil.wellInfoFormTableData.columns.map(function(column){var className=column.actionColumn?\"noborder\":\"\";columns.push({value:column.defaultValue,field:column.field,required:column.required,component:null,forceComponent:isForcedComponent(column),className:className});return column;});var newWellInfoGrid=[].concat(_toConsumableArray(wellInfoGrid),[columns]);setWellInfoGrid(newWellInfoGrid.map(function(x,index){return x.map(function(y){var componentData=y.field===\"action\"?component(index,newWellInfoGrid):null;return _objectSpread(_objectSpread({},y),{},{component:componentData});});}));};var handleWellInfoGridChanged=function handleWellInfoGridChanged(updatedGridData){props.setFormValue(updatedGridData);setWellInfoGrid(updatedGridData.map(function(x,index){return x.map(function(y){var componentData=y.field===\"action\"?component(index,updatedGridData):null;return _objectSpread(_objectSpread({},y),{},{component:componentData});});}));};var gotoNextStep=function gotoNextStep(){var isWellInfoValid=true;var validatedWellGrid=_.cloneDeep(wellInfoGrid);validatedWellGrid.map(function(row){row.map(function(cell){if(cell.required&&cell.value===\"\"){isWellInfoValid=false;cell.className='cell-error';}return cell;});return row;});if(!isWellInfoValid){handleWellInfoGridChanged(validatedWellGrid);}else{props.next();}};useState(function(){if(props.formValues!=null){props.formValues&&setWellInfoGrid(props.formValues.map(function(x,index){return x.map(function(y){var componentData=y.field===\"action\"?component(index,props.formValues):null;return _objectSpread(_objectSpread({},y),{},{component:componentData});});}));}else{populateWillInfoGrid();}},props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-8\",children:[/*#__PURE__*/_jsx(Grid,{columns:TableHeadersUtil.wellInfoFormTableData.columns,grid:wellInfoGrid,gridValueChanged:handleWellInfoGridChanged}),/*#__PURE__*/_jsx(\"div\",{className:\"text-lightBlue-600 mt-2 cursor-pointer inline-block\",onClick:function onClick(e){return addNewWell(e);},children:\"+ Add a new well\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:function onClick(e){gotoNextStep();},children:\"Next\"})}),showConfirmationModal&&/*#__PURE__*/_jsx(ConfirmationModal,{isModalVisible:showConfirmationModal,handleCancel:handleCancel,handleOk:handleRemoveConfirmed,modalTitle:\"Delete Row\",modalText:\"Are you sure you want to delete this row?\",footerButtons:{cancel_text:'Cancel',confirm_text:'Yes'},data:modalData})]});}","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","MinusCircleOutlined","ConfirmationModal","WellInfo","props","wellInfoGrid","setWellInfoGrid","showConfirmationModal","setShowConfirmationModal","modalData","setModalData","remove","rowIdx","grid","handleCancel","handleRemoveConfirmed","data","splice","map","x","index","y","componentData","field","component","event","isForcedComponent","column","actionColumn","populateWillInfoGrid","wellInfoFormTableData","reduce","rows","t","columns","className","push","value","defaultValue","required","forceComponent","concat","addNewWell","e","preventDefault","newWellInfoGrid","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","cloneDeep","row","cell","next","formValues","cancel_text","confirm_text"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n    const [showConfirmationModal, setShowConfirmationModal] = useState();\n    const [modalData, setModalData] = useState();\n\n    const remove = (rowIdx, grid) => {\n        setShowConfirmationModal(true);\n        setModalData({\n            rowIdx,\n            grid\n        })\n    }\n\n    const handleCancel = () => {\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n\n    const handleRemoveConfirmed = (data) => {\n        data.grid.splice(data.rowIdx, 1);\n        setWellInfoGrid(data.grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === \"action\" ? component(index, data.grid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n\n    const component = (rowIdx, grid) => {\n        return <MinusCircleOutlined onClick={(event) => remove(rowIdx, grid)}/>;\n    }\n\n    const isForcedComponent = (column) => {\n        return column.actionColumn;\n    }\n\n    const populateWillInfoGrid = () => {\n        const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const className = column.actionColumn ? \"noborder\" : \"\";\n                columns.push({\n                    value: column.defaultValue,\n                    field: column.field,\n                    required: column.required,\n                    component: null,\n                    forceComponent: isForcedComponent(column),\n                    className: className\n                });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, []);\n        setWellInfoGrid(grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === \"action\" ? component(index, grid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            const className = column.actionColumn ? \"noborder\" : \"\";\n            columns.push({\n                value: column.defaultValue,\n                field: column.field,\n                required: column.required,\n                component: null,\n                forceComponent: isForcedComponent(column),\n                className: className\n            });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid,\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === \"action\" ? component(index, newWellInfoGrid) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === \"action\" ? component(index, updatedGridData) : null\n                return {\n                    ...y,\n                    component: componentData\n                }\n            })\n        }));\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        validatedWellGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isWellInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n\n        if(!isWellInfoValid) {\n            handleWellInfoGridChanged(validatedWellGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues.map((x, index) => {\n                return x.map(y => { \n                    const componentData = y.field === \"action\" ? component(index, props.formValues) : null\n                    return {\n                        ...y,\n                        component: componentData\n                    }\n                })\n            }));\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n            {\n                showConfirmationModal && <ConfirmationModal\n                    isModalVisible={showConfirmationModal}\n                    handleCancel={handleCancel}\n                    handleOk={handleRemoveConfirmed}\n                    modalTitle={\"Delete Row\"}\n                    modalText={\"Are you sure you want to delete this row?\"}\n                    footerButtons={{cancel_text: 'Cancel', confirm_text: 'Yes'}}\n                    data={modalData}\n                >\n                </ConfirmationModal>\n            }\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}