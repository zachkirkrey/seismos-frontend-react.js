{"ast":null,"code":"import { extend } from \"underscore\";\n\nconst getNewValue = (values, prevValue, fieldIndex, index, counter) => {\n  if (index >= fieldIndex) {\n    return values[counter] ? values[counter] : prevValue;\n  } else {\n    return prevValue;\n  }\n};\n\nconst setClipboardValues = (fields, values, fieldIndex) => {\n  let newFieldValues = {};\n  let counter = -1;\n  Object.keys(fields).map((field_key, index) => {\n    newFieldValues = { ...newFieldValues,\n      [field_key]: index >= fieldIndex ? getNewValue(values, fields[field_key], fieldIndex, index, ++counter) : fields[field_key]\n    };\n    return field_key;\n  });\n  return newFieldValues;\n};\n\nconst formatFormValuesFromRowGridData = gridValues => {\n  let fieldVlaues = {};\n  if (!gridValues) return fieldVlaues;\n  gridValues.map(gridRow => {\n    const obj = gridRow.find(val => val.field);\n    console.log(obj.value);\n    const fieldValuePair = {\n      [obj.field]: obj.datatype === 'integer' ? Number(obj.value) : obj.value\n    };\n\n    if (obj.field != \"action\") {\n      fieldVlaues = extend(fieldVlaues, fieldValuePair);\n    }\n\n    return fieldValuePair;\n  });\n  return fieldVlaues;\n};\n\nconst formatFormValuesFromColumnGridData = gridValues => {\n  if (!gridValues) return [];\n  const newValues = gridValues.map(row => {\n    let fieldValues = {};\n    row.map(col => {\n      if (col.field != \"action\") {\n        fieldValues = extend(fieldValues, {\n          [col.field]: col.datatype === 'integer' ? Number(col.value) : col.value\n        });\n      }\n\n      return col;\n    });\n    return fieldValues;\n  });\n  return newValues;\n};\n\nconst ProjectUtil = {\n  setClipboardValues,\n  formatFormValuesFromRowGridData,\n  formatFormValuesFromColumnGridData\n};\nexport default ProjectUtil;","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/ProjectUtil.js"],"names":["extend","getNewValue","values","prevValue","fieldIndex","index","counter","setClipboardValues","fields","newFieldValues","Object","keys","map","field_key","formatFormValuesFromRowGridData","gridValues","fieldVlaues","gridRow","obj","find","val","field","console","log","value","fieldValuePair","datatype","Number","formatFormValuesFromColumnGridData","newValues","row","fieldValues","col","ProjectUtil"],"mappings":"AAAA,SAASA,MAAT,QAAuB,YAAvB;;AAEA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,OAAvC,KAAmD;AACnE,MAAGD,KAAK,IAAID,UAAZ,EAAwB;AACpB,WAAOF,MAAM,CAACI,OAAD,CAAN,GAAkBJ,MAAM,CAACI,OAAD,CAAxB,GAAoCH,SAA3C;AACH,GAFD,MAEO;AACH,WAAOA,SAAP;AACH;AACJ,CAND;;AAQA,MAAMI,kBAAkB,GAAG,CAACC,MAAD,EAASN,MAAT,EAAiBE,UAAjB,KAAgC;AACvD,MAAIK,cAAc,GAAG,EAArB;AACA,MAAIH,OAAO,GAAG,CAAC,CAAf;AACAI,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,GAApB,CAAwB,CAACC,SAAD,EAAYR,KAAZ,KAAsB;AAC1CI,IAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEb,OAACI,SAAD,GAAcR,KAAK,IAAID,UAAV,GAAwBH,WAAW,CAACC,MAAD,EAASM,MAAM,CAACK,SAAD,CAAf,EAA4BT,UAA5B,EAAwCC,KAAxC,EAA+C,EAAEC,OAAjD,CAAnC,GAA+FE,MAAM,CAACK,SAAD;AAFrG,KAAjB;AAIA,WAAOA,SAAP;AACH,GAND;AAOA,SAAOJ,cAAP;AACH,CAXD;;AAaA,MAAMK,+BAA+B,GAAIC,UAAD,IAAgB;AACpD,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAI,CAACD,UAAL,EACI,OAAOC,WAAP;AACJD,EAAAA,UAAU,CAACH,GAAX,CAAeK,OAAO,IAAI;AACtB,UAAMC,GAAG,GAAGD,OAAO,CAACE,IAAR,CAAaC,GAAG,IAAIA,GAAG,CAACC,KAAxB,CAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACM,KAAhB;AACA,UAAMC,cAAc,GAAG;AAAC,OAACP,GAAG,CAACG,KAAL,GAAaH,GAAG,CAACQ,QAAJ,KAAiB,SAAjB,GAA6BC,MAAM,CAACT,GAAG,CAACM,KAAL,CAAnC,GAAiDN,GAAG,CAACM;AAAnE,KAAvB;;AACA,QAAGN,GAAG,CAACG,KAAJ,IAAa,QAAhB,EAA0B;AACtBL,MAAAA,WAAW,GAAGhB,MAAM,CAACgB,WAAD,EAAcS,cAAd,CAApB;AACH;;AACD,WAAOA,cAAP;AACH,GARD;AAUA,SAAOT,WAAP;AACH,CAfD;;AAiBA,MAAMY,kCAAkC,GAAIb,UAAD,IAAgB;AACvD,MAAI,CAACA,UAAL,EACI,OAAO,EAAP;AACJ,QAAMc,SAAS,GAAGd,UAAU,CAACH,GAAX,CAAekB,GAAG,IAAI;AACpC,QAAIC,WAAW,GAAG,EAAlB;AACAD,IAAAA,GAAG,CAAClB,GAAJ,CAAQoB,GAAG,IAAI;AACX,UAAGA,GAAG,CAACX,KAAJ,IAAa,QAAhB,EAA0B;AACtBU,QAAAA,WAAW,GAAG/B,MAAM,CAAC+B,WAAD,EAAc;AAAC,WAACC,GAAG,CAACX,KAAL,GAAaW,GAAG,CAACN,QAAJ,KAAiB,SAAjB,GAA6BC,MAAM,CAACK,GAAG,CAACR,KAAL,CAAnC,GAAiDQ,GAAG,CAACR;AAAnE,SAAd,CAApB;AACH;;AACD,aAAOQ,GAAP;AACH,KALD;AAMA,WAAOD,WAAP;AACH,GATiB,CAAlB;AAWA,SAAOF,SAAP;AACH,CAfD;;AAiBA,MAAMI,WAAW,GAAG;AAChB1B,EAAAA,kBADgB;AAEhBO,EAAAA,+BAFgB;AAGhBc,EAAAA;AAHgB,CAApB;AAMA,eAAeK,WAAf","sourcesContent":["import { extend } from \"underscore\";\n\nconst getNewValue = (values, prevValue, fieldIndex, index, counter) => {\n    if(index >= fieldIndex) {\n        return values[counter] ? values[counter] : prevValue;\n    } else {\n        return prevValue;\n    }\n}\n\nconst setClipboardValues = (fields, values, fieldIndex) => {\n    let newFieldValues = {};\n    let counter = -1;\n    Object.keys(fields).map((field_key, index) => {\n        newFieldValues = {\n            ...newFieldValues,\n            [field_key]: (index >= fieldIndex) ? getNewValue(values, fields[field_key], fieldIndex, index, ++counter) : fields[field_key],\n        }\n        return field_key;\n    });\n    return newFieldValues;\n}\n\nconst formatFormValuesFromRowGridData = (gridValues) => {\n    let fieldVlaues = {};\n    if (!gridValues)\n        return fieldVlaues;\n    gridValues.map(gridRow => {\n        const obj = gridRow.find(val => val.field);\n        console.log(obj.value)\n        const fieldValuePair = {[obj.field]: obj.datatype === 'integer' ? Number(obj.value) : obj.value};\n        if(obj.field != \"action\") {\n            fieldVlaues = extend(fieldVlaues, fieldValuePair);\n        }\n        return fieldValuePair;\n    });\n\n    return fieldVlaues;\n}\n\nconst formatFormValuesFromColumnGridData = (gridValues) => {\n    if (!gridValues)\n        return [];\n    const newValues = gridValues.map(row => {\n        let fieldValues = {};\n        row.map(col => {\n            if(col.field != \"action\") {\n                fieldValues = extend(fieldValues, {[col.field]: col.datatype === 'integer' ? Number(col.value) : col.value})\n            }\n            return col;\n        })\n        return fieldValues;\n    });\n\n    return newValues;\n}\n\nconst ProjectUtil = {\n    setClipboardValues,\n    formatFormValuesFromRowGridData,\n    formatFormValuesFromColumnGridData\n}\n\nexport default ProjectUtil;"]},"metadata":{},"sourceType":"module"}