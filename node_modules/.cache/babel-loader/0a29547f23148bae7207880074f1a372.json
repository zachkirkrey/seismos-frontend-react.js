{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Grid.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst wellInfo = [{\n  well_name: 'Well 1',\n  well_api: '',\n  formation: '',\n  lat: '',\n  easting: '',\n  northing: ''\n}, {\n  well_name: 'Well 2',\n  well_api: '',\n  formation: '',\n  lat: '',\n  easting: '',\n  northing: ''\n}, {\n  well_name: 'Well 3',\n  well_api: '',\n  formation: '',\n  lat: '',\n  easting: '',\n  northing: ''\n}];\n\nconst SheetRenderer = props => {\n  const {\n    className,\n    columns\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          className: `cell ${className}`,\n          style: {\n            width: col.width,\n            background: \"#f9f9f9\",\n            padding: \"10px 0px\",\n            textAlign: \"center\"\n          },\n          children: col.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SheetRenderer;\n\nconst CellRenderer = props => {\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"cell\",\n    style: {\n      textAlign: \"center\"\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = CellRenderer;\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [{\n        label: \"Well name\",\n        width: \"15%\"\n      }, {\n        label: \"Well API\",\n        width: \"17%\"\n      }, {\n        label: \"Formation\",\n        width: \"17%\"\n      }, {\n        label: \"Lat\",\n        width: \"17%\"\n      }, {\n        label: \"Easting\",\n        width: \"17%\"\n      }, {\n        label: \"Northing\",\n        width: \"17%\"\n      }],\n      grid: wellInfo.reduce((rows, t, rowIdx) => {\n        const newRow = {\n          value: t.well_name,\n          value: t.well_api,\n          value: t.formation,\n          value: t.lat,\n          value: t.easting,\n          value: t.northing\n        };\n        return rows.concat(newRow);\n      }, [])\n    };\n    this.renderSheet = this.renderSheet.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n  }\n\n  renderSheet(props) {\n    return /*#__PURE__*/_jsxDEV(SheetRenderer, {\n      columns: this.state.columns,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderRow(props) {\n    const {\n      row,\n      cells,\n      ...rest\n    } = props;\n    return /*#__PURE__*/_jsxDEV(CellRenderer, {\n      rowIndex: row,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  }\n\n  render() {\n    console.log(this.state.grid);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n        data: this.state.grid,\n        valueRenderer: cell => cell.value,\n        sheetRenderer: this.renderSheet // cellRenderer={this.renderRow}\n        ,\n        onCellsChanged: changes => {\n          const grid = this.state.grid.map(row => [...row]);\n          changes.forEach(({\n            cell,\n            row,\n            col,\n            value\n          }) => {\n            grid[row][col] = { ...grid[row][col],\n              value\n            };\n          });\n          this.setState({\n            grid\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Grid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SheetRenderer\");\n$RefreshReg$(_c2, \"CellRenderer\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Grid.js"],"names":["React","ReactDOM","ReactDataSheet","wellInfo","well_name","well_api","formation","lat","easting","northing","SheetRenderer","props","className","columns","map","col","index","width","background","padding","textAlign","label","children","CellRenderer","Grid","Component","constructor","state","grid","reduce","rows","t","rowIdx","newRow","value","concat","renderSheet","bind","renderRow","row","cells","rest","render","console","log","cell","changes","forEach","setState"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\n\nconst wellInfo = [\n    {\n        well_name: 'Well 1',\n        well_api: '',\n        formation: '',\n        lat: '',\n        easting: '',\n        northing: '',\n    },\n    {\n        well_name: 'Well 2',\n        well_api: '',\n        formation: '',\n        lat: '',\n        easting: '',\n        northing: '',\n    },\n    {\n        well_name: 'Well 3',\n        well_api: '',\n        formation: '',\n        lat: '',\n        easting: '',\n        northing: '',\n    }\n];\n\nconst SheetRenderer = props => {\n  const { className, columns } = props;\n  return (\n    <table className={className}>\n      <thead>\n        <tr>\n          {columns.map((col, index) => (\n            <th\n              className={`cell ${className}`}\n              style={{\n                width: col.width,\n                background: \"#f9f9f9\",\n                padding: \"10px 0px\",\n                textAlign: \"center\"\n              }}\n            >\n              {col.label}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>{props.children}</tbody>\n    </table>\n  );\n};\n\nconst CellRenderer = props => {\n  const { children } = props;\n  return (\n    <td className=\"cell\" style={{ textAlign: \"center\" }}>\n      {children}\n    </td>\n  );\n};\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { label: \"Well name\", width: \"15%\" },\n        { label: \"Well API\", width: \"17%\" },\n        { label: \"Formation\", width: \"17%\" },\n        { label: \"Lat\", width: \"17%\" },\n        { label: \"Easting\", width: \"17%\" },\n        { label: \"Northing\", width: \"17%\" },\n      ],\n      grid: wellInfo.reduce((rows, t, rowIdx) => {\n        const newRow = {\n            value: t.well_name,\n            value: t.well_api,\n            value: t.formation,\n            value: t.lat,\n            value: t.easting,\n            value: t.northing,\n        }\n\n        return rows.concat(newRow);\n      }, [])\n    };\n\n    this.renderSheet = this.renderSheet.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n  }\n\n  renderSheet(props) {\n    return <SheetRenderer columns={this.state.columns} {...props} />;\n  }\n\n  renderRow(props) {\n    const { row, cells, ...rest } = props;\n    return <CellRenderer rowIndex={row} {...rest} />;\n  }\n\n  render() {\n    console.log(this.state.grid);\n    return (\n      <div style={{ width: \"100%\" }}>\n        <ReactDataSheet\n          data={this.state.grid}\n          valueRenderer={cell => cell.value}\n          sheetRenderer={this.renderSheet}\n          // cellRenderer={this.renderRow}\n          onCellsChanged={changes => {\n            const grid = this.state.grid.map(row => [...row]);\n            changes.forEach(({ cell, row, col, value }) => {\n              grid[row][col] = { ...grid[row][col], value };\n            });\n            this.setState({ grid });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}