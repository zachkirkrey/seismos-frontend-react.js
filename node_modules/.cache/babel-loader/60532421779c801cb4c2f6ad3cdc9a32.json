{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Grid.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport DataGrid from \"react-data-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groupings = [{\n  title: \"Assets\",\n  descriptions: [\"$ Allowance for Loan Losses\", \"$ Restricted Cash\", \"$ Current Assets\", \"$ Total Assets\", \"$ Unrestricted Cash & Cash Equivalents\", \"$ Current Portion of Notes Receiveable\"]\n}, {\n  title: \"Assets2\",\n  descriptions: [\"$ Allowance for Loan Losses\", \"$ Restricted Cash\", \"$ Current Assets\", \"$ Total Assets\", \"$ Unrestricted Cash & Cash Equivalents\", \"$ Current Portion of Notes Receiveable\"]\n}];\nconst columns = [{\n  key: \"category\",\n  name: \"Category\"\n}, {\n  key: \"description\",\n  name: \"Description\"\n}, {\n  key: \"2016\",\n  name: \"2016\",\n  editable: true\n}, {\n  key: \"2017\",\n  name: \"2017\",\n  editable: true\n}, {\n  key: \"2018\",\n  name: \"2018\",\n  editable: true\n}, {\n  key: \"2019\",\n  name: \"2019\",\n  editable: true\n}, {\n  key: \"projected\",\n  name: \"Projected\",\n  editable: true\n}];\nconst rows = groupings.reduce((rows, t) => {\n  const descripts = t.descriptions.map((d, idx) => {\n    return {\n      category: idx === 0 ? t.title : \"\",\n      description: d,\n      \"2016\": \"$0.00\",\n      \"2017\": \"$0.00\",\n      \"2018\": \"$0.00\",\n      \"2019\": \"$0.00\",\n      projected: \"$0.00\"\n    };\n  });\n  return rows.concat(descripts);\n}, []);\n\nconst defaultParsePaste = str => str.split(/\\r\\n|\\n|\\r/).map(row => row.split(\"\\t\"));\n\nclass GridOne extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.removeAllListeners = () => {\n      document.removeEventListener(\"paste\", this.handlePaste);\n    };\n\n    this.handlePaste = e => {\n      console.debug(\"handlePaste Called\");\n      e.preventDefault();\n      const {\n        topLeft\n      } = this.state;\n      const newRows = [];\n      const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n      console.debug(\"pasteData\", pasteData);\n      pasteData.forEach(row => {\n        const rowData = {}; // Merge the values from pasting and the keys from the columns\n\n        columns.slice(topLeft.colIdx, topLeft.colIdx + row.length).forEach((col, j) => {\n          // Create the key-value pair for the row\n          rowData[col.key] = row[j];\n        }); // Push the new row to the changes\n\n        newRows.push(rowData);\n      });\n      console.debug(\"newRows\", newRows);\n      this.updateRows(topLeft.rowIdx, newRows);\n    };\n\n    this.onGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated,\n      action\n    }) => {\n      console.debug(\"onGridRowsUpdated!\", action);\n      console.debug(\"updated\", updated);\n\n      if (action !== \"COPY_PASTE\") {\n        this.setState(state => {\n          const rows = state.rows.slice();\n\n          for (let i = fromRow; i <= toRow; i++) {\n            rows[i] = { ...rows[i],\n              ...updated\n            };\n          }\n\n          return {\n            rows\n          };\n        });\n      }\n    };\n\n    this.setSelection = args => {\n      this.setState({\n        topLeft: {\n          rowIdx: args.topLeft.rowIdx,\n          colIdx: args.topLeft.idx\n        },\n        botRight: {\n          rowIdx: args.bottomRight.rowIdx,\n          colIdx: args.bottomRight.idx\n        }\n      });\n    };\n\n    this.updateRows = (startIdx, newRows) => {\n      this.setState(state => {\n        const rows = state.rows.slice();\n\n        for (let i = 0; i < newRows.length; i++) {\n          if (startIdx + i < rows.length) {\n            rows[startIdx + i] = { ...rows[startIdx + i],\n              ...newRows[i]\n            };\n          }\n        }\n\n        return {\n          rows\n        };\n      });\n    };\n\n    this.state = {\n      rows: rows,\n      topLeft: {},\n      botRight: {}\n    }; // Copy paste event handler\n\n    document.addEventListener(\"copy\", this.handleCopy);\n    document.addEventListener(\"paste\", this.handlePaste);\n  }\n\n  componentWillUnmount() {\n    this.removeAllListeners();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: columns,\n      rowGetter: i => this.state.rows[i],\n      rowsCount: rows.length,\n      onGridRowsUpdated: this.onGridRowsUpdated,\n      enableCellSelect: true,\n      cellRangeSelection: {\n        onComplete: this.setSelection\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GridOne;","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Grid.js"],"names":["React","ReactDOM","DataGrid","groupings","title","descriptions","columns","key","name","editable","rows","reduce","t","descripts","map","d","idx","category","description","projected","concat","defaultParsePaste","str","split","row","GridOne","Component","constructor","props","removeAllListeners","document","removeEventListener","handlePaste","e","console","debug","preventDefault","topLeft","state","newRows","pasteData","clipboardData","getData","forEach","rowData","slice","colIdx","length","col","j","push","updateRows","rowIdx","onGridRowsUpdated","fromRow","toRow","updated","action","setState","i","setSelection","args","botRight","bottomRight","startIdx","addEventListener","handleCopy","componentWillUnmount","render","onComplete"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport DataGrid from \"react-data-grid\";\n\nconst groupings = [\n  {\n    title: \"Assets\",\n    descriptions: [\n      \"$ Allowance for Loan Losses\",\n      \"$ Restricted Cash\",\n      \"$ Current Assets\",\n      \"$ Total Assets\",\n      \"$ Unrestricted Cash & Cash Equivalents\",\n      \"$ Current Portion of Notes Receiveable\"\n    ]\n  },\n  {\n    title: \"Assets2\",\n    descriptions: [\n      \"$ Allowance for Loan Losses\",\n      \"$ Restricted Cash\",\n      \"$ Current Assets\",\n      \"$ Total Assets\",\n      \"$ Unrestricted Cash & Cash Equivalents\",\n      \"$ Current Portion of Notes Receiveable\"\n    ]\n  }\n];\n\nconst columns = [\n  { key: \"category\", name: \"Category\" },\n  { key: \"description\", name: \"Description\" },\n  { key: \"2016\", name: \"2016\", editable: true },\n  { key: \"2017\", name: \"2017\", editable: true },\n  { key: \"2018\", name: \"2018\", editable: true },\n  { key: \"2019\", name: \"2019\", editable: true },\n  { key: \"projected\", name: \"Projected\", editable: true }\n];\n\nconst rows = groupings.reduce((rows, t) => {\n  const descripts = t.descriptions.map((d, idx) => {\n    return {\n      category: idx === 0 ? t.title : \"\",\n      description: d,\n      \"2016\": \"$0.00\",\n      \"2017\": \"$0.00\",\n      \"2018\": \"$0.00\",\n      \"2019\": \"$0.00\",\n      projected: \"$0.00\"\n    };\n  });\n\n  return rows.concat(descripts);\n}, []);\n\nconst defaultParsePaste = str =>\n  str.split(/\\r\\n|\\n|\\r/).map(row => row.split(\"\\t\"));\n\nclass GridOne extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: rows,\n      topLeft: {},\n      botRight: {}\n    };\n\n    // Copy paste event handler\n    document.addEventListener(\"copy\", this.handleCopy);\n    document.addEventListener(\"paste\", this.handlePaste);\n  }\n\n  componentWillUnmount() {\n    this.removeAllListeners();\n  }\n\n  removeAllListeners = () => {\n    document.removeEventListener(\"paste\", this.handlePaste);\n  };\n\n  handlePaste = e => {\n    console.debug(\"handlePaste Called\");\n    e.preventDefault();\n    const { topLeft } = this.state;\n\n    const newRows = [];\n    const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n\n    console.debug(\"pasteData\", pasteData);\n\n    pasteData.forEach(row => {\n      const rowData = {};\n      // Merge the values from pasting and the keys from the columns\n      columns\n        .slice(topLeft.colIdx, topLeft.colIdx + row.length)\n        .forEach((col, j) => {\n          // Create the key-value pair for the row\n          rowData[col.key] = row[j];\n        });\n      // Push the new row to the changes\n      newRows.push(rowData);\n    });\n\n    console.debug(\"newRows\", newRows);\n\n    this.updateRows(topLeft.rowIdx, newRows);\n  };\n\n  onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\n    console.debug(\"onGridRowsUpdated!\", action);\n    console.debug(\"updated\", updated);\n    if (action !== \"COPY_PASTE\") {\n      this.setState(state => {\n        const rows = state.rows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = { ...rows[i], ...updated };\n        }\n        return { rows };\n      });\n    }\n  };\n\n  setSelection = args => {\n    this.setState({\n      topLeft: {\n        rowIdx: args.topLeft.rowIdx,\n        colIdx: args.topLeft.idx\n      },\n      botRight: {\n        rowIdx: args.bottomRight.rowIdx,\n        colIdx: args.bottomRight.idx\n      }\n    });\n  };\n\n  updateRows = (startIdx, newRows) => {\n    this.setState(state => {\n      const rows = state.rows.slice();\n      for (let i = 0; i < newRows.length; i++) {\n        if (startIdx + i < rows.length) {\n          rows[startIdx + i] = { ...rows[startIdx + i], ...newRows[i] };\n        }\n      }\n      return { rows };\n    });\n  };\n\n  render() {\n    return (\n      <DataGrid\n        columns={columns}\n        rowGetter={i => this.state.rows[i]}\n        rowsCount={rows.length}\n        onGridRowsUpdated={this.onGridRowsUpdated}\n        enableCellSelect={true}\n        cellRangeSelection={{\n          onComplete: this.setSelection\n        }}\n      />\n    );\n  }\n}\n\nexport default GridOne;\n"]},"metadata":{},"sourceType":"module"}