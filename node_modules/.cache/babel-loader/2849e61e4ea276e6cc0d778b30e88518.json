{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CrewInfo(props) {\n  _s();\n\n  const [crewInfoGrid, setCrewInfoGrid] = useState([]);\n\n  const getCrewInfoGridRow = t => {\n    return t.rows.map(row => {\n      const columns = [];\n      TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n        const defaultVal = column.field === \"role\" ? row.label : \"\";\n        const readOnly = column.field === \"role\" ? true : false;\n        const disableEvents = column.field === \"role\" ? true : false;\n        columns.push({\n          value: defaultVal,\n          field: column.field,\n          readOnly: readOnly,\n          disableEvents: disableEvents\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const populateCrewInfoGrid = () => {\n    setCrewInfoGrid(TableHeadersUtil.crewInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getCrewInfoGridRow(t));\n    }, []));\n  }; // const addNewCrew = (e) => {\n  //     e.preventDefault();\n  //     const newCrewInfoGrid = [\n  //         ...crewInfoGrid,\n  //         [\n  //             { value: \"Field engineer\", readOnly: true},\n  //             { value: \"\" },\n  //             { value: \"\" }\n  //         ]\n  //     ];\n  //     setCrewInfoGrid(newCrewInfoGrid);\n  // }\n\n\n  const handleCrewInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setCrewInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    props.next();\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setCrewInfoGrid(props.formValues);\n    } else {\n      populateCrewInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        width: '70%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.crewInfoFormTableData.columns,\n        grid: crewInfoGrid,\n        gridValueChanged: handleCrewInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CrewInfo, \"F7LIhAjVO+cSR9fDIoZby06RyGM=\");\n\n_c = CrewInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CrewInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","CrewInfo","props","crewInfoGrid","setCrewInfoGrid","getCrewInfoGridRow","t","rows","map","row","columns","crewInfoFormTableData","column","defaultVal","field","label","readOnly","disableEvents","push","value","populateCrewInfoGrid","grid","reduce","rowIdx","concat","handleCrewInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","next","formValues","width","marginLeft","marginRight","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAEpC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMQ,kBAAkB,GAAIC,CAAD,IAAO;AAC9B,WAAOA,CAAC,CAACC,IAAF,CAAOC,GAAP,CAAWC,GAAG,IAAI;AACrB,YAAMC,OAAO,GAAG,EAAhB;AACAX,MAAAA,gBAAgB,CAACY,qBAAjB,CAAuCD,OAAvC,CAA+CF,GAA/C,CAAmDI,MAAM,IAAI;AACzD,cAAMC,UAAU,GAAGD,MAAM,CAACE,KAAP,KAAiB,MAAjB,GAA0BL,GAAG,CAACM,KAA9B,GAAsC,EAAzD;AACA,cAAMC,QAAQ,GAAGJ,MAAM,CAACE,KAAP,KAAiB,MAAjB,GAA0B,IAA1B,GAAiC,KAAlD;AACA,cAAMG,aAAa,GAAGL,MAAM,CAACE,KAAP,KAAiB,MAAjB,GAA0B,IAA1B,GAAiC,KAAvD;AACAJ,QAAAA,OAAO,CAACQ,IAAR,CAAa;AAAEC,UAAAA,KAAK,EAAEN,UAAT;AAAqBC,UAAAA,KAAK,EAAEF,MAAM,CAACE,KAAnC;AAA0CE,UAAAA,QAAQ,EAAEA,QAApD;AAA8DC,UAAAA,aAAa,EAAEA;AAA7E,SAAb;AACA,eAAOL,MAAP;AACH,OAND;AAOA,aAAOF,OAAP;AACH,KAVM,CAAP;AAWH,GAZD;;AAcA,QAAMU,oBAAoB,GAAG,MAAM;AAC/BhB,IAAAA,eAAe,CAACL,gBAAgB,CAACY,qBAAjB,CAAuCU,IAAvC,CAA4CC,MAA5C,CAAmD,CAACf,IAAD,EAAOD,CAAP,EAAUiB,MAAV,KAAqB;AACpF,aAAOhB,IAAI,CAACiB,MAAL,CAAYnB,kBAAkB,CAACC,CAAD,CAA9B,CAAP;AACH,KAFe,EAEb,EAFa,CAAD,CAAf;AAGH,GAJD,CAlBoC,CAwBpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMmB,yBAAyB,GAAIC,eAAD,IAAqB;AACnDxB,IAAAA,KAAK,CAACyB,YAAN,CAAmBD,eAAnB;AACAtB,IAAAA,eAAe,CAACsB,eAAD,CAAf;AACH,GAHD;;AAKA,QAAME,YAAY,GAAG,MAAM;AACvB1B,IAAAA,KAAK,CAAC2B,IAAN;AACH,GAFD;;AAIAhC,EAAAA,QAAQ,CAAC,MAAM;AACX,QAAGK,KAAK,CAAC4B,UAAN,IAAoB,IAAvB,EAA6B;AACzB5B,MAAAA,KAAK,CAAC4B,UAAN,IAAoB1B,eAAe,CAACF,KAAK,CAAC4B,UAAP,CAAnC;AACH,KAFD,MAEO;AACHV,MAAAA,oBAAoB;AACvB;AACJ,GANO,EAMLlB,KANK,CAAR;AAQA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAE;AAAC6B,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,UAAU,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OAA7B;AAAA,6BACI,QAAC,IAAD;AACI,QAAA,OAAO,EAAElC,gBAAgB,CAACY,qBAAjB,CAAuCD,OADpD;AAEI,QAAA,IAAI,EAAEP,YAFV;AAGI,QAAA,gBAAgB,EAAEsB;AAHtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eASI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO,EAAGS,CAAD,IAAO;AAACN,UAAAA,YAAY;AAAG,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAiBH;;GAvEuB3B,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\n\nexport default function CrewInfo(props) {\n    \n    const [crewInfoGrid, setCrewInfoGrid] = useState([]);\n\n    const getCrewInfoGridRow = (t) => {\n        return t.rows.map(row => {\n            const columns = [];\n            TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"role\" ? row.label : \"\";\n                const readOnly = column.field === \"role\" ? true : false;\n                const disableEvents = column.field === \"role\" ? true : false;\n                columns.push({ value: defaultVal, field: column.field, readOnly: readOnly, disableEvents: disableEvents});\n                return column;\n            })\n            return columns;\n        })\n    }\n\n    const populateCrewInfoGrid = () => {\n        setCrewInfoGrid(TableHeadersUtil.crewInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getCrewInfoGridRow(t));\n        }, []));\n    }\n\n    // const addNewCrew = (e) => {\n    //     e.preventDefault();\n    //     const newCrewInfoGrid = [\n    //         ...crewInfoGrid,\n    //         [\n    //             { value: \"Field engineer\", readOnly: true},\n    //             { value: \"\" },\n    //             { value: \"\" }\n    //         ]\n    //     ];\n    //     setCrewInfoGrid(newCrewInfoGrid);\n    // }\n\n    const handleCrewInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setCrewInfoGrid(updatedGridData)\n    }\n\n    const gotoNextStep = () => {\n        props.next();\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setCrewInfoGrid(props.formValues);\n        } else {\n            populateCrewInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '70%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.crewInfoFormTableData.columns}\n                    grid={crewInfoGrid}\n                    gridValueChanged={handleCrewInfoGridChanged}\n                ></Grid>\n                {/* <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewCrew(e)}>+ Add a new client</div> */}\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}