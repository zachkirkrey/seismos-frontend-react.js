{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ClientInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport PasswordInput from \"components/Grid/DataEditor/PasswordInput\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClientInfo(props) {\n  _s();\n\n  const [clientInfoGrid, setClientInfoGrid] = useState([]);\n  const [showConfirmationModal, setShowConfirmationModal] = useState();\n  const [modalData, setModalData] = useState();\n\n  const remove = (rowIdx, grid) => {\n    setShowConfirmationModal(true);\n    setModalData({\n      rowIdx,\n      grid\n    });\n  };\n\n  const handleCancel = () => {\n    setShowConfirmationModal(false);\n    setModalData(null);\n  };\n\n  const handleRemoveConfirmed = data => {\n    data.grid.splice(data.rowIdx, 1);\n    setClientInfoGrid(data.grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, data.grid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n        };\n      });\n    }));\n    setShowConfirmationModal(false);\n    setModalData(null);\n  };\n\n  const component = (rowIdx, grid) => {\n    return /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: event => remove(rowIdx, grid)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  };\n\n  const getClientInfoGridRow = t => {\n    return t.rows.map(label => {\n      const columns = [];\n      TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n        columns.push({\n          value: \"\",\n          field: column.field,\n          required: column.required,\n          dataEditor: column.field === ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n          className: column.field === ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? 'password-cell' : column.className\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const populateClientInfoGrid = () => {\n    const grid = TableHeadersUtil.clientInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getClientInfoGridRow(t));\n    }, []);\n    setClientInfoGrid(grid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, grid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  };\n\n  const addNewClient = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n      columns.push({\n        value: \"\",\n        field: column.field,\n        required: column.required,\n        dataEditor: column.field === ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n        className: column.field === ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? 'password-cell' : column.className\n      });\n      return column;\n    });\n    const newClientInfoGrid = [...clientInfoGrid, columns];\n    setClientInfoGrid(newClientInfoGrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, newClientInfoGrid) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  };\n\n  const handleClientInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setClientInfoGrid(updatedGridData.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, updatedGridData) : null;\n        return { ...y,\n          component: componentData,\n          forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n        };\n      });\n    }));\n  };\n\n  const gotoNextStep = () => {\n    let isClientInfoValid = true;\n\n    const validatedClientGrid = _.cloneDeep(clientInfoGrid);\n\n    validatedClientGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isClientInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isClientInfoValid) {\n      handleClientInfoGridChanged(validatedClientGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setClientInfoGrid(props.formValues.map((x, index) => {\n        return x.map(y => {\n          const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, props.formValues) : null;\n          return { ...y,\n            component: componentData,\n            forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n          };\n        });\n      }));\n    } else {\n      populateClientInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        width: '60%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.clientInfoFormTableData.columns,\n        grid: clientInfoGrid,\n        gridValueChanged: handleClientInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewClient(e),\n        children: \"+ Add a new client\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), showConfirmationModal && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      isModalVisible: showConfirmationModal,\n      handleCancel: handleCancel,\n      handleOk: handleRemoveConfirmed,\n      modalTitle: \"Delete Row\",\n      modalText: \"Are you sure you want to delete this row?\",\n      footerButtons: {\n        cancel_text: 'Cancel',\n        confirm_text: 'Yes'\n      },\n      data: modalData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClientInfo, \"avnbIVm4LPUcv3RbqaiGZriOpd4=\");\n\n_c = ClientInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ClientInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","PasswordInput","_","ENUMS","MinusCircleOutlined","ConfirmationModal","ClientInfo","props","clientInfoGrid","setClientInfoGrid","showConfirmationModal","setShowConfirmationModal","modalData","setModalData","remove","rowIdx","grid","handleCancel","handleRemoveConfirmed","data","splice","map","x","index","y","componentData","field","FORM_FIELDS","CLIENT_INFO","ACTION","component","forceComponent","event","getClientInfoGridRow","t","rows","label","columns","clientInfoFormTableData","column","push","value","required","dataEditor","PASSWORD","className","populateClientInfoGrid","reduce","concat","addNewClient","e","preventDefault","newClientInfoGrid","handleClientInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isClientInfoValid","validatedClientGrid","cloneDeep","row","cell","next","formValues","width","marginLeft","marginRight","cancel_text","confirm_text"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport PasswordInput from \"components/Grid/DataEditor/PasswordInput\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\n\nexport default function ClientInfo(props) {\n    \n    const [clientInfoGrid, setClientInfoGrid] = useState([]);\n    const [showConfirmationModal, setShowConfirmationModal] = useState();\n    const [modalData, setModalData] = useState();\n\n    const remove = (rowIdx, grid) => {\n        setShowConfirmationModal(true);\n        setModalData({\n            rowIdx,\n            grid\n        })\n    }\n\n    const handleCancel = () => {\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n\n    const handleRemoveConfirmed = (data) => {\n        data.grid.splice(data.rowIdx, 1);\n        setClientInfoGrid(data.grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, data.grid) : null;\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                }\n            })\n        }));\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n    \n    const component = (rowIdx, grid) => {\n        return <MinusCircleOutlined onClick={(event) => remove(rowIdx, grid)}/>;\n    }\n\n    const getClientInfoGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n                columns.push({\n                    value: \"\",\n                    field: column.field,\n                    required: column.required,\n                    dataEditor: column.field === ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n                    className: column.field === ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? 'password-cell': column.className\n                });\n                return column;\n            })\n            return columns;\n        })\n    }\n\n    const populateClientInfoGrid = () => {\n        const grid = TableHeadersUtil.clientInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getClientInfoGridRow(t));\n        }, [])\n        setClientInfoGrid(grid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, grid) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                }\n            })\n        }));\n    }\n\n    const addNewClient = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n            columns.push({ \n                value: \"\",\n                field: column.field,\n                required: column.required,\n                dataEditor: column.field === ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n                className: column.field === ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? 'password-cell' : column.className\n            });\n            return column;\n        })\n        const newClientInfoGrid = [\n            ...clientInfoGrid,\n            columns\n        ];\n        setClientInfoGrid(newClientInfoGrid.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, newClientInfoGrid) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                }\n            })\n        }));\n    }\n\n    const handleClientInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setClientInfoGrid(updatedGridData.map((x, index) => {\n            return x.map(y => { \n                const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, updatedGridData) : null\n                return {\n                    ...y,\n                    component: componentData,\n                    forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                }\n            })\n        }));\n    }\n\n    const gotoNextStep = () => {\n        let isClientInfoValid = true;\n        const validatedClientGrid = _.cloneDeep(clientInfoGrid);\n        validatedClientGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isClientInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        });\n\n        if(!isClientInfoValid) {\n            handleClientInfoGridChanged(validatedClientGrid);\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setClientInfoGrid(props.formValues.map((x, index) => {\n                return x.map(y => { \n                    const componentData = y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? component(index, props.formValues) : null\n                    return {\n                        ...y,\n                        component: componentData,\n                        forceComponent: y.field === ENUMS.FORM_FIELDS.CLIENT_INFO.ACTION ? true : false\n                    }\n                })\n            }));\n        } else {\n            populateClientInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '60%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.clientInfoFormTableData.columns}\n                    grid={clientInfoGrid}\n                    gridValueChanged={handleClientInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewClient(e)}>+ Add a new client</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n            {\n                showConfirmationModal && <ConfirmationModal\n                    isModalVisible={showConfirmationModal}\n                    handleCancel={handleCancel}\n                    handleOk={handleRemoveConfirmed}\n                    modalTitle={\"Delete Row\"}\n                    modalText={\"Are you sure you want to delete this row?\"}\n                    footerButtons={{cancel_text: 'Cancel', confirm_text: 'Yes'}}\n                    data={modalData}\n                >\n                </ConfirmationModal>\n            }\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}