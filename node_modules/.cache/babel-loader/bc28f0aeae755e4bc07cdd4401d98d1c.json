{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SheetRenderer = props => {\n  const {\n    className,\n    columns\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: className + \" seismos-spreadsheet-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          className: `cell ${className}`,\n          style: {\n            width: col.width,\n            background: \"#f9f9f9\",\n            padding: \"10px 0px\",\n            textAlign: \"center\"\n          },\n          colSpan: col.colSpan ? col.colSpan : 1,\n          children: col.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}; // TODO: REMOVE\n// const CellRenderer = props => {\n//     const { children } = props;\n//     return (\n//         <td className=\"cell\" style={{ textAlign: \"center\" }}>\n//             {children}\n//         </td>\n//     );\n// };\n\n\n_c = SheetRenderer;\nexport default function Gxrid(props) {\n  _s();\n\n  const [columns, setColumns] = useState();\n  const [grid, setGrid] = useState();\n\n  const renderSheet = sheetProps => {\n    return /*#__PURE__*/_jsxDEV(SheetRenderer, {\n      columns: columns,\n      ...sheetProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }, this);\n  }; // TODO: REMOVE\n  // const renderRow = (rowProps) => {\n  //     const { row, cells, ...rest } = rowProps;\n  //     return <CellRenderer rowIndex={row} {...rest} />;\n  // }\n\n\n  useEffect(() => {\n    setColumns(props.columns);\n    setGrid(props.grid);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: props.width ? props.width : \"100%\"\n    },\n    children: grid && /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n      data: grid,\n      valueRenderer: cell => cell.value,\n      sheetRenderer: renderSheet,\n      className: props.className,\n      isCellNavigable: (cell, row, col) => {\n        return !cell.disableEvents ? true : false;\n      } // cellRenderer={renderRow}\n      ,\n      onCellsChanged: changes => {\n        const gridData = grid.map(row => [...row]);\n        changes.forEach(({\n          cell,\n          row,\n          col,\n          value\n        }) => {\n          gridData[row][col] = { ...gridData[row][col],\n            value\n          };\n        });\n        setGrid(gridData);\n        props.gridValueChanged(gridData);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Gxrid, \"MZoDtHo1giPfeM50l2VPHULcZj0=\");\n\n_c2 = Gxrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SheetRenderer\");\n$RefreshReg$(_c2, \"Gxrid\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/Grid.js"],"names":["React","useEffect","useState","ReactDataSheet","SheetRenderer","props","className","columns","map","col","index","width","background","padding","textAlign","colSpan","label","children","Gxrid","setColumns","grid","setGrid","renderSheet","sheetProps","cell","value","row","disableEvents","changes","gridData","forEach","gridValueChanged"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./Grid.css\";\n\nconst SheetRenderer = props => {\n    const { className, columns } = props;\n    \n    return (\n        <table className={className + \" seismos-spreadsheet-grid\"}>\n            <thead>\n                <tr>\n                {columns.map((col, index) => (\n                    <th\n                        key={index}\n                        className={`cell ${className}`}\n                        style={{\n                            width: col.width,\n                            background: \"#f9f9f9\",\n                            padding: \"10px 0px\",\n                            textAlign: \"center\"\n                        }}\n                        colSpan={col.colSpan ? col.colSpan : 1}\n                    >\n                        {col.label}\n                    </th>\n                ))}\n                </tr>\n            </thead>\n            <tbody>{props.children}</tbody>\n        </table>\n    );\n};\n\n// TODO: REMOVE\n// const CellRenderer = props => {\n//     const { children } = props;\n\n//     return (\n//         <td className=\"cell\" style={{ textAlign: \"center\" }}>\n//             {children}\n//         </td>\n//     );\n// };\n\nexport default function Gxrid(props) {\n\n    const [columns, setColumns] = useState();\n    const [grid, setGrid] = useState();\n\n    const renderSheet = (sheetProps) => {\n        return <SheetRenderer columns={columns} {...sheetProps} />;\n    }\n\n    // TODO: REMOVE\n    // const renderRow = (rowProps) => {\n    //     const { row, cells, ...rest } = rowProps;\n    //     return <CellRenderer rowIndex={row} {...rest} />;\n    // }\n\n    useEffect(() => {\n        setColumns(props.columns);\n        setGrid(props.grid);\n    }, [props]);\n\n    return (\n        <div style={{ width: props.width ? props.width : \"100%\" }}>\n            {grid && <ReactDataSheet\n                data={grid}\n                valueRenderer={cell => cell.value}\n                sheetRenderer={renderSheet}\n                className={props.className}\n                isCellNavigable={(cell, row, col) => {return !cell.disableEvents ? true : false}}\n                // cellRenderer={renderRow}\n                onCellsChanged={changes => {\n                    const gridData = grid.map(row => [...row]);\n                        changes.forEach(({ cell, row, col, value }) => {\n                        gridData[row][col] = { ...gridData[row][col], value };\n                    });\n                    setGrid(gridData);\n                    props.gridValueChanged(gridData);\n                }}\n            />}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}