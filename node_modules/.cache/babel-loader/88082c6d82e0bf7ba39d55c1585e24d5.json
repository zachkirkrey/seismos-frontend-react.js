{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport SelectEditor from \"components/Grid/DataEditor/SelectEditor\";\nimport _ from \"lodash\";\nimport APP_CONSTANTS from \"constants/appConstants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CrewInfo(props) {\n  _s();\n\n  const [crewInfoGrid, setCrewInfoGrid] = useState([]);\n\n  const FillViewer = props => {\n    const {\n      value\n    } = props;\n    const foundOption = APP_CONSTANTS.ROLE_OPTIONS.find(op => value === value);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell-text-view\",\n      children: foundOption ? foundOption.label : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this);\n  };\n\n  const getCrewInfoGridRow = t => {\n    return t.rows.map(row => {\n      const columns = [];\n      TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n        let col = {};\n\n        if (column.field === \"role\") {\n          col = {\n            value: row.label,\n            field: column.field,\n            dataEditor: SelectEditor,\n            valueViewer: FillViewer,\n            className: 'select-cell'\n          };\n        } else {\n          col = {\n            value: \"\",\n            field: column.field,\n            required: column.required\n          };\n        }\n\n        columns.push(col);\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const populateCrewInfoGrid = () => {\n    setCrewInfoGrid(TableHeadersUtil.crewInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getCrewInfoGridRow(t));\n    }, []));\n  }; // const addNewCrew = (e) => {\n  //     e.preventDefault();\n  //     const newCrewInfoGrid = [\n  //         ...crewInfoGrid,\n  //         [\n  //             { value: \"Field engineer\", readOnly: true},\n  //             { value: \"\" },\n  //             { value: \"\" }\n  //         ]\n  //     ];\n  //     setCrewInfoGrid(newCrewInfoGrid);\n  // }\n\n\n  const handleCrewInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setCrewInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isCrewInfoValid = true;\n\n    const validatedCrewGrid = _.cloneDeep(crewInfoGrid);\n\n    validatedCrewGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isCrewInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isCrewInfoValid) {\n      handleCrewInfoGridChanged(validatedCrewGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setCrewInfoGrid(props.formValues);\n    } else {\n      populateCrewInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        width: '70%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.crewInfoFormTableData.columns,\n        grid: crewInfoGrid,\n        gridValueChanged: handleCrewInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CrewInfo, \"F7LIhAjVO+cSR9fDIoZby06RyGM=\");\n\n_c = CrewInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CrewInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","SelectEditor","_","APP_CONSTANTS","CrewInfo","props","crewInfoGrid","setCrewInfoGrid","FillViewer","value","foundOption","ROLE_OPTIONS","find","op","label","getCrewInfoGridRow","t","rows","map","row","columns","crewInfoFormTableData","column","col","field","dataEditor","valueViewer","className","required","push","populateCrewInfoGrid","grid","reduce","rowIdx","concat","handleCrewInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isCrewInfoValid","validatedCrewGrid","cloneDeep","cell","next","formValues","width","marginLeft","marginRight","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAEpC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMW,UAAU,GAAGH,KAAK,IAAI;AACxB,UAAM;AAAEI,MAAAA;AAAF,QAAYJ,KAAlB;AACA,UAAMK,WAAW,GAAGP,aAAa,CAACQ,YAAd,CAA2BC,IAA3B,CAAgCC,EAAE,IAAIJ,KAAK,KAAKA,KAAhD,CAApB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACKC,WAAW,GAAGA,WAAW,CAACI,KAAf,GAAuB;AADvC;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GARD;;AAUA,QAAMC,kBAAkB,GAAIC,CAAD,IAAO;AAC9B,WAAOA,CAAC,CAACC,IAAF,CAAOC,GAAP,CAAWC,GAAG,IAAI;AACrB,YAAMC,OAAO,GAAG,EAAhB;AACArB,MAAAA,gBAAgB,CAACsB,qBAAjB,CAAuCD,OAAvC,CAA+CF,GAA/C,CAAmDI,MAAM,IAAI;AACzD,YAAIC,GAAG,GAAG,EAAV;;AACA,YAAGD,MAAM,CAACE,KAAP,KAAiB,MAApB,EAA4B;AACxBD,UAAAA,GAAG,GAAG;AAAEd,YAAAA,KAAK,EAAEU,GAAG,CAACL,KAAb;AAAoBU,YAAAA,KAAK,EAAEF,MAAM,CAACE,KAAlC;AAAyCC,YAAAA,UAAU,EAAExB,YAArD;AAAmEyB,YAAAA,WAAW,EAAElB,UAAhF;AAA4FmB,YAAAA,SAAS,EAAE;AAAvG,WAAN;AACH,SAFD,MAEO;AACHJ,UAAAA,GAAG,GAAG;AAAEd,YAAAA,KAAK,EAAE,EAAT;AAAae,YAAAA,KAAK,EAAEF,MAAM,CAACE,KAA3B;AAAkCI,YAAAA,QAAQ,EAAEN,MAAM,CAACM;AAAnD,WAAN;AACH;;AACDR,QAAAA,OAAO,CAACS,IAAR,CAAaN,GAAb;AACA,eAAOD,MAAP;AACH,OATD;AAUA,aAAOF,OAAP;AACH,KAbM,CAAP;AAcH,GAfD;;AAiBA,QAAMU,oBAAoB,GAAG,MAAM;AAC/BvB,IAAAA,eAAe,CAACR,gBAAgB,CAACsB,qBAAjB,CAAuCU,IAAvC,CAA4CC,MAA5C,CAAmD,CAACf,IAAD,EAAOD,CAAP,EAAUiB,MAAV,KAAqB;AACpF,aAAOhB,IAAI,CAACiB,MAAL,CAAYnB,kBAAkB,CAACC,CAAD,CAA9B,CAAP;AACH,KAFe,EAEb,EAFa,CAAD,CAAf;AAGH,GAJD,CA/BoC,CAqCpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMmB,yBAAyB,GAAIC,eAAD,IAAqB;AACnD/B,IAAAA,KAAK,CAACgC,YAAN,CAAmBD,eAAnB;AACA7B,IAAAA,eAAe,CAAC6B,eAAD,CAAf;AACH,GAHD;;AAKA,QAAME,YAAY,GAAG,MAAM;AACvB,QAAIC,eAAe,GAAG,IAAtB;;AACA,UAAMC,iBAAiB,GAAGtC,CAAC,CAACuC,SAAF,CAAYnC,YAAZ,CAA1B;;AACAkC,IAAAA,iBAAiB,CAACtB,GAAlB,CAAsBC,GAAG,IAAI;AACzBA,MAAAA,GAAG,CAACD,GAAJ,CAAQwB,IAAI,IAAI;AACZ,YAAGA,IAAI,CAACd,QAAL,IAAiBc,IAAI,CAACjC,KAAL,KAAe,EAAnC,EAAuC;AACnC8B,UAAAA,eAAe,GAAG,KAAlB;AACAG,UAAAA,IAAI,CAACf,SAAL,GAAiB,YAAjB;AACH;;AACD,eAAOe,IAAP;AACH,OAND;AAOA,aAAOvB,GAAP;AACH,KATD;;AAWA,QAAG,CAACoB,eAAJ,EAAqB;AACjBJ,MAAAA,yBAAyB,CAACK,iBAAD,CAAzB;AACH,KAFD,MAEO;AACHnC,MAAAA,KAAK,CAACsC,IAAN;AACH;AACJ,GAnBD;;AAqBA9C,EAAAA,QAAQ,CAAC,MAAM;AACX,QAAGQ,KAAK,CAACuC,UAAN,IAAoB,IAAvB,EAA6B;AACzBvC,MAAAA,KAAK,CAACuC,UAAN,IAAoBrC,eAAe,CAACF,KAAK,CAACuC,UAAP,CAAnC;AACH,KAFD,MAEO;AACHd,MAAAA,oBAAoB;AACvB;AACJ,GANO,EAMLzB,KANK,CAAR;AAQA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAE;AAACwC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,UAAU,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OAA7B;AAAA,6BACI,QAAC,IAAD;AACI,QAAA,OAAO,EAAEhD,gBAAgB,CAACsB,qBAAjB,CAAuCD,OADpD;AAEI,QAAA,IAAI,EAAEd,YAFV;AAGI,QAAA,gBAAgB,EAAE6B;AAHtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eASI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO,EAAGa,CAAD,IAAO;AAACV,UAAAA,YAAY;AAAG,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAiBH;;GArGuBlC,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport SelectEditor from \"components/Grid/DataEditor/SelectEditor\";\nimport _ from \"lodash\";\nimport APP_CONSTANTS from \"constants/appConstants\";\n\nexport default function CrewInfo(props) {\n    \n    const [crewInfoGrid, setCrewInfoGrid] = useState([]);\n\n    const FillViewer = props => {\n        const { value } = props;\n        const foundOption = APP_CONSTANTS.ROLE_OPTIONS.find(op => value === value);\n        return (\n            <div className=\"cell-text-view\">\n                {foundOption ? foundOption.label : ''}\n            </div>\n        )\n    }\n\n    const getCrewInfoGridRow = (t) => {\n        return t.rows.map(row => {\n            const columns = [];\n            TableHeadersUtil.crewInfoFormTableData.columns.map(column => {\n                let col = {};\n                if(column.field === \"role\") {\n                    col = { value: row.label, field: column.field, dataEditor: SelectEditor, valueViewer: FillViewer, className: 'select-cell'} \n                } else {\n                    col = { value: \"\", field: column.field, required: column.required };\n                }\n                columns.push(col);\n                return column;\n            })\n            return columns;\n        })\n    }\n\n    const populateCrewInfoGrid = () => {\n        setCrewInfoGrid(TableHeadersUtil.crewInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getCrewInfoGridRow(t));\n        }, []));\n    }\n\n    // const addNewCrew = (e) => {\n    //     e.preventDefault();\n    //     const newCrewInfoGrid = [\n    //         ...crewInfoGrid,\n    //         [\n    //             { value: \"Field engineer\", readOnly: true},\n    //             { value: \"\" },\n    //             { value: \"\" }\n    //         ]\n    //     ];\n    //     setCrewInfoGrid(newCrewInfoGrid);\n    // }\n\n    const handleCrewInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setCrewInfoGrid(updatedGridData)\n    }\n\n    const gotoNextStep = () => {\n        let isCrewInfoValid = true;\n        const validatedCrewGrid = _.cloneDeep(crewInfoGrid);\n        validatedCrewGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isCrewInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        });\n\n        if(!isCrewInfoValid) {\n            handleCrewInfoGridChanged(validatedCrewGrid);\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setCrewInfoGrid(props.formValues);\n        } else {\n            populateCrewInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '70%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.crewInfoFormTableData.columns}\n                    grid={crewInfoGrid}\n                    gridValueChanged={handleCrewInfoGridChanged}\n                ></Grid>\n                {/* <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewCrew(e)}>+ Add a new client</div> */}\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}