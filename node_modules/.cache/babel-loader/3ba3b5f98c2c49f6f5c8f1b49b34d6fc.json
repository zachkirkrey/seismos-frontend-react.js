{"ast":null,"code":"const defultValueFormSubmitSerializer = formData => {\n  return {\n    \"default_advance_val\": {\n      \"algorithm\": formData.algorithm,\n      \"compresssibility\": formData.compressibility,\n      \"data_sample_rate\": formData.data_sample_rate,\n      \"density\": formData.density,\n      \"f_high_hz\": formData.f_high_hz,\n      \"f_low_hz\": formData.f_low_hz,\n      \"grid_density\": formData.grid_density,\n      \"interation\": formData.iterations,\n      \"layer\": formData.layer,\n      \"loop\": formData.loop,\n      \"method\": formData.method,\n      \"model\": formData.model,\n      \"new_sample_rate\": formData.new_sample_rate,\n      \"response\": formData.response,\n      \"source\": formData.source,\n      \"tolerance\": formData.tolerence,\n      \"total_width\": formData.total_width,\n      \"viscosity\": formData.viscosity,\n      \"weighting\": formData.weighting,\n      \"wlevexp\": formData.wlevexp\n    },\n    \"default_param_val\": {\n      \"c1_max\": formData.c1_max,\n      \"c1_min\": formData.c1_min,\n      \"c2_max\": formData.c2_max,\n      \"c2_min\": formData.c2_min,\n      \"c3_max\": formData.c3_max,\n      \"c3_min\": formData.c3_min,\n      \"k_max\": formData.k_max,\n      \"k_min\": formData.k_min,\n      \"q_max\": formData.q_max,\n      \"q_min\": formData.q_min\n    },\n    \"default_value\": {\n      \"beta_ss\": formData.beta_ss,\n      \"biot\": formData.biot,\n      \"breaker\": formData.breaker,\n      \"diverter_time\": formData.diverter_time,\n      \"eta_cp\": formData.eta_cp,\n      \"ffkw_correction\": formData.ffkw_correction,\n      \"fit_end_point\": formData.fit_end_point,\n      \"fit_iterations\": formData.fit_iterations,\n      \"fuild_density\": formData.fluid_density,\n      \"fuildt\": formData.fluid_t,\n      \"k_mpa\": formData.k_mpa,\n      \"met_res\": formData.met_res,\n      \"ng\": formData.ng,\n      \"nu_lim\": formData.nu_lim,\n      \"overburden\": formData.overburden,\n      \"per_red\": formData.perRed,\n      \"plotraw\": formData.plotraw,\n      \"poisson\": formData.poisson,\n      \"poisson_method\": formData.poisson_method,\n      \"poisson_var\": formData.poisson_var,\n      \"pres\": formData.pres,\n      \"shadow\": formData.shadow,\n      \"skip_losses\": formData.skip_losses,\n      \"st_lim\": formData.st_lim,\n      \"stage_ques\": formData.stage_ques,\n      \"start1\": formData.start1,\n      \"start2\": formData.start2,\n      \"stress_shadow\": formData.stress_shadow,\n      \"tect\": formData.tect,\n      \"use_wncuts\": formData.use_wncuts,\n      \"use_wns\": formData.use_wns,\n      \"young\": formData.young\n    }\n  };\n};\n\nconst trackingSheetSubmitSerializer = () => {\n  return {\n    stage: Number(selectedStage),\n    stage_tracking: {\n      date: Number(dynamicFormNestItemValues.date.format('x')),\n      customer: dynamicFormNestItemValues.customer,\n      well: dynamicFormNestItemValues.well,\n      stage: dynamicFormNestItemValues.stage,\n      bht_f: dynamicFormNestItemValues.bht_f,\n      bht_psi: dynamicFormNestItemValues.bht_psi,\n      frac_design: dynamicFormNestItemValues.frac_design,\n      field_engineer: {\n        days: dynamicFormNestItemValues.field_engineer_days,\n        nights: dynamicFormNestItemValues.field_engineer_nights\n      },\n      plug_type: dynamicFormNestItemValues.plug_type,\n      plug_seat_technique: dynamicFormNestItemValues.plug_seat_technique,\n      did_an_event_occur: dynamicFormNestItemValues.event_occur,\n      seismos_data_collection: dynamicFormNestItemValues.seismos_data_collection\n    },\n    perforation_interval_information: {\n      top_perf: perforationIntervalInformationValues.top_perf,\n      bottom_perf: perforationIntervalInformationValues.bottom_perf,\n      plug_depth: perforationIntervalInformationValues.plug_depth,\n      n_clusters: Number(perforationIntervalInformationValues.clusters_number),\n      perf_gun_description: perforationIntervalInformationValues.perf_gun_desc,\n      perf_daiameter: perforationIntervalInformationValues.perf_daiameter,\n      spf: perforationIntervalInformationValues.spf,\n      pumped_diverter: perforationIntervalInformationValues.pumped_diverter,\n      diverter_type: perforationIntervalInformationValues.diverter_type,\n      acid: perforationIntervalInformationValues.acid,\n      displacement_volume: {\n        top_perf: perforationIntervalInformationValues.displacement_vol_top,\n        bottom_perf: perforationIntervalInformationValues.displacement_vol_bottom,\n        plug: perforationIntervalInformationValues.displacement_vol_plug\n      }\n    },\n    stage_data: {\n      stage_start_time: Number(stageDataValues.stage_end_time.format('x')),\n      stage_end_time: Number(stageDataValues.stage_end_time.format('x')),\n      opening_well: stageDataValues.opening_well,\n      isip: stageDataValues.isip,\n      fluid_parameters: {\n        base_fluid_type: stageDataValues.base_fluid_type,\n        base_fluid_density: stageDataValues.base_fluid_density,\n        max_conc_density: stageDataValues.max_conc_density\n      },\n      fluids_injected_into_formation: {\n        last: {\n          description: stageDataValues.last_description,\n          bbls: stageDataValues.last_bbls,\n          ppg: stageDataValues.last_ppg\n        },\n        second_to_last: {\n          description: stageDataValues.second_description,\n          bbls: stageDataValues.second_bbls,\n          ppg: stageDataValues.second_ppg\n        },\n        third_to_last: {\n          description: stageDataValues.third_description,\n          bbls: stageDataValues.third_bbls,\n          ppg: stageDataValues.third_ppg\n        }\n      },\n      propant_data: propantFormValues.proppantData,\n      pumping_summary: {\n        max_prop_conc: {\n          design: stageDataValues.max_prop_conc_ppa_design,\n          actual: stageDataValues.max_prop_conc_ppa_actual\n        },\n        total_pad_volume: {\n          design: stageDataValues.total_pad_volume_bbls_design,\n          actual: stageDataValues.total_pad_volume_bbls_actual\n        },\n        total_clean_fluid_volume: {\n          design: stageDataValues.total_clean_fluid_volume_bbls_design,\n          actual: stageDataValues.total_clean_fluid_volume_bbls_actual\n        },\n        total_forty_seventy: {\n          design: stageDataValues.total_lbs_design,\n          actual: stageDataValues.total_lbs_actual\n        },\n        total_sand: {\n          design: stageDataValues.total_sand_lbs_design,\n          actual: stageDataValues.total_sand_lbs_actual\n        },\n        acid_volume: {\n          design: stageDataValues.acid_volume_gals_design,\n          actual: stageDataValues.acid_volume_gals_actual\n        },\n        flush_volume: {\n          design: stageDataValues.flush_volume_bbls_design,\n          actual: stageDataValues.flush_volume_bbls_actual\n        },\n        slurry_volume: {\n          design: stageDataValues.slurry_volume_bbls_design,\n          actual: stageDataValues.slurry_volume_bbls_actual\n        }\n      }\n    },\n    active_data: {\n      pilsing_parameters: {\n        wave_type: activeDataFormValues.wave_type,\n        periods: activeDataFormValues.periods,\n        freq: activeDataFormValues.frequency,\n        offset: activeDataFormValues.offset,\n        amplitude: activeDataFormValues.amplitude\n      },\n      pre_frac_pulses: {\n        start_time: Number(activeDataFormValues.pre_start_time.format('x')),\n        end_time: Number(activeDataFormValues.pre_end_time.format('x')),\n        n_pulses: Number(activeDataFormValues.pre_number_of_pulses)\n      },\n      post_frac_pulses: {\n        start_time: Number(activeDataFormValues.post_start_time.format('x')),\n        end_time: Number(activeDataFormValues.post_end_time.format('x')),\n        n_pulses: Number(activeDataFormValues.post_number_of_pulses)\n      }\n    },\n    notes: {\n      pre_frac_pulse: notesDataFormValues.pre_notes,\n      post_frac_pulse: notesDataFormValues.post_notes,\n      other: notesDataFormValues.other_notes\n    }\n  };\n};\n\nconst FormDataSerializer = {\n  defultValueFormSubmitSerializer,\n  trackingSheetSubmitSerializer\n};\nexport default FormDataSerializer;","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/FormDataSerializer.js"],"names":["defultValueFormSubmitSerializer","formData","algorithm","compressibility","data_sample_rate","density","f_high_hz","f_low_hz","grid_density","iterations","layer","loop","method","model","new_sample_rate","response","source","tolerence","total_width","viscosity","weighting","wlevexp","c1_max","c1_min","c2_max","c2_min","c3_max","c3_min","k_max","k_min","q_max","q_min","beta_ss","biot","breaker","diverter_time","eta_cp","ffkw_correction","fit_end_point","fit_iterations","fluid_density","fluid_t","k_mpa","met_res","ng","nu_lim","overburden","perRed","plotraw","poisson","poisson_method","poisson_var","pres","shadow","skip_losses","st_lim","stage_ques","start1","start2","stress_shadow","tect","use_wncuts","use_wns","young","trackingSheetSubmitSerializer","stage","Number","selectedStage","stage_tracking","date","dynamicFormNestItemValues","format","customer","well","bht_f","bht_psi","frac_design","field_engineer","days","field_engineer_days","nights","field_engineer_nights","plug_type","plug_seat_technique","did_an_event_occur","event_occur","seismos_data_collection","perforation_interval_information","top_perf","perforationIntervalInformationValues","bottom_perf","plug_depth","n_clusters","clusters_number","perf_gun_description","perf_gun_desc","perf_daiameter","spf","pumped_diverter","diverter_type","acid","displacement_volume","displacement_vol_top","displacement_vol_bottom","plug","displacement_vol_plug","stage_data","stage_start_time","stageDataValues","stage_end_time","opening_well","isip","fluid_parameters","base_fluid_type","base_fluid_density","max_conc_density","fluids_injected_into_formation","last","description","last_description","bbls","last_bbls","ppg","last_ppg","second_to_last","second_description","second_bbls","second_ppg","third_to_last","third_description","third_bbls","third_ppg","propant_data","propantFormValues","proppantData","pumping_summary","max_prop_conc","design","max_prop_conc_ppa_design","actual","max_prop_conc_ppa_actual","total_pad_volume","total_pad_volume_bbls_design","total_pad_volume_bbls_actual","total_clean_fluid_volume","total_clean_fluid_volume_bbls_design","total_clean_fluid_volume_bbls_actual","total_forty_seventy","total_lbs_design","total_lbs_actual","total_sand","total_sand_lbs_design","total_sand_lbs_actual","acid_volume","acid_volume_gals_design","acid_volume_gals_actual","flush_volume","flush_volume_bbls_design","flush_volume_bbls_actual","slurry_volume","slurry_volume_bbls_design","slurry_volume_bbls_actual","active_data","pilsing_parameters","wave_type","activeDataFormValues","periods","freq","frequency","offset","amplitude","pre_frac_pulses","start_time","pre_start_time","end_time","pre_end_time","n_pulses","pre_number_of_pulses","post_frac_pulses","post_start_time","post_end_time","post_number_of_pulses","notes","pre_frac_pulse","notesDataFormValues","pre_notes","post_frac_pulse","post_notes","other","other_notes","FormDataSerializer"],"mappings":"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","sourcesContent":["const defultValueFormSubmitSerializer = (formData) => {\n    return {\n        \"default_advance_val\": {\n          \"algorithm\": formData.algorithm,\n          \"compresssibility\": formData.compressibility,\n          \"data_sample_rate\": formData.data_sample_rate,\n          \"density\": formData.density,\n          \"f_high_hz\": formData.f_high_hz,\n          \"f_low_hz\": formData.f_low_hz,\n          \"grid_density\": formData.grid_density,\n          \"interation\": formData.iterations,\n          \"layer\": formData.layer,\n          \"loop\": formData.loop,\n          \"method\": formData.method,\n          \"model\": formData.model,\n          \"new_sample_rate\": formData.new_sample_rate,\n          \"response\": formData.response,\n          \"source\": formData.source,\n          \"tolerance\": formData.tolerence,\n          \"total_width\": formData.total_width,\n          \"viscosity\": formData.viscosity,\n          \"weighting\": formData.weighting,\n          \"wlevexp\": formData.wlevexp,\n        },\n        \"default_param_val\": {\n          \"c1_max\": formData.c1_max,\n          \"c1_min\": formData.c1_min,\n          \"c2_max\": formData.c2_max,\n          \"c2_min\": formData.c2_min,\n          \"c3_max\": formData.c3_max,\n          \"c3_min\": formData.c3_min,\n          \"k_max\": formData.k_max,\n          \"k_min\": formData.k_min,\n          \"q_max\": formData.q_max,\n          \"q_min\": formData.q_min,\n        },\n        \"default_value\": {\n          \"beta_ss\": formData.beta_ss,\n          \"biot\": formData.biot,\n          \"breaker\": formData.breaker,\n          \"diverter_time\": formData.diverter_time,\n          \"eta_cp\": formData.eta_cp,\n          \"ffkw_correction\": formData.ffkw_correction,\n          \"fit_end_point\": formData.fit_end_point,\n          \"fit_iterations\": formData.fit_iterations,\n          \"fuild_density\": formData.fluid_density,\n          \"fuildt\": formData.fluid_t,\n          \"k_mpa\": formData.k_mpa,\n          \"met_res\": formData.met_res,\n          \"ng\": formData.ng,\n          \"nu_lim\": formData.nu_lim,\n          \"overburden\": formData.overburden,\n          \"per_red\": formData.perRed,\n          \"plotraw\": formData.plotraw,\n          \"poisson\": formData.poisson,\n          \"poisson_method\": formData.poisson_method,\n          \"poisson_var\": formData.poisson_var,\n          \"pres\": formData.pres,\n          \"shadow\": formData.shadow,\n          \"skip_losses\": formData.skip_losses,\n          \"st_lim\": formData.st_lim,\n          \"stage_ques\": formData.stage_ques,\n          \"start1\": formData.start1,\n          \"start2\": formData.start2,\n          \"stress_shadow\": formData.stress_shadow,\n          \"tect\": formData.tect,\n          \"use_wncuts\": formData.use_wncuts,\n          \"use_wns\": formData.use_wns,\n          \"young\": formData.young,\n        }\n      }\n}\n\nconst trackingSheetSubmitSerializer = () => {\n  return {\n      stage: Number(selectedStage),\n      stage_tracking: {\n          date: Number(dynamicFormNestItemValues.date.format('x')),\n          customer: dynamicFormNestItemValues.customer,\n          well: dynamicFormNestItemValues.well,\n          stage: dynamicFormNestItemValues.stage,\n          bht_f: dynamicFormNestItemValues.bht_f,\n          bht_psi: dynamicFormNestItemValues.bht_psi,\n          frac_design: dynamicFormNestItemValues.frac_design,\n          field_engineer: {\n              days: dynamicFormNestItemValues.field_engineer_days,\n              nights: dynamicFormNestItemValues.field_engineer_nights,\n          },\n          plug_type: dynamicFormNestItemValues.plug_type,\n          plug_seat_technique: dynamicFormNestItemValues.plug_seat_technique,\n          did_an_event_occur: dynamicFormNestItemValues.event_occur,\n          seismos_data_collection: dynamicFormNestItemValues.seismos_data_collection,\n      },\n      perforation_interval_information: {\n          top_perf: perforationIntervalInformationValues.top_perf,\n          bottom_perf: perforationIntervalInformationValues.bottom_perf,\n          plug_depth: perforationIntervalInformationValues.plug_depth,\n          n_clusters: Number(perforationIntervalInformationValues.clusters_number),\n          perf_gun_description: perforationIntervalInformationValues.perf_gun_desc,\n          perf_daiameter: perforationIntervalInformationValues.perf_daiameter,\n          spf: perforationIntervalInformationValues.spf,\n          pumped_diverter: perforationIntervalInformationValues.pumped_diverter,\n          diverter_type: perforationIntervalInformationValues.diverter_type,\n          acid: perforationIntervalInformationValues.acid,\n          displacement_volume: {\n              top_perf: perforationIntervalInformationValues.displacement_vol_top,\n              bottom_perf: perforationIntervalInformationValues.displacement_vol_bottom,\n              plug: perforationIntervalInformationValues.displacement_vol_plug,\n          }\n      },\n      stage_data: {\n          stage_start_time: Number(stageDataValues.stage_end_time.format('x')),\n          stage_end_time: Number(stageDataValues.stage_end_time.format('x')),\n          opening_well: stageDataValues.opening_well,\n          isip: stageDataValues.isip,\n          fluid_parameters: {\n              base_fluid_type: stageDataValues.base_fluid_type,\n              base_fluid_density: stageDataValues.base_fluid_density,\n              max_conc_density: stageDataValues.max_conc_density,\n          },\n          fluids_injected_into_formation: {\n              last: {\n                  description: stageDataValues.last_description,\n                  bbls: stageDataValues.last_bbls,\n                  ppg: stageDataValues.last_ppg,\n              },\n              second_to_last: {\n                  description: stageDataValues.second_description,\n                  bbls: stageDataValues.second_bbls,\n                  ppg: stageDataValues.second_ppg,\n              },\n              third_to_last: {\n                  description: stageDataValues.third_description,\n                  bbls: stageDataValues.third_bbls,\n                  ppg: stageDataValues.third_ppg,\n              }\n          },\n          propant_data: propantFormValues.proppantData,\n          pumping_summary: {\n              max_prop_conc: {design: stageDataValues.max_prop_conc_ppa_design, actual: stageDataValues.max_prop_conc_ppa_actual},\n              total_pad_volume: {design: stageDataValues.total_pad_volume_bbls_design, actual: stageDataValues.total_pad_volume_bbls_actual},\n              total_clean_fluid_volume: {design: stageDataValues.total_clean_fluid_volume_bbls_design, actual: stageDataValues.total_clean_fluid_volume_bbls_actual},\n              total_forty_seventy: {design: stageDataValues.total_lbs_design, actual: stageDataValues.total_lbs_actual},\n              total_sand: {design: stageDataValues.total_sand_lbs_design, actual: stageDataValues.total_sand_lbs_actual},\n              acid_volume: {design: stageDataValues.acid_volume_gals_design, actual: stageDataValues.acid_volume_gals_actual},\n              flush_volume: {design: stageDataValues.flush_volume_bbls_design, actual: stageDataValues.flush_volume_bbls_actual},\n              slurry_volume: {design: stageDataValues.slurry_volume_bbls_design, actual: stageDataValues.slurry_volume_bbls_actual},\n          }\n      \n      },\n      active_data: {\n          pilsing_parameters: {\n              wave_type: activeDataFormValues.wave_type,\n              periods: activeDataFormValues.periods,\n              freq: activeDataFormValues.frequency,\n              offset: activeDataFormValues.offset,\n              amplitude: activeDataFormValues.amplitude,\n          },\n          pre_frac_pulses: {start_time: Number(activeDataFormValues.pre_start_time.format('x')), end_time: Number(activeDataFormValues.pre_end_time.format('x')), n_pulses: Number(activeDataFormValues.pre_number_of_pulses)},\n          post_frac_pulses: {start_time: Number(activeDataFormValues.post_start_time.format('x')), end_time: Number(activeDataFormValues.post_end_time.format('x')), n_pulses: Number(activeDataFormValues.post_number_of_pulses)},\n      },\n      notes: {\n          pre_frac_pulse: notesDataFormValues.pre_notes,\n          post_frac_pulse: notesDataFormValues.post_notes,\n          other: notesDataFormValues.other_notes,\n      }\n  }\n}\n\nconst FormDataSerializer = {\n    defultValueFormSubmitSerializer,\n    trackingSheetSubmitSerializer\n}\n\nexport default FormDataSerializer;"]},"metadata":{},"sourceType":"module"}