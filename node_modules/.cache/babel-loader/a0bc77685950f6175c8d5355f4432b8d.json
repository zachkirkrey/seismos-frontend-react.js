{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function JobInfo(props) {\n  _s();\n\n  const [jobInfoGrid, setJobInfoGrid] = useState([]);\n  const [padInfoGrid, setPadInfoGrid] = useState([]);\n\n  const getRow = t => {\n    return t.rows.map(row => {\n      return [{\n        value: row.label,\n        readOnly: true,\n        disableEvents: true,\n        className: 'cell-error'\n      }, {\n        value: \"\",\n        field: row.field,\n        required: row.required\n      }];\n    });\n  };\n\n  const populateJobInfoGrid = () => {\n    setJobInfoGrid(TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const row = getRow(t);\n      return rows.concat(row);\n    }, []));\n  };\n\n  const populatePadInfoGrid = () => {\n    setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const row = getRow(t);\n      return rows.concat(row);\n    }, []));\n  };\n\n  const handleJobInfoGridChanged = updatedGridData => {\n    props.setJobInfoFormValue(updatedGridData);\n    setJobInfoGrid(updatedGridData);\n  };\n\n  const handlePadInfoGridChanged = updatedGridData => {\n    props.setPadInfoFormValue(updatedGridData);\n    setPadInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    console.log(jobInfoGrid);\n    let isValid = true;\n\n    const jobGrid = _.cloneDeep(jobInfoGrid);\n\n    jobGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value == \"\") {\n          isValid = false;\n          console.log(cell);\n        }\n      });\n    }); // props.next();\n  };\n\n  useState(() => {\n    if (props.jobInfoFormValues != null) {\n      props.jobInfoFormValues && setJobInfoGrid(props.jobInfoFormValues);\n    } else {\n      populateJobInfoGrid();\n    }\n\n    if (props.padInfoFormValues != null) {\n      props.padInfoFormValues && setPadInfoGrid(props.padInfoFormValues);\n    } else {\n      populatePadInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      style: {\n        width: '80%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        size: \"large\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.jobInfoFormTableData.columns,\n          grid: jobInfoGrid,\n          className: \"job-info-grid mb-8\",\n          gridValueChanged: handleJobInfoGridChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          columns: TableHeadersUtil.padInfoFormTableData.columns,\n          grid: padInfoGrid,\n          className: \"pad-info-grid mb-8\",\n          gridValueChanged: handlePadInfoGridChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(JobInfo, \"kL26Q264/sZQUMOQMoqhA95mkF4=\");\n\n_c = JobInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js"],"names":["React","useState","Button","Space","TableHeadersUtil","Grid","_","JobInfo","props","jobInfoGrid","setJobInfoGrid","padInfoGrid","setPadInfoGrid","getRow","t","rows","map","row","value","label","readOnly","disableEvents","className","field","required","populateJobInfoGrid","jobInfoFormTableData","grid","reduce","rowIdx","concat","populatePadInfoGrid","padInfoFormTableData","handleJobInfoGridChanged","updatedGridData","setJobInfoFormValue","handlePadInfoGridChanged","setPadInfoFormValue","gotoNextStep","console","log","isValid","jobGrid","cloneDeep","cell","jobInfoFormValues","padInfoFormValues","width","marginLeft","marginRight","columns","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Space } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function JobInfo(props) {\n    \n    const [jobInfoGrid, setJobInfoGrid] = useState([]);\n    const [padInfoGrid, setPadInfoGrid] = useState([]);\n\n    const getRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: row.label, readOnly: true, disableEvents: true, className: 'cell-error' },\n                { value: \"\", field: row.field, required: row.required },\n            ]\n        })\n    }\n\n    const populateJobInfoGrid = () => {\n        setJobInfoGrid(TableHeadersUtil.jobInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    const populatePadInfoGrid = () => {\n        setPadInfoGrid(TableHeadersUtil.padInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const row = getRow(t);\n            return rows.concat(row);\n        }, []))\n    }\n\n    const handleJobInfoGridChanged = (updatedGridData) => {\n        props.setJobInfoFormValue(updatedGridData);\n        setJobInfoGrid(updatedGridData);\n    }\n\n    const handlePadInfoGridChanged = (updatedGridData) => {\n        props.setPadInfoFormValue(updatedGridData);\n        setPadInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        console.log(jobInfoGrid)\n        let isValid = true;\n        const jobGrid = _.cloneDeep(jobInfoGrid);\n        jobGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value == \"\") {\n                    isValid = false;\n                    console.log(cell);\n                }\n            })\n        })\n        // props.next();\n    }\n\n    useState(() => {\n        if(props.jobInfoFormValues != null) {\n            props.jobInfoFormValues && setJobInfoGrid(props.jobInfoFormValues);\n        } else {\n            populateJobInfoGrid();\n        }\n        if(props.padInfoFormValues != null) {\n            props.padInfoFormValues && setPadInfoGrid(props.padInfoFormValues);\n        } else {\n            populatePadInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"flex\" style={{width: '80%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Space size=\"large\">\n                    <Grid \n                        columns={TableHeadersUtil.jobInfoFormTableData.columns}\n                        grid={jobInfoGrid}\n                        className=\"job-info-grid mb-8\"\n                        gridValueChanged={handleJobInfoGridChanged}\n                    ></Grid>\n                    <Grid \n                        columns={TableHeadersUtil.padInfoFormTableData.columns}\n                        grid={padInfoGrid}\n                        className=\"pad-info-grid mb-8\"\n                        gridValueChanged={handlePadInfoGridChanged}\n                    ></Grid>\n                </Space>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}