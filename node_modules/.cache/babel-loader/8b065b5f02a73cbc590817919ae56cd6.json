{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ClientInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport PasswordInput from \"components/Grid/PasswordInput\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClientInfo(props) {\n  _s();\n\n  const [clientInfoGrid, setClientInfoGrid] = useState([]);\n\n  const getClientInfoGridRow = t => {\n    return t.rows.map(label => {\n      const columns = [];\n      TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n        columns.push({\n          value: \"\",\n          field: column.field,\n          required: column.required,\n          dataEditor: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null // className: column.className\n\n        });\n        return column;\n      });\n      return columns;\n    });\n  };\n\n  const populateClientInfoGrid = () => {\n    setClientInfoGrid(TableHeadersUtil.clientInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getClientInfoGridRow(t));\n    }, []));\n  };\n\n  const addNewClient = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n      columns.push({\n        value: \"\",\n        field: column.field,\n        required: column.required,\n        component: column.forceComponent ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          className: \"transparent-input\",\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 52\n        }, this) : null,\n        forceComponent: column.forceComponent,\n        className: column.className\n      });\n      return column;\n    });\n    const newClientInfoGrid = [...clientInfoGrid, columns];\n    setClientInfoGrid(newClientInfoGrid);\n  };\n\n  const handleClientInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setClientInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isClientInfoValid = true;\n\n    const validatedClientGrid = _.cloneDeep(clientInfoGrid);\n\n    validatedClientGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isClientInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isClientInfoValid) {\n      handleClientInfoGridChanged(validatedClientGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setClientInfoGrid(props.formValues);\n    } else {\n      populateClientInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        width: '60%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.clientInfoFormTableData.columns,\n        grid: clientInfoGrid,\n        gridValueChanged: handleClientInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewClient(e),\n        children: \"+ Add a new client\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClientInfo, \"+7E4TXMEZzHm94F1PqHiQGWUYN8=\");\n\n_c = ClientInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ClientInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","PasswordInput","_","ClientInfo","props","clientInfoGrid","setClientInfoGrid","getClientInfoGridRow","t","rows","map","label","columns","clientInfoFormTableData","column","push","value","field","required","dataEditor","ENUMS","FORM_FIELDS","CLIENT_INFO","PASSWORD","populateClientInfoGrid","grid","reduce","rowIdx","concat","addNewClient","e","preventDefault","component","forceComponent","className","newClientInfoGrid","handleClientInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isClientInfoValid","validatedClientGrid","cloneDeep","row","cell","next","formValues","width","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport PasswordInput from \"components/Grid/PasswordInput\";\nimport _ from \"lodash\";\n\nexport default function ClientInfo(props) {\n    \n    const [clientInfoGrid, setClientInfoGrid] = useState([]);\n\n    const getClientInfoGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n                columns.push({\n                    value: \"\",\n                    field: column.field,\n                    required: column.required,\n                    dataEditor: column.field == ENUMS.FORM_FIELDS.CLIENT_INFO.PASSWORD ? PasswordInput : null,\n                    // className: column.className\n                });\n                return column;\n            })\n            return columns;\n        })\n    }\n\n    const populateClientInfoGrid = () => {\n        setClientInfoGrid(TableHeadersUtil.clientInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getClientInfoGridRow(t));\n        }, []));\n    }\n\n    const addNewClient = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.clientInfoFormTableData.columns.map(column => {\n            columns.push({ \n                value: \"\",\n                field: column.field,\n                required: column.required,\n                component: column.forceComponent ? <input type=\"password\" className=\"transparent-input\" value=\"\"></input> : null,\n                forceComponent: column.forceComponent,\n                className: column.className\n            });\n            return column;\n        })\n        const newClientInfoGrid = [\n            ...clientInfoGrid,\n            columns\n        ];\n        setClientInfoGrid(newClientInfoGrid);\n    }\n\n    const handleClientInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setClientInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isClientInfoValid = true;\n        const validatedClientGrid = _.cloneDeep(clientInfoGrid);\n        validatedClientGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isClientInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        });\n\n        if(!isClientInfoValid) {\n            handleClientInfoGridChanged(validatedClientGrid);\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setClientInfoGrid(props.formValues);\n        } else {\n            populateClientInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '60%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.clientInfoFormTableData.columns}\n                    grid={clientInfoGrid}\n                    gridValueChanged={handleClientInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewClient(e)}>+ Add a new client</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}