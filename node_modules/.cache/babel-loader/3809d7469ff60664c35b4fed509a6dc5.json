{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ProjectInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ProjectInfo(props) {\n  _s();\n\n  const [projectInfoGrid, setProjectInfoGrid] = useState([]);\n\n  const getProjectInfoGridRow = t => {\n    return t.rows.map(row => {\n      console.log(row.field);\n      return [{\n        value: row.label,\n        readOnly: true,\n        disableEvents: true\n      }, {\n        value: \"\",\n        field: row.field,\n        required: row.required\n      }];\n    });\n  };\n\n  const populateProjectInfoGrid = () => {\n    setProjectInfoGrid(TableHeadersUtil.projectInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      return rows.concat(getProjectInfoGridRow(t));\n    }, []));\n  };\n\n  const handleProjectInfoGridChanged = updatedGridData => {\n    console.log(updatedGridData);\n    props.setFormValue(updatedGridData);\n    setProjectInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isProjectInfoValid = true;\n\n    const validatedProjectInfoGrid = _.cloneDeep(projectInfoGrid);\n\n    validatedProjectInfoGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isProjectInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isProjectInfoValid) {\n      handleProjectInfoGridChanged(validatedProjectInfoGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setProjectInfoGrid(props.formValues);\n    } else {\n      populateProjectInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        width: '50%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.projectInfoFormTableData.columns,\n        grid: projectInfoGrid,\n        gridValueChanged: handleProjectInfoGridChanged,\n        className: \"no-header-grid mb-8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ProjectInfo, \"+GfhwmhOzt+mIdD4rlM1qeGUvWo=\");\n\n_c = ProjectInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ProjectInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","ProjectInfo","props","projectInfoGrid","setProjectInfoGrid","getProjectInfoGridRow","t","rows","map","row","console","log","field","value","label","readOnly","disableEvents","required","populateProjectInfoGrid","projectInfoFormTableData","grid","reduce","rowIdx","concat","handleProjectInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isProjectInfoValid","validatedProjectInfoGrid","cloneDeep","cell","className","next","formValues","width","marginLeft","marginRight","columns","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\n\nexport default function ProjectInfo(props) {\n    \n    const [projectInfoGrid, setProjectInfoGrid] = useState([]);\n\n    const getProjectInfoGridRow = (t) => {\n        return t.rows.map(row => {\n            console.log(row.field)\n            return [\n                { value: row.label, readOnly: true, disableEvents: true},\n                { value: \"\", field: row.field, required: row.required },\n            ]\n        })\n    }\n\n    const populateProjectInfoGrid = () => {\n        setProjectInfoGrid(TableHeadersUtil.projectInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getProjectInfoGridRow(t));\n        }, []));\n    }\n\n    const handleProjectInfoGridChanged = (updatedGridData) => {\n        console.log(updatedGridData)\n        props.setFormValue(updatedGridData);\n        setProjectInfoGrid(updatedGridData)\n    }\n\n    const gotoNextStep = () => {\n        let isProjectInfoValid = true;\n        const validatedProjectInfoGrid = _.cloneDeep(projectInfoGrid);\n        validatedProjectInfoGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isProjectInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            });\n            return row;\n        })\n        if(!isProjectInfoValid) {\n            handleProjectInfoGridChanged(validatedProjectInfoGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setProjectInfoGrid(props.formValues);\n        } else {\n            populateProjectInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\" style={{width: '50%', marginLeft: 'auto', marginRight: 'auto'}}>\n                <Grid \n                    columns={TableHeadersUtil.projectInfoFormTableData.columns}\n                    grid={projectInfoGrid}\n                    gridValueChanged={handleProjectInfoGridChanged}\n                    className=\"no-header-grid mb-8\"\n                ></Grid>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}