{"ast":null,"code":"import _defineProperty from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/subodhkalika/test-projects/projects/seismos_application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{extend}from\"underscore\";var getNewValue=function getNewValue(values,prevValue,fieldIndex,index,counter){if(index>=fieldIndex){return values[counter]?values[counter]:prevValue;}else{return prevValue;}};var setClipboardValues=function setClipboardValues(fields,values,fieldIndex){var newFieldValues={};var counter=-1;Object.keys(fields).map(function(field_key,index){newFieldValues=_objectSpread(_objectSpread({},newFieldValues),{},_defineProperty({},field_key,index>=fieldIndex?getNewValue(values,fields[field_key],fieldIndex,index,++counter):fields[field_key]));return field_key;});return newFieldValues;};var formatFormValuesFromRowGridData=function formatFormValuesFromRowGridData(gridValues){var fieldVlaues={};if(!gridValues)return fieldVlaues;gridValues.map(function(gridRow){var obj=gridRow.find(function(val){return val.field;});var fieldValuePair=_defineProperty({},obj.field,obj.value);fieldVlaues=extend(fieldVlaues,fieldValuePair);return fieldValuePair;});return fieldVlaues;};var formatFormValuesFromColumnGridData=function formatFormValuesFromColumnGridData(gridValues){if(!gridValues)return[];var newValues=gridValues.map(function(row){var fieldValues={};row.map(function(col){fieldValues=extend(fieldValues,_defineProperty({},col.field,col.value));return col;});return fieldValues;});return newValues;};var ProjectUtil={setClipboardValues:setClipboardValues,formatFormValuesFromRowGridData:formatFormValuesFromRowGridData,formatFormValuesFromColumnGridData:formatFormValuesFromColumnGridData};export default ProjectUtil;","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/ProjectUtil.js"],"names":["extend","getNewValue","values","prevValue","fieldIndex","index","counter","setClipboardValues","fields","newFieldValues","Object","keys","map","field_key","formatFormValuesFromRowGridData","gridValues","fieldVlaues","gridRow","obj","find","val","field","fieldValuePair","value","formatFormValuesFromColumnGridData","newValues","row","fieldValues","col","ProjectUtil"],"mappings":"yXAAA,OAASA,MAAT,KAAuB,YAAvB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAASC,SAAT,CAAoBC,UAApB,CAAgCC,KAAhC,CAAuCC,OAAvC,CAAmD,CACnE,GAAGD,KAAK,EAAID,UAAZ,CAAwB,CACpB,MAAOF,CAAAA,MAAM,CAACI,OAAD,CAAN,CAAkBJ,MAAM,CAACI,OAAD,CAAxB,CAAoCH,SAA3C,CACH,CAFD,IAEO,CACH,MAAOA,CAAAA,SAAP,CACH,CACJ,CAND,CAQA,GAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,MAAD,CAASN,MAAT,CAAiBE,UAAjB,CAAgC,CACvD,GAAIK,CAAAA,cAAc,CAAG,EAArB,CACA,GAAIH,CAAAA,OAAO,CAAG,CAAC,CAAf,CACAI,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,GAApB,CAAwB,SAACC,SAAD,CAAYR,KAAZ,CAAsB,CAC1CI,cAAc,gCACPA,cADO,wBAETI,SAFS,CAEIR,KAAK,EAAID,UAAV,CAAwBH,WAAW,CAACC,MAAD,CAASM,MAAM,CAACK,SAAD,CAAf,CAA4BT,UAA5B,CAAwCC,KAAxC,CAA+C,EAAEC,OAAjD,CAAnC,CAA+FE,MAAM,CAACK,SAAD,CAFxG,EAAd,CAIA,MAAOA,CAAAA,SAAP,CACH,CAND,EAOA,MAAOJ,CAAAA,cAAP,CACH,CAXD,CAaA,GAAMK,CAAAA,+BAA+B,CAAG,QAAlCA,CAAAA,+BAAkC,CAACC,UAAD,CAAgB,CACpD,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CACA,GAAI,CAACD,UAAL,CACI,MAAOC,CAAAA,WAAP,CACJD,UAAU,CAACH,GAAX,CAAe,SAAAK,OAAO,CAAI,CACtB,GAAMC,CAAAA,GAAG,CAAGD,OAAO,CAACE,IAAR,CAAa,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,KAAR,EAAhB,CAAZ,CACA,GAAMC,CAAAA,cAAc,oBAAKJ,GAAG,CAACG,KAAT,CAAiBH,GAAG,CAACK,KAArB,CAApB,CACAP,WAAW,CAAGhB,MAAM,CAACgB,WAAD,CAAcM,cAAd,CAApB,CAEA,MAAOA,CAAAA,cAAP,CACH,CAND,EAQA,MAAON,CAAAA,WAAP,CACH,CAbD,CAeA,GAAMQ,CAAAA,kCAAkC,CAAG,QAArCA,CAAAA,kCAAqC,CAACT,UAAD,CAAgB,CACvD,GAAI,CAACA,UAAL,CACI,MAAO,EAAP,CACJ,GAAMU,CAAAA,SAAS,CAAGV,UAAU,CAACH,GAAX,CAAe,SAAAc,GAAG,CAAI,CACpC,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CACAD,GAAG,CAACd,GAAJ,CAAQ,SAAAgB,GAAG,CAAI,CACXD,WAAW,CAAG3B,MAAM,CAAC2B,WAAD,oBAAgBC,GAAG,CAACP,KAApB,CAA4BO,GAAG,CAACL,KAAhC,EAApB,CACA,MAAOK,CAAAA,GAAP,CACH,CAHD,EAIA,MAAOD,CAAAA,WAAP,CACH,CAPiB,CAAlB,CASA,MAAOF,CAAAA,SAAP,CACH,CAbD,CAeA,GAAMI,CAAAA,WAAW,CAAG,CAChBtB,kBAAkB,CAAlBA,kBADgB,CAEhBO,+BAA+B,CAA/BA,+BAFgB,CAGhBU,kCAAkC,CAAlCA,kCAHgB,CAApB,CAMA,cAAeK,CAAAA,WAAf","sourcesContent":["import { extend } from \"underscore\";\n\nconst getNewValue = (values, prevValue, fieldIndex, index, counter) => {\n    if(index >= fieldIndex) {\n        return values[counter] ? values[counter] : prevValue;\n    } else {\n        return prevValue;\n    }\n}\n\nconst setClipboardValues = (fields, values, fieldIndex) => {\n    let newFieldValues = {};\n    let counter = -1;\n    Object.keys(fields).map((field_key, index) => {\n        newFieldValues = {\n            ...newFieldValues,\n            [field_key]: (index >= fieldIndex) ? getNewValue(values, fields[field_key], fieldIndex, index, ++counter) : fields[field_key],\n        }\n        return field_key;\n    });\n    return newFieldValues;\n}\n\nconst formatFormValuesFromRowGridData = (gridValues) => {\n    let fieldVlaues = {};\n    if (!gridValues)\n        return fieldVlaues;\n    gridValues.map(gridRow => {\n        const obj = gridRow.find(val => val.field);\n        const fieldValuePair = {[obj.field]: obj.value};\n        fieldVlaues = extend(fieldVlaues, fieldValuePair);\n\n        return fieldValuePair;\n    });\n\n    return fieldVlaues;\n}\n\nconst formatFormValuesFromColumnGridData = (gridValues) => {\n    if (!gridValues)\n        return [];\n    const newValues = gridValues.map(row => {\n        let fieldValues = {};\n        row.map(col => {\n            fieldValues = extend(fieldValues, {[col.field]: col.value})\n            return col;\n        })\n        return fieldValues;\n    });\n\n    return newValues;\n}\n\nconst ProjectUtil = {\n    setClipboardValues,\n    formatFormValuesFromRowGridData,\n    formatFormValuesFromColumnGridData\n}\n\nexport default ProjectUtil;"]},"metadata":{},"sourceType":"module"}