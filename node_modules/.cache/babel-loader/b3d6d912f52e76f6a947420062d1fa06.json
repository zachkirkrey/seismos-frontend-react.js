{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n_c2 = EditableCell;\n\nclass WellInfo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleAdd = () => {\n      const {\n        count,\n        dataSource\n      } = this.state;\n      const newData = {\n        key: count,\n        name: `Edward King ${count}`,\n        age: '32',\n        address: `London, Park Lane no. ${count}`\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        dataSource: newData\n      });\n    };\n\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '30%',\n      editable: true\n    }, {\n      title: 'age',\n      dataIndex: 'age'\n    }, {\n      title: 'address',\n      dataIndex: 'address'\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (_, record) => this.state.dataSource.length >= 1 ? /*#__PURE__*/_jsxDEV(Popconfirm, {\n        title: \"Sure to delete?\",\n        onConfirm: () => this.handleDelete(record.key),\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this) : null\n    }];\n    this.state = {\n      dataSource: [{\n        key: '0',\n        name: 'Edward King 0',\n        age: '32',\n        address: 'London, Park Lane no. 0'\n      }, {\n        key: '1',\n        name: 'Edward King 1',\n        age: '32',\n        address: 'London, Park Lane no. 1'\n      }],\n      count: 2\n    };\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.handleAdd,\n        type: \"primary\",\n        style: {\n          marginBottom: 16\n        },\n        children: \"Add a row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        components: components,\n        rowClassName: () => 'editable-row',\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WellInfo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useContext","useState","useEffect","useRef","ReactDOM","Table","Input","Button","Popconfirm","Form","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight","WellInfo","Component","constructor","handleDelete","key","dataSource","state","setState","filter","item","handleAdd","count","newData","name","age","address","row","findIndex","splice","columns","width","render","_","length","components","body","cell","map","col","onCell","marginBottom"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\nconst EditableContext = React.createContext(null);\n\nconst EditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n        <EditableContext.Provider value={form}>\n            <tr {...props} />\n        </EditableContext.Provider>\n        </Form>\n    );\n};\n\nconst EditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave,\n    ...restProps\n}) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n    useEffect(() => {\n        if (editing) {\n        inputRef.current.focus();\n        }\n    }, [editing]);\n\n    const toggleEdit = () => {\n        setEditing(!editing);\n        form.setFieldsValue({\n        [dataIndex]: record[dataIndex],\n        });\n    };\n\n    const save = async () => {\n        try {\n        const values = await form.validateFields();\n        toggleEdit();\n        handleSave({ ...record, ...values });\n        } catch (errInfo) {\n        console.log('Save failed:', errInfo);\n        }\n    };\n\n    let childNode = children;\n\n    if (editable) {\n        childNode = editing ? (\n        <Form.Item\n            style={{\n            margin: 0,\n            }}\n            name={dataIndex}\n            rules={[\n            {\n                required: true,\n                message: `${title} is required.`,\n            },\n            ]}\n        >\n            <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n        </Form.Item>\n        ) : (\n        <div\n            className=\"editable-cell-value-wrap\"\n            style={{\n            paddingRight: 24,\n            }}\n            onClick={toggleEdit}\n        >\n            {children}\n        </div>\n        );\n    }\n    return <td {...restProps}>{childNode}</td>;\n};\n\nclass WellInfo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.columns = [\n            {\n                title: 'name',\n                dataIndex: 'name',\n                width: '30%',\n                editable: true,\n            },\n            {\n                title: 'age',\n                dataIndex: 'age',\n            },\n            {\n                title: 'address',\n                dataIndex: 'address',\n            },\n            {\n                title: 'operation',\n                dataIndex: 'operation',\n                render: (_, record) =>\n                this.state.dataSource.length >= 1 ? (\n                    <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\n                    <a>Delete</a>\n                    </Popconfirm>\n                ) : null,\n            },\n        ];\n        this.state = {\n        dataSource: [\n            {\n            key: '0',\n            name: 'Edward King 0',\n            age: '32',\n            address: 'London, Park Lane no. 0',\n            },\n            {\n            key: '1',\n            name: 'Edward King 1',\n            age: '32',\n            address: 'London, Park Lane no. 1',\n            },\n        ],\n        count: 2,\n        };\n    }\n\n    handleDelete = (key) => {\n        const dataSource = [...this.state.dataSource];\n        this.setState({\n        dataSource: dataSource.filter((item) => item.key !== key),\n        });\n    };\n    handleAdd = () => {\n        const { count, dataSource } = this.state;\n        const newData = {\n        key: count,\n        name: `Edward King ${count}`,\n        age: '32',\n        address: `London, Park Lane no. ${count}`,\n        };\n        this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1,\n        });\n    };\n    handleSave = (row) => {\n        const newData = [...this.state.dataSource];\n        const index = newData.findIndex((item) => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        this.setState({\n        dataSource: newData,\n        });\n    };\n\n    render() {\n        const { dataSource } = this.state;\n        const components = {\n        body: {\n            row: EditableRow,\n            cell: EditableCell,\n        },\n        };\n        const columns = this.columns.map((col) => {\n            if (!col.editable) {\n                return col;\n            }\n\n            return {\n                ...col,\n                onCell: (record) => ({\n                record,\n                editable: col.editable,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                handleSave: this.handleSave,\n                }),\n            };\n        });\n\n        return (\n            <div>\n                <Button\n                onClick={this.handleAdd}\n                type=\"primary\"\n                style={{\n                    marginBottom: 16,\n                }}\n                >\n                Add a row\n                </Button>\n                <Table\n                components={components}\n                rowClassName={() => 'editable-row'}\n                bordered\n                dataSource={dataSource}\n                columns={columns}\n                />\n            </div>\n        );\n    }\n}\n\nexport default WellInfo;"]},"metadata":{},"sourceType":"module"}