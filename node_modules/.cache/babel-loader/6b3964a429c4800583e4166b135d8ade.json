{"ast":null,"code":"var _jsxFileName = \"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WellInfo(props) {\n  _s();\n\n  const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n  const remove = index => {\n    console.log(index, wellInfoGrid.length);\n\n    if (wellInfoGrid.length > 1) {\n      const grid = _.cloneDeep(wellInfoGrid);\n\n      console.log(grid);\n      grid.splice(index, 1);\n      console.log(grid);\n      setWellInfoGrid(grid);\n    }\n  };\n\n  const component = rowIdx => {\n    return /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: () => remove(rowIdx)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  };\n\n  const isForcedComponent = column => {\n    return column.actionColumn;\n  };\n\n  const populateWillInfoGrid = () => {\n    const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n      const columns = [];\n      TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n        const componentData = column.actionColumn ? component(rowIdx) : null;\n        const className = column.actionColumn ? \"noborder\" : \"\";\n        columns.push({\n          value: column.defaultValue,\n          field: column.field,\n          required: column.required,\n          component: componentData,\n          forceComponent: isForcedComponent(column),\n          className: className\n        });\n        return column;\n      });\n      return rows.concat([columns]);\n    }, []);\n    console.log(grid);\n    setWellInfoGrid(grid);\n  };\n\n  const addNewWell = e => {\n    e.preventDefault();\n    const columns = [];\n    TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n      // const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n      const componentData = column.actionColumn ? component(wellInfoGrid.length) : null;\n      const className = column.actionColumn ? \"noborder\" : \"\";\n      columns.push({\n        value: column.defaultValue,\n        field: column.field,\n        required: column.required,\n        component: componentData,\n        forceComponent: isForcedComponent(column),\n        className: className\n      });\n      return column;\n    });\n    const newWellInfoGrid = [...wellInfoGrid.map((x, index) => {\n      return x.map(y => {\n        const componentData = y.field == \"action\" ? component(index) : null;\n        return { ...y,\n          component: componentData\n        };\n      });\n    }), columns];\n    setWellInfoGrid(newWellInfoGrid);\n  };\n\n  const handleWellInfoGridChanged = updatedGridData => {\n    props.setFormValue(updatedGridData);\n    setWellInfoGrid(updatedGridData);\n  };\n\n  const gotoNextStep = () => {\n    let isWellInfoValid = true;\n\n    const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n\n    validatedWellGrid.map(row => {\n      row.map(cell => {\n        if (cell.required && cell.value === \"\") {\n          isWellInfoValid = false;\n          cell.className = 'cell-error';\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    if (!isWellInfoValid) {\n      handleWellInfoGridChanged(validatedWellGrid);\n    } else {\n      props.next();\n    }\n  };\n\n  useState(() => {\n    if (props.formValues != null) {\n      props.formValues && setWellInfoGrid(props.formValues);\n    } else {\n      populateWillInfoGrid();\n    }\n  }, props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: TableHeadersUtil.wellInfoFormTableData.columns,\n        grid: wellInfoGrid,\n        gridValueChanged: handleWellInfoGridChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lightBlue-600 mt-2 cursor-pointer inline-block\",\n        onClick: e => addNewWell(e),\n        children: \"+ Add a new well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: e => {\n          gotoNextStep();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WellInfo, \"SRaAPwljMBTjwdbaxo29KTstSn0=\");\n\n_c = WellInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WellInfo\");","map":{"version":3,"sources":["/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js"],"names":["React","useState","Button","TableHeadersUtil","Grid","_","MinusCircleOutlined","WellInfo","props","wellInfoGrid","setWellInfoGrid","remove","index","console","log","length","grid","cloneDeep","splice","component","rowIdx","isForcedComponent","column","actionColumn","populateWillInfoGrid","wellInfoFormTableData","reduce","rows","t","columns","map","componentData","className","push","value","defaultValue","field","required","forceComponent","concat","addNewWell","e","preventDefault","newWellInfoGrid","x","y","handleWellInfoGridChanged","updatedGridData","setFormValue","gotoNextStep","isWellInfoValid","validatedWellGrid","row","cell","next","formValues"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\"; \n\nexport default function WellInfo(props) {\n    \n    const [wellInfoGrid, setWellInfoGrid] = useState([]);\n\n    const remove = (index) => {\n        console.log(index, wellInfoGrid.length)\n        if (wellInfoGrid.length > 1) {\n            const grid = _.cloneDeep(wellInfoGrid);\n            console.log(grid);\n            grid.splice(index, 1);\n            console.log(grid);\n            setWellInfoGrid(grid);\n        }\n    }\n\n    const component = (rowIdx) => {\n        return <MinusCircleOutlined onClick={() => remove(rowIdx)} />;\n    }\n\n    const isForcedComponent = (column) => {\n        return column.actionColumn;\n    }\n\n    const populateWillInfoGrid = () => {\n        const grid = TableHeadersUtil.wellInfoFormTableData.grid.reduce((rows, t, rowIdx) => {\n            const columns = [];\n            TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n                const componentData = column.actionColumn ? component(rowIdx) : null\n                const className = column.actionColumn ? \"noborder\" : \"\";\n                columns.push({\n                    value: column.defaultValue,\n                    field: column.field,\n                    required: column.required,\n                    component: componentData,\n                    forceComponent: isForcedComponent(column),\n                    className: className\n                });\n                return column;\n            })\n            return rows.concat([columns]);\n        }, [])\n        console.log(grid);\n        setWellInfoGrid(grid);\n    }\n\n    const addNewWell = (e) => {\n        e.preventDefault();\n        const columns = [];\n        TableHeadersUtil.wellInfoFormTableData.columns.map(column => {\n            // const defaultVal = column.field === \"well_name\" ? (column.defaultValue + \" \" + (wellInfoGrid.length + 1)) : \"\";\n            const componentData = column.actionColumn ? component(wellInfoGrid.length) : null\n            const className = column.actionColumn ? \"noborder\" : \"\";\n            columns.push({\n                value: column.defaultValue,\n                field: column.field,\n                required: column.required,\n                component: componentData,\n                forceComponent: isForcedComponent(column),\n                className: className\n            });\n            return column;\n        });\n        const newWellInfoGrid = [\n            ...wellInfoGrid.map((x, index) => {\n                return x.map(y => { \n                    const componentData = y.field == \"action\" ? component(index) : null\n                    return {\n                        ...y,\n                        component: componentData\n                    }\n                })\n            }),\n            columns\n        ];\n        setWellInfoGrid(newWellInfoGrid);\n    }\n\n    const handleWellInfoGridChanged = (updatedGridData) => {\n        props.setFormValue(updatedGridData);\n        setWellInfoGrid(updatedGridData);\n    }\n\n    const gotoNextStep = () => {\n        let isWellInfoValid = true;\n        const validatedWellGrid = _.cloneDeep(wellInfoGrid);\n        validatedWellGrid.map(row => {\n            row.map(cell => {\n                if(cell.required && cell.value === \"\") {\n                    isWellInfoValid = false;\n                    cell.className = 'cell-error';\n                }\n                return cell;\n            })\n            return row;\n        })\n\n        if(!isWellInfoValid) {\n            handleWellInfoGridChanged(validatedWellGrid)\n        } else {\n            props.next();\n        }\n    }\n\n    useState(() => {\n        if(props.formValues != null) {\n            props.formValues && setWellInfoGrid(props.formValues);\n        } else {\n            populateWillInfoGrid();\n        }\n    }, props);\n\n    return (\n        <>\n            <div className=\"mb-8\">\n                <Grid \n                    columns={TableHeadersUtil.wellInfoFormTableData.columns}\n                    grid={wellInfoGrid}\n                    gridValueChanged={handleWellInfoGridChanged}\n                ></Grid>\n                <div className=\"text-lightBlue-600 mt-2 cursor-pointer inline-block\" onClick={(e) => addNewWell(e)}>+ Add a new well</div>\n            </div>\n            <div className=\"text-right\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}