[{"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/index.js":"1","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/app.js":"2","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/store.js":"3","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/layouts/Admin.js":"4","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/layouts/Auth.js":"5","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/axiosConfig.js":"6","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/constants/appEnums.js":"7","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/actions/index.js":"8","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/HttpUtil.js":"9","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/ContextUtil.js":"10","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/NotFound/NotFound.js":"11","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/actions/authActions.js":"12","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/reducers/rootReducer.js":"13","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Navbars/AuthNavbar.js":"14","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Navbars/AdminNavbar.js":"15","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Sidebar/Sidebar.js":"16","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Headers/HeaderStats.js":"17","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/reducers/authReducer.js":"18","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/actionsTypes.js":"19","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/routes/routes.js":"20","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/auth/Register.js":"21","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/auth/Login.js":"22","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/constants/appConstants.js":"23","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/config.js":"24","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/Dashboard.js":"25","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardStats.js":"26","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardLineChart.js":"27","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardBarChart.js":"28","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardSocialTraffic.js":"29","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardPageVisits.js":"30","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Dropdowns/PagesDropdown.js":"31","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Dropdowns/UserDropdown.js":"32","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Dropdowns/NotificationDropdown.js":"33","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/Project.js":"34","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Headers/Header.js":"35","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/ExistingProject.js":"36","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/NewProject.js":"37","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/constants/fakeData.js":"38","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/TableHeaderUtil.js":"39","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/ProjectUtil.js":"40","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js":"41","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Equipment.js":"42","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js":"43","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ClientInfo.js":"44","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js":"45","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js":"46","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/Grid.js":"47","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/DefaultValues.js":"48","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/TrackingSheet.js":"49","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/DataInput.js":"50","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/OcReport.js":"51","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/DailyLog.js":"52","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Modal/FileUploadModal.js":"53","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Modal/ConfirmationModal.js":"54","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/DataEditor/PasswordInput.js":"55","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/DataEditor/SelectEditor.js":"56","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/Acccount.js":"57","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ProjectInfo.js":"58","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/constants/formInitialValues.js":"59","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/DataEditor/NumberInput.js":"60","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/FormDataSerializer.js":"61","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/DataEditor/SelectShiftEditor.js":"62"},{"size":625,"mtime":1624987575092,"results":"63","hashOfConfig":"64"},{"size":3265,"mtime":1628815776669,"results":"65","hashOfConfig":"64"},{"size":240,"mtime":1624419564869,"results":"66","hashOfConfig":"64"},{"size":12071,"mtime":1628815776673,"results":"67","hashOfConfig":"64"},{"size":1199,"mtime":1628815776673,"results":"68","hashOfConfig":"64"},{"size":268,"mtime":1628128171179,"results":"69","hashOfConfig":"64"},{"size":3455,"mtime":1632972768093,"results":"70","hashOfConfig":"64"},{"size":109,"mtime":1624419564868,"results":"71","hashOfConfig":"64"},{"size":552,"mtime":1628815776674,"results":"72","hashOfConfig":"64"},{"size":170,"mtime":1624428573246,"results":"73","hashOfConfig":"64"},{"size":200,"mtime":1628815776672,"results":"74","hashOfConfig":"64"},{"size":632,"mtime":1628815776673,"results":"75","hashOfConfig":"64"},{"size":133,"mtime":1624419564869,"results":"76","hashOfConfig":"64"},{"size":2409,"mtime":1625874019198,"results":"77","hashOfConfig":"64"},{"size":2096,"mtime":1628815776672,"results":"78","hashOfConfig":"64"},{"size":14047,"mtime":1624451957250,"results":"79","hashOfConfig":"64"},{"size":2399,"mtime":1624408004271,"results":"80","hashOfConfig":"64"},{"size":969,"mtime":1628815776674,"results":"81","hashOfConfig":"64"},{"size":205,"mtime":1628815776674,"results":"82","hashOfConfig":"64"},{"size":2959,"mtime":1628815776674,"results":"83","hashOfConfig":"64"},{"size":7553,"mtime":1628889232946,"results":"84","hashOfConfig":"64"},{"size":6910,"mtime":1628889292433,"results":"85","hashOfConfig":"64"},{"size":3351,"mtime":1632972683890,"results":"86","hashOfConfig":"64"},{"size":87,"mtime":1628815776672,"results":"87","hashOfConfig":"64"},{"size":537,"mtime":1628815776675,"results":"88","hashOfConfig":"64"},{"size":2491,"mtime":1624449851193,"results":"89","hashOfConfig":"64"},{"size":3645,"mtime":1624449851183,"results":"90","hashOfConfig":"64"},{"size":3437,"mtime":1624449851179,"results":"91","hashOfConfig":"64"},{"size":7596,"mtime":1624449851192,"results":"92","hashOfConfig":"64"},{"size":6278,"mtime":1624449851185,"results":"93","hashOfConfig":"64"},{"size":3915,"mtime":1624449859112,"results":"94","hashOfConfig":"64"},{"size":3700,"mtime":1624451752686,"results":"95","hashOfConfig":"64"},{"size":2400,"mtime":1624449859111,"results":"96","hashOfConfig":"64"},{"size":2015,"mtime":1628815776682,"results":"97","hashOfConfig":"64"},{"size":318,"mtime":1624495124270,"results":"98","hashOfConfig":"64"},{"size":4075,"mtime":1628815776681,"results":"99","hashOfConfig":"64"},{"size":7552,"mtime":1628815776681,"results":"100","hashOfConfig":"64"},{"size":11408,"mtime":1630014567898,"results":"101","hashOfConfig":"64"},{"size":8658,"mtime":1634170968441,"results":"102","hashOfConfig":"64"},{"size":1971,"mtime":1628815776674,"results":"103","hashOfConfig":"64"},{"size":6840,"mtime":1628815776670,"results":"104","hashOfConfig":"64"},{"size":2587,"mtime":1628815776670,"results":"105","hashOfConfig":"64"},{"size":8626,"mtime":1634161747243,"results":"106","hashOfConfig":"64"},{"size":7332,"mtime":1630015120870,"results":"107","hashOfConfig":"64"},{"size":10568,"mtime":1628815776671,"results":"108","hashOfConfig":"64"},{"size":7368,"mtime":1628815776670,"results":"109","hashOfConfig":"64"},{"size":3242,"mtime":1628815776671,"results":"110","hashOfConfig":"64"},{"size":73226,"mtime":1629372424559,"results":"111","hashOfConfig":"64"},{"size":71535,"mtime":1634176802326,"results":"112","hashOfConfig":"64"},{"size":3507,"mtime":1625874019200,"results":"113","hashOfConfig":"64"},{"size":5588,"mtime":1630015869674,"results":"114","hashOfConfig":"64"},{"size":11800,"mtime":1628815776675,"results":"115","hashOfConfig":"64"},{"size":1410,"mtime":1628815776671,"results":"116","hashOfConfig":"64"},{"size":729,"mtime":1625874019198,"results":"117","hashOfConfig":"64"},{"size":707,"mtime":1628058300905,"results":"118","hashOfConfig":"64"},{"size":1281,"mtime":1627926667911,"results":"119","hashOfConfig":"64"},{"size":823,"mtime":1628815776675,"results":"120","hashOfConfig":"64"},{"size":2531,"mtime":1628815776670,"results":"121","hashOfConfig":"64"},{"size":3811,"mtime":1634170492290,"results":"122","hashOfConfig":"64"},{"size":701,"mtime":1628815776671,"results":"123","hashOfConfig":"64"},{"size":13871,"mtime":1634170623448,"results":"124","hashOfConfig":"64"},{"size":1225,"mtime":1634161739749,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"1xfaacq",{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"128"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"128"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"128"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"128"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"128"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"128"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"128"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/index.js",[],["262","263"],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/app.js",["264","265","266"],"import config from \"config\";\nimport axios from \"axiosConfig\";\nimport Auth from \"layouts/Auth.js\";\nimport Admin from \"layouts/Admin.js\";\nimport ENUMS from \"constants/appEnums\";\nimport { useDispatch } from \"react-redux\";\nimport allActions from 'redux/actions/index';\nimport { AppContext } from \"util/ContextUtil\";\nimport React, { useState, useEffect } from \"react\";\nimport NotFound from \"components/NotFound/NotFound\";\nimport { useToasts } from 'react-toast-notifications';\nimport { BrowserRouter, Route, Switch, Redirect, useHistory } from \"react-router-dom\";\nimport FAKE_DATA from \"constants/fakeData\";\nimport HttpUtil from \"util/HttpUtil\";\n\nexport default function Application () {\n    const dispatch = useDispatch();\n    const { addToast } = useToasts();\n    const history = useHistory();\n\n    const [isAuthenticated, userHasAuthenticated] = useState(false);\n    const [isAuthenticating, setIsAuthenticating] = useState(true);\n\n    const logOutUser = () => {\n        userHasAuthenticated(false);\n        dispatch(allActions.authActions.userLoggedOut());\n        localStorage.removeItem('JWT');\n        history.push('/auth/login');\n    }\n\n    /**\n     * Method to save user data in redux store and set local storage with JWT\n     * @param {Object} data \n     */\n     const saveUserState = (data) => {\n        console.log(data, 'here');\n        userHasAuthenticated(true);\n        dispatch(allActions.authActions.setUserState(data.user));\n        dispatch(allActions.authActions.setUserProjectIds(data.project_ids));\n    }\n\n\n    useEffect(() => {\n        const onLoad = async () => {\n            if (localStorage.getItem('JWT')) {\n                axios.get(config.API_URL + ENUMS.API_ROUTES.AUTH_STATUS,\n                {\n                    ...HttpUtil.adminHttpHeaders()\n                })\n                .then(res => {\n                    saveUserState(res.data.data);\n                    userHasAuthenticated(true);\n                    setIsAuthenticating(false);\n                })\n                .catch(error => {\n                    setIsAuthenticating(false);\n                    if (error.response) {\n                        // logOutUser();\n                    }\n                })\n            }\n            else {\n                setIsAuthenticating(false);\n            }\n        }      \n        onLoad();\n    }, [addToast, dispatch]);\n  \n    return (\n        <>\n            { !isAuthenticating &&\n            <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\n                <BrowserRouter>\n                    <Switch>\n                        <Route path={ENUMS.ROUTES.ADMIN} render={props => <Admin {...props} isAuthenticated={isAuthenticated} />} />\n                        <Route path={ENUMS.ROUTES.AUTH} render={props => <Auth {...props} isAuthenticated={isAuthenticated} />} />\n                        {/* \n                        // TODO: remove the comments\n                        <Redirect from=\"/\" to=\"/auth/home\" /> \n                        */} \n                        <Redirect from=\"/\" to=\"/auth/login\" />\n                        <Route render={props => <NotFound {...props} />} />\n                    </Switch>\n                </BrowserRouter>\n            </AppContext.Provider>\n            }\n        </>\n    )\n}\n","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/store.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/layouts/Admin.js",["267","268","269","270"],"import routes from \"routes/routes.js\";\nimport axios from \"axiosConfig\";\nimport config from \"config\";\nimport { useSelector } from \"react-redux\";\nimport { Layout, Menu, Breadcrumb, Spin } from 'antd';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Switch, Route, Redirect, useHistory, useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\n\n// components\nimport ENUMS from \"constants/appEnums\";\nimport APP_CONSTANTS from \"constants/appConstants\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\nimport HttpUtil from \"util/HttpUtil\";\nimport allActions from \"redux/actions\";\n\n\nconst { Content, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nexport default function Admin(props) {\n    const history = useHistory();\n    const location = useLocation();\n\n    const dispatch = useDispatch();\n\n    // const user = useSelector(state => state.authReducer.user);\n    const projectIds = useSelector(state => state.authReducer.userProjectIds);\n    \n    const [noSidebarLayout, setNoSidebarLayout] = useState(false);\n    const [sidebarMenu, setSidebarMenu] = useState([]);\n    const [defaultSelectedMenuKey, setDefaultSelectedMenuKey] = useState();\n    const [defaultOpenMenu, setDefaultOpenMenu] = useState();\n    // const [pages, setPages] = useState([]);\n\n    const getRoutes = (routes) => {\n        if (!props.isAuthenticated) {\n          return <Redirect to={{\n              pathname: '/auth/login',\n              state: { from: props.location }\n            }}\n          />\n        }\n        return routes.map((prop, key) => {\n        if (prop.layout === ENUMS.ROUTES.ADMIN) {\n            return (\n            <Route\n                path={prop.layout + prop.path}\n                component={prop.component}\n                key={key}\n            />\n            );\n        } else {\n            return null;\n        }\n        });\n    };\n\n    const menuChange = (path, wellId, projectId) => {\n        history.push({\n            pathname: '/admin' + path,\n            search: '?projectId=' + projectId + '&wellId=' + wellId,\n            state: { projectId: projectId, wellId: wellId }\n        });\n    }\n\n    const fetchProjectById = (projectId) => {\n        if (projectId) {\n            //FETCH PROJECT DETAILS\n            axios.get(config.API_URL + ENUMS.API_ROUTES.PROJECT_GET + '/' + projectId,\n            {\n                ...HttpUtil.adminHttpHeaders(),\n            })\n            .then(res => {\n                if(res.status == 200 && res.data) {\n                    setNoSidebarLayout(false);\n                    const projectId = res.data.data.project.id;\n                    dispatch(allActions.authActions.setCurrentProject(res.data.data.project));\n                    const wellInfo = _.sortBy(res.data.data.project.wells, function(w) { return w.id; });\n                    const menu = wellInfo.map((well, index) => {\n                        return <SubMenu key={\"menu\"+(well.id)} title={well.well_name}>\n                            <Menu.Item key={\"data-input/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.DATA_INPUT, well.id, projectId) }}>Data input</Menu.Item>\n                            <Menu.Item key={\"daily-log/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.DAILY_LOG, well.id, projectId) }}>Daily log</Menu.Item>\n                            <Menu.Item key={\"default-values/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.DEFAULT_VALUES, well.id, projectId) }}>Default values</Menu.Item>\n                            <Menu.Item key={\"tracking-sheet/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.TRACKING_SHEET, well.id, projectId) }}>Tracking sheet</Menu.Item>\n                            <Menu.Item key={\"qc-report/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.OC_REPORT, well.id, projectId) }}>QC report</Menu.Item>\n                        </SubMenu>\n                    });\n                    setSidebarMenu(menu);\n                }\n            })\n            .catch(error => {\n                if (error.response) {\n                    console.log(error.response);\n                }\n            })\n        } else {\n            const notFoundUrl = ENUMS.ROUTES.AUTH + ENUMS.ROUTES.NOTFOUND;\n            history.push(notFoundUrl);\n        }\n    }\n\n    useEffect(() => {\n        if (props.isAuthenticated) {\n            console.log('here', projectIds)\n            if (APP_CONSTANTS.ROUTES_WITHOUT_SIDEBAR.indexOf(history.location.pathname) > -1) {\n                setNoSidebarLayout(true);\n                setSidebarMenu([]);\n                // setPages(history.location.pathname.split(\"/admin/\")[1].split(\"/\")[0].split(\"-\"));\n            } else {\n                if (sidebarMenu.length < 1) {\n                    if (location.state && location.state.projectId) {\n                        fetchProjectById(location.state.projectId);\n\n                        const subMenu = location.pathname.split(\"/admin/\")[1] + '/' + location.state.wellId;\n                        const mainMenu = \"menu\" + location.state.wellId;\n                        setDefaultSelectedMenuKey(subMenu); // sub - inside\n                        setDefaultOpenMenu(mainMenu); // main\n                    }\n                    else if (location.search) {\n                        const params = new URLSearchParams(location.search);\n                        const projectIdSearch = params.get('projectId');\n                        const wellIdSearch = params.get('wellId');\n                        fetchProjectById(projectIdSearch);\n                        \n                        const subMenu = location.pathname.split(\"/admin/\")[1] + '/' + wellIdSearch;\n                        const mainMenu = \"menu\" + wellIdSearch;\n                        setDefaultSelectedMenuKey(subMenu); // sub - inside\n                        setDefaultOpenMenu(mainMenu); // main\n                    } else {\n                        const notFoundUrl = ENUMS.ROUTES.AUTH + ENUMS.ROUTES.NOTFOUND;\n                        history.push(notFoundUrl);\n                    }\n                }\n                // const defaultSelectedSubMenu = history.location.pathname.split(\"/admin/\")[1];\n                // const defaultOpenMenu = \"menu\" + history.location.pathname.split(\"/admin/\")[1].split(\"/\")[1];\n                // console.log(defaultSelectedSubMenu)\n                // setDefaultSelectedMenuKey(defaultSelectedSubMenu);\n                // setDefaultOpenMenu(defaultOpenMenu);\n                // console.log(defaultOpenMenu);\n                // setNoSidebarLayout(false);\n                // if project is selected\n                // if(!_.isEmpty(project)) {\n                //     const menuChange = (path, id) => {\n                //         history.push('/admin' + path + '/'+ id)\n                //     }\n                    \n                //     // const wellInfo = project.wellInfoValues;\n                //     console.log(wellInfo);\n                //     const menu = wellInfo.map((well, index) => {\n                //         return <SubMenu key={\"menu\"+(well.id)} title={well.well_name}>\n                //             <Menu.Item key={\"data-input/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.DATA_INPUT, well.id) }}>Data input</Menu.Item>\n                //             <Menu.Item key={\"daily-log/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.DAILY_LOG, well.id) }}>Daily log</Menu.Item>\n                //             <Menu.Item key={\"default-values/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.DEFAULT_VALUES, well.id) }}>Default values</Menu.Item>\n                //             <Menu.Item key={\"tracking-sheet/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.TRACKING_SHEET, well.id) }}>Tracking sheet</Menu.Item>\n                //             <Menu.Item key={\"qc-report/\" + well.id} onClick={() => { menuChange(ENUMS.ROUTES.OC_REPORT, well.id) }}>QC report</Menu.Item>\n                //         </SubMenu>\n                //     });\n                //     console.log(menu)\n                //     setSidebarMenu(menu);\n                // };\n            }\n        } else {\n            history.push('/auth/login')\n        }\n    }, []);\n\n    useEffect(() => {\n        return history.listen((location) => {\n            if (props.isAuthenticated) {\n                if (APP_CONSTANTS.ROUTES_WITHOUT_SIDEBAR.indexOf(history.location.pathname) > -1) {\n                    setNoSidebarLayout(true);\n                    setSidebarMenu([]);\n                    // setPages(history.location.pathname.split(\"/admin/\")[1].split(\"/\")[0].split(\"-\"));\n                } else {\n                    if (sidebarMenu.length < 1) {\n                        if (location.state && location.state.projectId) {\n                            fetchProjectById(location.state.projectId);\n                        }\n                        else if (location.search) {\n                            const params = new URLSearchParams(location.search);\n                            const projectIdSearch = params.get('projectId');\n                            fetchProjectById(projectIdSearch);\n                        }\n                    }\n                }\n            } else {\n                history.push('/auth/login')\n            }\n        }) \n    }, [history])\n\n    return (\n        <>\n            {\n                noSidebarLayout\n                ? <Layout className=\"layout\">\n                    <AdminNavbar withLogo={true} />\n                    <Content style={{ padding: '0 50px' }}>\n                        {/* <Breadcrumb style={{ margin: '16px 0' }}>\n                            {\n                                pages.map((page, index) => {\n                                    return <Breadcrumb.Item key={index}><span className=\"capitalize\">{page}</span></Breadcrumb.Item>\n                                })\n                            }\n                            \n                        </Breadcrumb> */}\n                            {/* <Breadcrumb.Item>List</Breadcrumb.Item>\n                            <Breadcrumb.Item>App</Breadcrumb.Item> */}\n                        <div className=\"site-layout-content mb-12 p-5 bg-white\">\n                            <Switch>\n                                {getRoutes(routes)}\n                                <Redirect from=\"*\" to=\"/admin/dashboard\" />\n                            </Switch>\n                        </div>\n                    </Content>\n                </Layout>\n                : ((sidebarMenu.length > 0)\n                    ? <Layout>\n                        <Sider\n                            style={{\n                                overflow: 'auto',\n                                height: '100vh',\n                                position: 'fixed',\n                                left: 0,\n                            }}\n                            width={250}\n                            className=\"site-layout-background\"\n                        >\n                            <div className=\"logo\"><img alt=\"seismos logo\" src={require(\"assets/img/seismos/seismos_logo_animated.gif\").default}></img></div>\n                            <Menu theme=\"\" mode=\"inline\" defaultSelectedKeys={[defaultSelectedMenuKey]} defaultOpenKeys={[defaultOpenMenu]} className=\"sidebar-margin-top\">\n                                {sidebarMenu}\n                            </Menu>\n                        </Sider>\n                        <Layout className=\"site-layout with-sedebar\" style={{ marginLeft: 250 }}>\n                            <AdminNavbar withLogo={false}/>\n                            <Content style={{ margin: '88px 16px 0', overflow: 'initial' }}>\n                                <Switch>\n                                    {getRoutes(routes)}\n                                    <Redirect from=\"*\" to=\"/admin/dashboard\" />\n                                </Switch>\n                            </Content>\n                        </Layout>\n                    </Layout>\n                    : (<div className=\"spin-overlay\"><Spin size=\"large\" spinning={true}></Spin></div>))\n            }\n        </>\n    );\n}\n","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/layouts/Auth.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/axiosConfig.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/constants/appEnums.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/actions/index.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/HttpUtil.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/ContextUtil.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/NotFound/NotFound.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/actions/authActions.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/reducers/rootReducer.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Navbars/AuthNavbar.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Navbars/AdminNavbar.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Sidebar/Sidebar.js",[],["271","272"],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Headers/HeaderStats.js",[],["273","274"],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/reducers/authReducer.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/redux/actionsTypes.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/routes/routes.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/auth/Register.js",["275","276","277"],"import { Form, Input, Card, Divider, Button, Row, Col, Spin } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport React, { useState } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport axios from \"axiosConfig\";\nimport config from \"config\";\nimport allActions from 'redux/actions/index';\nimport ENUMS from \"constants/appEnums\";\nimport HttpUtil from \"util/HttpUtil\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { useDispatch } from 'react-redux';\nimport { useAppContext } from 'util/ContextUtil';\n\nexport default function Register() {\n    const [isLoading, setIsLoading] = useState(false);\n    let history = useHistory();\n    let location = useLocation();\n    const { addToast } = useToasts();\n    const dispatch = useDispatch();\n    const { userHasAuthenticated } = useAppContext();\n\n    /**\n     * Method to make API call for user login\n     */\n    const handleRegister = (data) => {\n        if(data.confirm_password != data.password) {\n            addToast(\"Password does not match with confirm password!\", { appearance: 'error', autoDismiss: true });\n        } else {\n            setIsLoading(true);\n            axios.post(config.API_URL + ENUMS.API_ROUTES.NEW_USER,\n                {\n                    username: data.username,\n                    email: data.email,\n                    password: data.password\n                }, {...HttpUtil.authHttpHeaders})\n                .then(res => {\n                    setIsLoading(false);\n                    if(res.status = 200 && res.data) {\n                        saveUserState(res.data.data);\n                    }\n                })\n                .catch(e => {\n                    setIsLoading(false);\n                });\n        }\n    }\n\n    /**\n     * Method to save user data in redux store and set local storage with JWT\n     * @param {Object} data \n     */\n     const saveUserState = (data) => {\n        console.log(data)\n        localStorage.setItem('JWT', data.access_token);\n        userHasAuthenticated(true);\n        dispatch(allActions.authActions.setUserState(data.user));\n        dispatch(allActions.authActions.setUserProjectIds(data.project_ids));\n\n        if (location && location.state && location.state.from) {\n            history.push({\n                pathname: location.state.from.pathname,\n                search: location.state.from.search,\n                state: location.state.from.state\n            });\n        } else {\n            history.push(ENUMS.ROUTES.ADMIN + ENUMS.ROUTES.PROJECT);\n        }\n    }\n\n    return (\n        <>\n            <div className=\"container mx-auto px-4 h-full login-container\">\n                <div className=\"flex content-center items-center justify-center h-full\">\n                    <div className=\"w-full lg:w-4/12 px-4\">\n                        <Card className=\"text-center login-header-card\">\n                            <img alt=\"seismos logo\" className=\"mx-auto\" src={require(\"assets/img/seismos/seismos_logo_animated.gif\").default}></img>\n                        </Card>\n                        <Card>\n                            <h6 className=\"text-blueGray-500 text-sm text-center\">\n                                Register on Seismos\n                            </h6>\n                            <Divider></Divider>\n                            <Form\n                                name=\"normal_login\"\n                                className=\"login-form\"\n                                initialValues={{\n                                    remember: true,\n                                }}\n                                onFinish={handleRegister}\n                                >\n                                <Form.Item\n                                    name=\"username\"\n                                    rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your Username!',\n                                    },\n                                    ]}\n                                >\n                                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"email\"\n                                    rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your email!',\n                                    },\n                                    ]}\n                                >\n                                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"password\"\n                                    rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your Password!',\n                                    },\n                                    ]}\n                                >\n                                    <Input\n                                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"confirm_password\"\n                                    rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please confirm your Password!',\n                                    },\n                                    ]}\n                                >\n                                    <Input\n                                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                                    type=\"password\"\n                                    placeholder=\"Confirm password\"\n                                    />\n                                </Form.Item>\n                                <Row gutter={24} className=\"mb-6\">\n                                    <Col span={12}>\n                                        {/* <Form.Item name=\"remember\" noStyle>\n                                            <Checkbox>Remember me</Checkbox>\n                                        </Form.Item> */}\n                                    </Col>\n                                    \n                                </Row>\n\n                                <Form.Item className=\"text-center\">\n                                    {\n                                        isLoading ? \n                                        <Spin />\n                                        : <Button type=\"primary\" htmlType=\"submit\" className=\"w-full login-form-button\">\n                                                Create an account\n                                        </Button>\n                                    }\n                                </Form.Item>\n                            </Form>\n                        </Card>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/auth/Login.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/constants/appConstants.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/config.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/Dashboard.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardStats.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardLineChart.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardBarChart.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardSocialTraffic.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Cards/CardPageVisits.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Dropdowns/PagesDropdown.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Dropdowns/UserDropdown.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Dropdowns/NotificationDropdown.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/Project.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Headers/Header.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/ExistingProject.js",["278"],"import React, { useEffect, useState } from \"react\";\nimport config from \"config\";\nimport axios from \"axiosConfig\";\nimport { Card, Table, PageHeader, Button} from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport { useHistory } from \"react-router\";\nimport ENUMS from \"constants/appEnums\";\nimport HttpUtil from \"util/HttpUtil\";\n// components\nexport default function ExistingProject() {\n    const history = useHistory();\n    const columns = TableHeadersUtil.projectTable;\n    const [data, setData] = useState([]);\n\n    const [selectedProject, setSelectedProject] = useState(null);\n\n    const rowSelection = {\n        onChange: (selectedRowKeys, selectedRows) => {\n            const project = data.find(x => x.key === selectedRowKeys[0]);\n            setSelectedProject(project);\n        },\n        getCheckboxProps: (record) => ({\n          disabled: record.name === 'Disabled User',\n          // Column configuration not to be checked\n          name: record.name,\n        }),\n    };\n\n    const handleTableChange = (pagination, filters, sorter) => {\n        console.log('here')\n        // this.fetch({\n        //   sortField: sorter.field,\n        //   sortOrder: sorter.order,\n        //   pagination,\n        //   ...filters,\n        // });\n    };\n    \n    const [pagination, setPagination] = useState({});\n\n    const openProject = (e) => {\n        e.preventDefault();\n        const projectId = selectedProject.id;\n        history.push({\n            pathname: '/admin/dashboard',\n            search: '?projectId=' + projectId,\n            state: { projectId: projectId }\n        });\n    }\n\n    const fetchProjects = () => {\n        axios.get(config.API_URL + ENUMS.API_ROUTES.PROJECT_LIST,\n            {\n                ...HttpUtil.adminHttpHeaders()\n            })\n            .then(res => {\n                if (res.status === 200 && res.data) {\n                    setData(res.data.projects.map((project, index) => {\n                        return {\n                            key: index,\n                            job_number: project.job_id,\n                            id: project.id,\n                            job_name: project.job_name,\n                            project_name: project.project_name,\n                            created_by: project.created_by,\n                            created_at_date: project.created_date,\n                            created_time: project.created_time,\n                        }\n                    }))\n                }\n            })\n            .catch(e => {\n                console.log(e)\n            })\n    }\n\n    useEffect(() => {\n        fetchProjects();\n        setPagination({\n            current: 1,\n            pageSize: 5,\n            total: 10,\n        })\n    }, [])\n\n    return (\n        <>\n            <div style={{minHeight: \"80vh\"}} className=\"flex justify-center items-center bg-white\">\n                <div style={{width: '1100px'}}>\n                <PageHeader\n                    ghost={false}\n                    onBack={() => window.history.back()}\n                    title=\"Select a project to continue\"\n                    extra={[\n                        <Button\n                            key=\"1\"\n                            type=\"primary\"\n                            disabled={selectedProject ? false : true}\n                            onClick={e => openProject(e)}\n                        >\n                            Next\n                        </Button>,\n                    ]}\n                    >\n                </PageHeader>\n                    <Card>\n                        <Table\n                            rowSelection={{\n                                type: 'radio',\n                                ...rowSelection,\n                            }}\n                            pagination={false}\n                            columns={columns}\n                            dataSource={data}\n                            onChange={handleTableChange}\n                        />\n                    </Card>\n                </div>\n            </div>\n        </>\n    );\n}\n","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/NewProject.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/constants/fakeData.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/TableHeaderUtil.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/ProjectUtil.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellInfo.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/Equipment.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/CrewInfo.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ClientInfo.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/WellVolume.js",["279","280","281"],"import React, { useState } from \"react\";\nimport { Button } from 'antd';\nimport TableHeadersUtil from \"util/TableHeaderUtil\";\nimport Grid from \"components/Grid/Grid\";\nimport _ from \"lodash\";\nimport { Collapse } from 'antd';\nimport { Tooltip } from 'antd';\nimport NumberInput from \"components/Grid/DataEditor/NumberInput\";\nimport ENUMS from \"constants/appEnums\";\n\nexport default function WellVolume(props) {\n    const { Panel } = Collapse;\n    const [wellVolumeGrids, setWellVolumeGrids] = useState([]);\n    const [wellVolumeEstimationsGrids, setWellVolumeEstimationsGrids] = useState([]);\n\n    const getWellVolumeGridRow = (t) => {\n        return t.rows.map(label => {\n            const columns = [];\n            TableHeadersUtil.wellVolumeFormTableData.columns.map(column => {\n                const defaultVal = column.field === \"type\" ? label : \"\";\n                let col = null;\n                if (column.field === \"type\") {\n                    col = { \n                        value: defaultVal,\n                        field: column.field,\n                        readOnly: true,\n                        disableEvents: true\n                    }\n                } else {\n                    col = { \n                        value: defaultVal,\n                        field: column.field,\n                        required: column.required,\n                        dataEditor: NumberInput,\n                        datatype: column.datatype\n                    }\n                }\n                columns.push(col);\n                return column;\n            })\n            return columns;\n        });\n    }\n\n    const callback = (key)  => {\n    }\n\n    const getWellVolumeEstimationsGridRow = (t) => {\n        return t.rows.map(row => {\n            return [\n                { value: \"\", field: row.field, datatype: row.datatype, dataEditor: NumberInput, readOnly: (row.field === ENUMS.FORM_FIELDS.WELL_VOLUME_ESTIMATIONS.SURFACE_VOL) ? false : true },\n                { value: row.label, readOnly: true, disableEvents: true }\n            ]\n        })\n    }\n\n    const populateWellVolumeGrid = (index) => {\n        const newWellVolGrid = TableHeadersUtil.wellVolumeFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeGridRow(t));\n        }, []);\n        return newWellVolGrid;\n    }\n\n    const populateWellVolumeEstimationsGrid = (index) => {\n        const newWellVolEstimationsGrid = TableHeadersUtil.wellVolumeEstimationsFormTableData.grid.reduce((rows, t, rowIdx) => {\n            return rows.concat(getWellVolumeEstimationsGridRow(t));\n        }, []);\n        return newWellVolEstimationsGrid;\n    }\n\n    const formatNumber = (numString) => {\n        if (typeof numString === \"string\") {\n            return parseFloat(numString.replace(/,/g, ''));\n        } else {\n            return numString;\n        }\n    }\n    \n    const calculateHValue = (gridDetail, index) => {\n        const depthThisRow = gridDetail[index].find(g => g.field === \"depth_md\").value || 0;\n        const tolThisRow = gridDetail[index].find(g => g.field === \"tol\").value || 0;\n        const idThisRow = gridDetail[index].find(g => g.field === \"id\").value || 0;\n        if (depthThisRow) {\n            if (index == 2) {\n                const tolPreviousRow = gridDetail[index - 1].find(g => g.field === \"tol\").value || 0;\n                const diff = formatNumber(depthThisRow) - formatNumber(tolPreviousRow);\n                return formatNumber(idThisRow) ** 2 * 0.0009714 * diff;\n            } else {\n                const tolNextRow = gridDetail[index + 1].find(g => g.field === \"tol\").value || 0;\n                if (tolNextRow) {\n                    return formatNumber(idThisRow) ** 2 * 0.0009714 * (index == 0 ? formatNumber(tolNextRow) : (formatNumber(tolNextRow) - formatNumber(tolThisRow)));\n                } else {\n                    return formatNumber(idThisRow) ** 2 * 0.0009714 * (index == 0 ? formatNumber(depthThisRow) : (formatNumber(depthThisRow) - formatNumber(tolThisRow)));\n                }\n            }\n        }\n    }\n\n    const calculateWellVolumeEstimations = (wellVolGridData, wellVolEstGridData, index) => {\n        const hvalueCasing = calculateHValue(wellVolGridData, 0);\n        const hvalueLinear1 = calculateHValue(wellVolGridData, 1);\n        const hvalueLinear2 = calculateHValue(wellVolGridData, 2);\n        const totalHValue = (hvalueCasing || 0) + (hvalueLinear1 || 0) + (hvalueLinear2 || 0);\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolEstGridData ? wellVolEstGridData : wellVolumeEstimationsGrids);\n        const surfaveVol = newWellVolEstimationsGrid[index][0].find(wvG => wvG.field === \"surface_vol\").value || 0;\n        const bbls = formatNumber(totalHValue) + formatNumber(surfaveVol);\n        const gallons = bbls * 42;\n        newWellVolEstimationsGrid[index][1].find(k => k.field === \"bbls\").value = bbls.toFixed();\n        newWellVolEstimationsGrid[index][2].find(k => k.field === \"gallons\").value = gallons.toFixed();\n        props.setWellVolumeEstimationsFormValue(newWellVolEstimationsGrid);\n        setWellVolumeEstimationsGrids(newWellVolEstimationsGrid);\n    }\n\n    const handleWellVolumeGridChanged = (updatedGridData, index) => {\n        const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n        calculateWellVolumeEstimations(updatedGridData, null, index);\n        newWellVolGrid[index] = updatedGridData;\n        props.setWellVolumeFormValue(newWellVolGrid);\n        setWellVolumeGrids(newWellVolGrid);\n    }\n\n    const handleWellVolumeEstimationsGridChanged = (updatedGridData, index) => {\n        const newWellVolEstimationsGrid = _.cloneDeep(wellVolumeEstimationsGrids);\n        newWellVolEstimationsGrid[index] = updatedGridData;\n        calculateWellVolumeEstimations(wellVolumeGrids[index], newWellVolEstimationsGrid, index);\n    }\n\n    const gotoNextStep = () => {\n        let formValid = true;\n        const checkWellVolumeGrids = _.cloneDeep(wellVolumeGrids);\n        let validatedWellVolumeGrids = [];\n        checkWellVolumeGrids.map((grid, index) => {\n            let isWellVolumeValid = true;\n            const validatedGrid = grid.map(row => {\n                const validatedRow = row.map(cell => {\n                    if(cell.required && cell.value === \"\") {\n                        isWellVolumeValid = false;\n                        formValid = false;\n                        cell.className = 'cell-error';\n                        cell.error = true;\n                    }\n                    return cell;\n                })\n                return validatedRow;\n            })\n            \n            if(!isWellVolumeValid) {\n                validatedWellVolumeGrids.push({grid: validatedGrid, index: index});\n            }\n\n            return grid;\n        });\n        \n        if(formValid) {\n            console.log('wellVolumeGrids', wellVolumeGrids)\n            console.log('wellVolumeEstimationsGrids', wellVolumeEstimationsGrids)\n            props.next();\n        } else {\n            const newWellVolGrid = _.cloneDeep(wellVolumeGrids);\n            validatedWellVolumeGrids.map(gridData => {\n                newWellVolGrid[gridData.index] = gridData.grid;\n                return gridData;\n            })\n            props.setWellVolumeFormValue(newWellVolGrid);\n            setWellVolumeGrids(newWellVolGrid);\n        }\n    }\n\n    useState(() => {\n        if(props.wellInfoValues) {\n            let wellVolumeGridData = [];\n            let wellVolumeEstimationsGridData = [];\n            props.wellInfoValues.map((wellInfoValue, index) => {\n                if(props.wellVolumeFormValues != null && props.wellVolumeFormValues[index]) {\n                    wellVolumeGridData.push(props.wellVolumeFormValues[index])\n                } else {\n                    wellVolumeGridData.push(populateWellVolumeGrid(index));\n                }\n                if(props.wellVolumeEstimationsFormValues != null && props.wellVolumeEstimationsFormValues[index]) {\n                    wellVolumeEstimationsGridData.push(props.wellVolumeEstimationsFormValues[index] );\n                } else {\n                    wellVolumeEstimationsGridData.push(populateWellVolumeEstimationsGrid(index));\n                }\n                return wellInfoValue;\n            });\n            setWellVolumeGrids(wellVolumeGridData);\n            setWellVolumeEstimationsGrids(wellVolumeEstimationsGridData);\n        }\n    }, props);\n\n    return (\n        <>\n            <Collapse defaultActiveKey={['1']} onChange={callback}>\n            {\n                props.wellInfoValues && props.wellInfoValues.map((well, index) => {\n                    return <Panel \n                        header={well[0].value}\n                        key={index+1}\n                        extra={\n                            wellVolumeGrids[index] && wellVolumeGrids[index].find(row => row.find(cell => cell.error) ? true : false)\n                            ? <Tooltip title=\"Please fill all the fields\"><i className=\"fas fa-exclamation-circle text-red-500\"></i></Tooltip>\n                            : \"\"\n                        }\n                    >\n                        <div className=\"flex\" key={index}>\n                            <div className=\"well-volume-grid\">\n                                <Grid \n                                    columns={TableHeadersUtil.wellVolumeFormTableData.columns}\n                                    grid={wellVolumeGrids[index]}\n                                    gridValueChanged={handleWellVolumeGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                            <div className=\"p-4\"></div>\n                            <div className=\"well-volume-estimation-grid\">\n                                <Grid\n                                    columns={TableHeadersUtil.wellVolumeEstimationsFormTableData.columns(well[0].value)}\n                                    grid={wellVolumeEstimationsGrids[index]}\n                                    gridValueChanged={handleWellVolumeEstimationsGridChanged}\n                                    index={index}\n                                ></Grid>\n                            </div>\n                        </div>\n                    </Panel>\n                })\n            }\n            </Collapse>\n            <div className=\"text-right mt-8\">\n                <Button type=\"primary\" onClick={(e) => {gotoNextStep()}}>\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n}\n\n","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/JobInfo.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/Grid.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/DefaultValues.js",["282","283","284","285","286"],"import React, { useEffect, useState } from \"react\";\nimport config from \"config\";\nimport axios from \"axiosConfig\";\nimport { Card, Input, Button, Form, Divider, Tooltip, Row, Col, Select, InputNumber} from 'antd';\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { Tabs } from 'antd';\nimport ConfirmationModal from \"components/Modal/ConfirmationModal\";\nimport ENUMS from \"constants/appEnums\";\nimport HttpUtil from \"util/HttpUtil\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { useToasts } from \"react-toast-notifications\";\nimport FormInitialValues from \"constants/formInitialValues\";\nimport FormDataSerializer from \"util/FormDataSerializer\";\n\nconst { Option } = Select;\nconst { TabPane } = Tabs;\n\nexport default function DefaultValues() {\n    let location = useLocation();\n    const { addToast } = useToasts();\n    const history = useHistory();\n\n    const [modalData, setModalData] = useState(null);\n    const [showConfirmationModal, setShowConfirmationModal] = useState(false);\n\n    const [defaultValues, setDefaultValues] = useState([]);\n    const [projectId, setProjectId] = useState();\n    const [wellId, setWellId] = useState();\n\n    const handleCancel = () => {\n        setShowConfirmationModal(false);\n        setModalData(null);\n    }\n\n    const handleChangeConfirmed = (data) => {\n        axios.put(config.API_URL + ENUMS.API_ROUTES.DEFAULT_VALUE + '/' + wellId,\n            {\n                ...FormDataSerializer.defultValueFormSubmitSerializer(data)\n            }, {...HttpUtil.adminHttpHeaders()})\n            .then(res => {\n                if (res.status === 200 && res.data) {\n                    setShowConfirmationModal(false);\n                    setModalData(null);\n                    addToast(\"Default values updated successfully!\", { appearance: 'success', autoDismiss: true });\n                }\n            })\n            .catch(e => {\n                if(e.response.status === 403) {\n                    addToast(\"Incorrect username or password!\", { appearance: 'error', autoDismiss: true });\n                }\n            });\n    }\n\n    const onFinish = (values) => {\n        const newvalue = {\n            ...FormInitialValues.defaultValueForm,\n            ...values\n        }\n        setModalData(newvalue);\n        setShowConfirmationModal(true);\n    };\n    \n    const callback = (key) => {\n        console.log(key);\n    }\n\n    const onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const fetchDefaultValues = (well_id) => {\n        axios.get(config.API_URL + ENUMS.API_ROUTES.DEFAULT_VALUE + '/' + well_id,\n            {\n                ...HttpUtil.adminHttpHeaders(),\n            })\n            .then(res => {\n                if (res.status === 200 && res.data) {\n                    console.log(res.data)\n                }\n            })\n            .catch(e => {\n                console.log(e)\n            })\n    }\n\n    const setParams = (locationData) => {\n        if (locationData.state && locationData.state.projectId) {\n            setProjectId(locationData.state.projectId);\n            setWellId(locationData.state.wellId);\n            fetchDefaultValues(locationData.state.wellId);\n        }\n        else if (locationData.search) {\n            const params = new URLSearchParams(locationData.search);\n            const projectIdSearch = params.get('projectId');\n            const wellIdSearch = params.get('wellId');\n            setProjectId(projectIdSearch);\n            setWellId(wellIdSearch);\n            fetchDefaultValues(wellIdSearch);\n        }\n    }\n\n    useEffect(() => {\n        setParams(location);\n    }, [])\n\n    useEffect(() => {\n        return history.listen((locationData) => { \n            if(location.pathname === (ENUMS.ROUTES.ADMIN + ENUMS.ROUTES.DEFAULT_VALUES)) {\n                setParams(locationData);\n            }\n        }) \n    }, [history])\n\n    return (\n        <>\n            <Card bordered={false} style={{ width: '100%', marginBottom: '5px' }}>\n                <div className=\"max-w-580-px mx-auto\">\n                    <div>\n                        On the template page fill any information that may be relevant across all stages,\n                        such information is found in completion procedures etc. Common information that can be\n                        normally filled out in the template is the following:\n                    </div>\n                </div>\n            </Card>\n            <Card bordered={false} style={{ width: '100%', marginBottom: '1.5rem' }}>\n                <Form\n                    labelAlign=\"left\"\n                    name=\"basic\"\n                    initialValues={FormInitialValues.defaultValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    className=\"default-values-form\"\n                >\n                    <Tabs onChange={callback} type=\"card\">\n                        <TabPane tab=\"Parameter bounds\" key=\"1\">\n                            <Divider orientation=\"left\" plain><strong>Parameter bounds</strong></Divider>\n                            <Row gutter={24}>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                C1 Min\n                                                <Tooltip title=\"Velocity m/s\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"c1_min\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                C1 Max\n                                                <Tooltip title=\"Velocity m/s\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"c1_max\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row gutter={24}>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                C2 Min\n                                                <Tooltip title=\"Velocity m/s\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"c2_min\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                C2 Max\n                                                <Tooltip title=\"Velocity m/s\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"c2_max\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row gutter={24}>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                C3 Min\n                                                <Tooltip title=\"Velocity m/s\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"c3_min\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                C3 Max\n                                                <Tooltip title=\"Velocity m/s\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"c3_max\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row gutter={24}>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Q1 Min\n                                                <Tooltip title=\"Wellbore Quality/Energy, no unit\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"q_min\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>    \n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Q1 Max\n                                                <Tooltip title=\"Wellbore Quality/Energy, no unit\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"q_max\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row gutter={24}>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                K min\n                                                <Tooltip title=\"Permeability, Darcy mD\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"k_min\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                K max\n                                                <Tooltip title=\"Permeability, Darcy mD\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"k_max\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Form.Item className=\"text-right\">\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Save\n                                </Button>\n                            </Form.Item>\n                        </TabPane>\n                        <TabPane tab=\"Model Params\" key=\"2\">\n                            <Divider orientation=\"left\" plain><strong>Model Params</strong></Divider>\n                            <Row gutter={24}>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Model\n                                                <Tooltip title=\"-\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"model\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"assymetric\">Assymetric</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Response\n                                                <Tooltip title=\"-\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"response\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"full\">Full</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row gutter={24}>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Source\n                                                <Tooltip title=\"-\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"source\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"reflection\">Reflection</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Layer\n                                                <Tooltip title=\"-\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"layer\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                        \n                            <Form.Item className=\"text-right\">\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Save\n                                </Button>\n                            </Form.Item>\n                        </TabPane>\n                        <TabPane tab=\"Fluid properties\" key=\"3\">\n                            <Divider orientation=\"left\" plain><strong>Fluid properties</strong></Divider>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Viscosity\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"viscosity\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Input />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Density\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"density\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Compressibility\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"compressibility\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                        \n                            <Form.Item className=\"text-right\">\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Save\n                                </Button>\n                            </Form.Item>\n                        </TabPane>\n                        <TabPane tab=\"Filtering\" key=\"4\">\n                            <Divider orientation=\"left\" plain><strong>Filtering</strong></Divider>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                F Low (Hz)\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"f_low_hz\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                F High (Hz)\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"f_high_hz\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                New Sample Rate\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"new_sample_rate\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Data Sample Rate\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"data_sample_rate\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                        \n                            <Form.Item className=\"text-right\">\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Save\n                                </Button>\n                            </Form.Item>\n                        </TabPane>\n                        <TabPane tab=\"Inversion\" key=\"5\">\n                            <Divider orientation=\"left\" plain><strong>Inversion</strong></Divider>\n                            <Row>\n                            \n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Algorithm\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"algorithm\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"DiffEvolv\">DiffEvolv</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Grid density\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"grid_density\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Weighting\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"weighting\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"No\">No</Option>\n                                            <Option value=\"Yes\">Yes</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                wlevexp\n                                                <Tooltip title=\"\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"wlevexp\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Loop\n                                                <Tooltip title=\"subdirectory with this name must exist\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"loop\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"No\">No</Option>\n                                            <Option value=\"Yes\">Yes</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Method\n                                                <Tooltip title=\"subdirectory with this name must exist\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"method\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"fix_w\">Fix w</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Total Width\n                                                <Tooltip title=\"subdirectory with this name must exist\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"total_width\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Tolerance\n                                                <Tooltip title=\"subdirectory with this name must exist\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"tolerence\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Iterations\n                                                <Tooltip title=\"subdirectory with this name must exist\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"iterations\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                \n                            </Row>\n                        \n                            <Form.Item className=\"text-right\">\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Save\n                                </Button>\n                            </Form.Item>\n                        </TabPane>\n                        <TabPane tab=\"Well name\" key=\"6\">\n                        <Divider orientation=\"left\" plain><strong>Well name</strong></Divider>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Company\n                                                <Tooltip title=\"subdirectory with this name must exist\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"company\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Input />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Well\n                                                <Tooltip title=\"subdirectory with this name must exist\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"well\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Input />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                        \n                            <Form.Item className=\"text-right\">\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Save\n                                </Button>\n                            </Form.Item>\n                        </TabPane>\n                        <TabPane tab=\"Special defaults\" key=\"7\">\n                            <Divider orientation=\"left\" plain><strong>Special defaults</strong>  (do not change unless the consequences are understood)</Divider>\n                            {/* <strong>Warning: If well has sliding sleeve in the closed position at the begining of stage 1, the oppening pressure has no relation to the reservoir pressure. At the begining ot stage 1 ask the code to choose the reservoir pressure. </strong> */}\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Pres\n                                                <Tooltip title=\"This is reservoir pressure gradient at the surface, unit is psi/ft, Taken from the well openning pressure at stage 1 \">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"pres\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Young\n                                                {/* <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip> */}\n                                            </span>\n                                        }\n                                        name=\"young\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Overburden\n                                                {/* <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip> */}\n                                            </span>\n                                        }\n                                        name=\"overburden\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Poisson\n                                                <Tooltip title=\"Usually between 0.2-0.3, can never be greater than 0.5\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"poisson\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Eta cp\n                                                <Tooltip title=\"Usually between 10-25 for HVFR+SLW and HVFR+SLW+Gel, Between 20-30 for  Gel+XLink, Between 40-100 for Xlink\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"eta_cp\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Flui dT\n                                                <Tooltip title=\"Use 1 for SLW, Use 1 SLW+GEL, Use 2 SLW+XL, Use 2 gel+Xlink, Use 3 for Xlink\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"fluid_t\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Tect\n                                                <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"tect\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Fluid density\n                                                <Tooltip title=\"unit ppg, this is density of the wellbore fluid at the start of the job, 8.33 ppg for fresh water\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"fluid_density\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            \n                            <Divider orientation=\"left\" plain><strong>Do not change</strong></Divider>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Diverter time\n                                                <Tooltip title=\"If they apply Diverter what is the percentage of the injection time prior to applying the diverter (here 70%)\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"diverter_time\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Met res\n                                                <Tooltip title=\"Use 1 to use Ibrahim's method in calculating the reservoir pressure and 2 to use Dan's method\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"met_res\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                FFKw Correction\n                                                <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"ffkw_correction\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                K MPa\n                                                <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"k_mpa\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Nu lim\n                                                <Tooltip title=\"What is the allowable pecentage change of Poissson Ratio per stage\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"nu_lim\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Per Red\n                                                <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"perRed\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Start1\n                                                <Tooltip title=\"Starting time for fitting, unit is seconds.\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"start1\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Beta ss\n                                                <Tooltip title=\"Use 0.83 for all formations other than Haynesville or formations with very high Temp. for Hayneville and very high Temp formations use use 0.8\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"beta_ss\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                St lim\n                                                <Tooltip title=\"The limit for the starting time, (unit psi/sec)\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"st_lim\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Biot\n                                                <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"biot\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Shadow\n                                                <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"shadow\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                        \n                            <Divider orientation=\"left\" plain><strong>Do not change the following</strong></Divider>\n                            <Row>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                FitEndPoint\n                                                <Tooltip title=\"0 means do not cut and all the data is useful (will use from the begining till max_end_point\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"fit_end_point\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Start2\n                                                <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"start2\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                NG\n                                                <Tooltip title=\"Badstage\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"ng\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Stage Ques\n                                                <Tooltip title=\"add the stages that are questionable and strange things happen after the shut-in\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"stage_ques\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Input />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Breaker\n                                                <Tooltip title=\"Put 'N' if no Diverter, put 'Y' if all stages have Diverter and put 'V' if some has and some not\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"breaker\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"N\">N</Option>\n                                            <Option value=\"Y\">Y</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Poisson Var\n                                                <Tooltip title=\"?\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"poisson_var\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"N\">N</Option>\n                                            <Option value=\"Y\">Y</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Poisson Method\n                                                <Tooltip title=\"Put 1 to vary poisson ratio around a mean value and put 2 to vary around the previous value\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"poisson_method\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Stress Shadow\n                                                <Tooltip title=\"Use when clusters are very close and we see extreme changes in minimum stress, COP, Ageron, ...\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"stress_shadow\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"N\">N</Option>\n                                            <Option value=\"Y\">Y</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Plotraw\n                                                <Tooltip title=\"Put 'Y' to plot the raw data of the pressure and 'N' for smoothend data.\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"plotraw\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"N\">N</Option>\n                                            <Option value=\"Y\">Y</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Skip Losses\n                                                <Tooltip title=\"Skip fitting of friction losses? 'Y' or 'N'\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"skip_losses\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"N\">N</Option>\n                                            <Option value=\"Y\">Y</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Use Wns\n                                                <Tooltip title=\"Use wns cutoff value from the field? 'Y' or 'N'\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"use_wns\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"N\">N</Option>\n                                            <Option value=\"Y\">Y</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        label={\n                                            <span>\n                                                Use Wncuts\n                                                <Tooltip title=\"Use the cuts of wns for  bad stages (stages that have wns below 3600)\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"use_wncuts\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <Select>\n                                            <Option value=\"N\">N</Option>\n                                            <Option value=\"Y\">Y</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                            label={\n                                            <span>\n                                                Fit Iteration \n                                                <Tooltip title=\"Number of time to iterate the curve fitting algorithm\">\n                                                    <QuestionCircleOutlined className=\"icon-form-info\"/>\n                                                </Tooltip>\n                                            </span>\n                                        }\n                                        name=\"fit_iterations\"\n                                        style={{marginLeft: '5rem' }}\n                                    >\n                                        <InputNumber className=\"w-100\"/>\n                                    </Form.Item>\n                                </Col>                    \n                            </Row>\n                        \n                            <Form.Item className=\"text-right\">\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Save\n                                </Button>\n                            </Form.Item>\n                        </TabPane>\n                    </Tabs>\n                </Form>\n            </Card>\n            {\n                showConfirmationModal && \n                <ConfirmationModal\n                    isModalVisible={showConfirmationModal}\n                    handleCancel={handleCancel}\n                    handleOk={handleChangeConfirmed}\n                    modalTitle={\"Save Defaults\"}\n                    modalText={\"Are you sure you want change default values ?\"}\n                    footerButtons={{cancel_text: 'Cancel', confirm_text: 'Yes'}}\n                    data={modalData}\n                >\n                </ConfirmationModal>\n            } \n        </>\n    );\n}\n","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/TrackingSheet.js",["287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303"],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/DataInput.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/OcReport.js",["304","305"],"import React, { useEffect, useState } from \"react\";\nimport config from \"config\";\nimport axios from \"axiosConfig\";\nimport { Card, Space, Table, Button, Row, Col } from 'antd';\nimport FAKE_DATA from \"constants/fakeData\";\nimport _ from \"lodash\";\nimport ENUMS from \"constants/appEnums\";\nimport HttpUtil from \"util/HttpUtil\";\nimport { ReloadOutlined } from \"@ant-design/icons\"; \nimport { CSVLink, CSVDownload } from \"react-csv\";\n\nexport default function OcReport() {\n    const [data, setData] = useState(FAKE_DATA.STAGE_REPORT);\n\n    const csvData = [\n        [\"C0\",\"C1\",\"C2\",\"C3\",\"Q0\",\"Q1\",\"Q2\",\"Q3\",\"Fit Error\",\"Nf Param Id\",\"Connect Ops Risk\",\"Connect Efficiency\",\"Connect Condition\"],\n        [\n            '1',\n            0,\n            6,\n            83,\n            6.2,\n            541,\n            0.6,\n            141,\n            '',\n            0.64,\n            0.64,\n            0.64,\n            0.64,\n        ]\n    ];\n    const approveStage = (text, record) => {\n        const index = data.findIndex(d => d.key === record.key);\n        const newData = _.cloneDeep(data);\n        newData[index].approved = true;\n        setData(newData)\n    }\n    \n    const columns = [\n        {\n            title: 'C0',\n            dataIndex: 'c0',\n            key: 'c0',\n        },\n        {\n            title: 'C1',\n            dataIndex: 'c1',\n            key: 'c1',\n        },\n        {\n            title: 'C2',\n            dataIndex: 'c2',\n            key: 'c2',\n        },\n        {\n            title: 'C3',\n            dataIndex: 'c3',\n            key: 'c3',\n        },\n        {\n            title: 'Q0',\n            dataIndex: 'q0',\n            key: 'q0',\n        },\n        {\n            title: 'Q1',\n            dataIndex: 'q1',\n            key: 'q1',\n        },\n        {\n            title: 'Q2',\n            dataIndex: 'q2',\n            key: 'q2',\n        },\n        {\n            title: 'Q3',\n            dataIndex: 'q3',\n            key: 'q3',\n        },\n        {\n            title: 'Fit Error',\n            dataIndex: 'fit_error',\n            key: 'fit_error',\n        },\n        {\n            title: 'Nf Param Id',\n            dataIndex: 'nf_param_id',\n            key: 'nf_param_id',\n        },\n        {\n            title: 'Connect Ops Risk',\n            dataIndex: 'connect_ops_risk',\n            key: 'connect_ops_risk',\n        },\n        {\n            title: 'Connect Efficiency',\n            dataIndex: 'connect_efficiency',\n            key: 'connect_efficiency',\n        },\n        {\n            title: 'Connect Condition',\n            dataIndex: 'connect_condition',\n            key: 'connect_condition',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Space size=\"middle\">\n                    {   record.approved \n                        ? 'Approved'\n                        : <Button type=\"primary\" onClick={(e) => approveStage(text, record)}>Approve</Button>\n                    }\n                </Space>\n            ),\n        },\n    ];\n    \n\n    const renderBody = (props, columns) => {\n        return (\n          <tr className={props.className}>\n            {columns.map((item, idx) => {\n                // console.log(item)\n              if (!item.hidden) {\n                return props.children[idx]\n              }\n            })}\n          </tr>\n        );\n    }\n\n    const fetchQcReport = () => {\n        axios.get(config.API_URL + ENUMS.API_ROUTES.QC_REPORT + '/'+3,\n            {\n                ...HttpUtil.adminHttpHeaders(),\n            })\n            .then(res => {\n                console.log(res);\n                if (res.status === 200 && res.data) {\n                    \n                }\n            })\n            .catch(e => {\n                console.log(e)\n            })\n    }\n\n    useEffect(() => {\n        fetchQcReport();\n    }, [])\n    return (\n        <>\n            <Card bordered={false} style={{ width: '100%', marginBottom: '5px' }}>\n                <div className=\"\">\n                    <Row gutter={24} className=\"flex items-center\">\n                        <Col span={20}>\n                            <div><strong>QC Report</strong></div>\n                        </Col>\n                        <Col span={4}>\n                            <div>\n                            <Button type=\"secondary\"><ReloadOutlined /> Refresh</Button>\n                            </div>\n                        </Col>\n                    </Row>\n                </div>\n            </Card>\n            <Card>\n                <Table\n                    columns={columns}\n                    dataSource={data}\n                    components={{\n                        body: {\n                          row: (props) => renderBody(props, columns)\n                        },\n                      }}\n                />\n                <div className=\"\">\n                    <Row gutter={24} className=\"flex items-center\">\n                        <Col span={20}>\n                            <Button type=\"primary\" className=\"ml-3\">\n                                <CSVLink data={csvData}>Save Report</CSVLink>\n                            </Button>\n                        </Col>\n                        <Col span={3}>\n                            <div>\n                            <Button type=\"primary\" disabled={data.filter(d => d.approved).length < 1}>Sync to cloud</Button>\n                            </div>\n                        </Col>\n                    </Row>\n                </div>\n                \n                \n            </Card>\n        </>\n    );\n}\n","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/DailyLog.js",["306","307"],"import React, { useEffect, useState } from \"react\";\nimport config from \"config\";\nimport axios from \"axiosConfig\";\nimport { Form, Button, Row, Col, Card, Input, DatePicker, TimePicker, Table } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport \"./DailyLog.css\";\nimport { useToasts } from \"react-toast-notifications\";\nimport ENUMS from \"constants/appEnums\";\nimport HttpUtil from \"util/HttpUtil\";\nimport { useHistory, useLocation } from \"react-router\";\nimport moment from \"moment\";\n\nexport default function DailyLog() {\n    let location = useLocation();\n    const { addToast } = useToasts();\n    const history = useHistory();\n    const [form] = Form.useForm();\n\n    const initialFormValues = { dailyLogData: [{ date: null, time: null, description: null }] }\n\n    const [dailyLogs, setDailyLogs] = useState([]);\n    const [projectId, setProjectId] = useState();\n    const [wellId, setWellId] = useState();\n    \n    const onChange = (date, dateString)  => {\n        // console.log(date, dateString);\n    }\n\n    const columns = [\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n        },\n        {\n            title: 'Time',\n            dataIndex: 'time',\n            key: 'time',\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        },\n    ];\n    \n    const resetForm = () => {\n        form.resetFields();\n    }\n\n    const onFinish = values => {\n        if (values.dailyLogData.length < 1)\n            return;\n        const val = values.dailyLogData.map(log => {\n            return {\n                description: log.description,\n                date: Number(moment(log.date).set(\"hour\", moment(log.time).hours()).set(\"minute\", moment(log.time).minutes()).set(\"seconds\", moment(log.time).seconds()).format('x'))\n            }\n        });\n        \n        axios.post(config.API_URL + ENUMS.API_ROUTES.DAILY_LOG,\n            {\n                project_id: Number(projectId),\n                well_id: Number(wellId),\n                logs: val\n            }, {...HttpUtil.adminHttpHeaders()})\n            .then(res => {\n                if (res.status === 201) {\n                    fetchDailyLog(Number(wellId))\n                    addToast(\"Daily logs added successfully.\", { \n                        appearance: 'success',\n                        autoDismiss: true\n                    });\n                    resetForm(values);\n                }\n            })\n            .catch(e => {\n                console.log(e)\n            });\n    };\n\n    const fetchDailyLog = (well_id) => {\n        axios.get(config.API_URL + ENUMS.API_ROUTES.DAILY_LOG + '/' + well_id,\n            {\n                ...HttpUtil.adminHttpHeaders(),\n            })\n            .then(res => {\n                if (res.status === 200 && res.data) {\n                    let logs = [];\n                    if (res.data.logs) {\n                        logs = res.data.logs.map((log, index) => {\n                            return {\n                                key: index,\n                                date: moment(log.date).format(\"YYYY-MM-DD\"),\n                                time: moment(log.date).format(\"HH : mm\"),\n                                description: log.description,\n                            }\n                        })\n                    }\n                    setDailyLogs(logs);\n                }\n            })\n            .catch(e => {\n                console.log(e)\n            })\n    }\n\n    const setParams = (locationData) => {\n        if (locationData.state && locationData.state.projectId) {\n            setProjectId(locationData.state.projectId);\n            setWellId(locationData.state.wellId);\n            fetchDailyLog(locationData.state.wellId);\n            resetForm();\n        }\n        else if (locationData.search) {\n            const params = new URLSearchParams(locationData.search);\n            const projectIdSearch = params.get('projectId');\n            const wellIdSearch = params.get('wellId');\n            setProjectId(projectIdSearch);\n            setWellId(wellIdSearch);\n            fetchDailyLog(wellIdSearch);\n            resetForm();\n        }\n    }\n\n    useEffect(() => {\n        setParams(location);\n    }, [])\n\n    useEffect(() => {\n        return history.listen((locationData) => { \n            if(location.pathname === (ENUMS.ROUTES.ADMIN + ENUMS.ROUTES.DAILY_LOG)) {\n                setParams(locationData);\n            }\n        }) \n    }, [history])\n\n      \n    return (\n        <>\n            <Card bordered={false} style={{ width: '100%', marginBottom: '5px' }}>\n                <div className=\"max-w-580-px mx-auto\">\n                        <strong>Note: </strong>\n                         All times entered In tracking sheet are to be in 24 hour time format. The site layout and frac equipment info needs to be notated in the Daily log, with objectives including: \n                        <br></br>\n                        <br></br>\n                        <ul style={{listStyle: \"disc\"}}>\n                            <li>The distance from the last pump to the well (estimate) pip length </li>\n                            <li>Size of iron from pumps </li>\n                            <li>Pump types (triplex, quadplex, quinplex) </li>\n                            <li>Number of pumps </li>\n                            <li>Surface line volume </li>\n                            <li>Photographs to be collected of the equipment layout if allowed by client </li>\n                        </ul>\n                </div>\n            </Card>\n            <Card>\n                {/* <div className=\"text-right\">\n                    <Button type=\"primary\" >Submit log</Button>\n                </div> */}\n                <div className=\"md:ml-64\" style={{width: '650px'}}>\n                    <Row gutter={24} className=\"mb-2\">\n                        <Col span={6}><strong>Date</strong></Col>\n                        <Col span={6}><strong>Time</strong></Col>\n                        <Col span={10}><strong>Description</strong></Col>\n                    </Row>\n                    <Form\n                        form={form}\n                        name=\"dynamic_form_nest_item\"\n                        onFinish={onFinish}\n                        autoComplete=\"off\"\n                        initialValues={initialFormValues}\n                    >\n                        <Form.List name=\"dailyLogData\">\n                            {(fields, { add, remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                        <Row gutter={24} key={key}>\n                                            <Col span={6}>\n                                                <Form.Item\n                                                    {...restField}\n                                                    name={[name, 'date']}\n                                                    fieldKey={[fieldKey, 'date']}\n                                                    rules={[{ required: true, message: 'Missing date' }]}\n                                                >\n                                                    <DatePicker onChange={onChange} className=\"w-full\"/>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={6}>\n                                                <Form.Item\n                                                    {...restField}\n                                                    name={[name, 'time']}\n                                                    fieldKey={[fieldKey, 'time']}\n                                                    rules={[{ required: true, message: 'Missing time' }]}\n                                                >\n                                                    <TimePicker onChange={onChange} className=\"w-full\"/>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={10}>\n                                                <Form.Item\n                                                    {...restField}\n                                                    name={[name, 'description']}\n                                                    fieldKey={[fieldKey, 'description']}\n                                                    rules={[{ required: true, message: 'Missing description' }]}\n                                                    className=\"w-full\"\n                                                >\n                                                    <Input placeholder=\"Description\" className=\"w-full\"/>\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={2}>\n                                                <MinusCircleOutlined onClick={() => remove(name)} />\n                                            </Col>\n                                        </Row>\n                                    ))}\n                                    <Row gutter={24}>\n                                        <Col span={8}>\n                                            <Form.Item>\n                                                <Button\n                                                    type=\"dashed\"\n                                                    onClick={() => add()}\n                                                    block\n                                                    icon={<PlusOutlined />}\n                                                >\n                                                    Add line\n                                                </Button>\n                                            </Form.Item>\n                                        </Col>\n                                    </Row>\n                                    \n                                </>\n                            )}\n                        </Form.List>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Submit log\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </div>\n            </Card>\n            {\n                dailyLogs && \n                <Card>\n                    <div className=\"max-w-580-px mx-auto\">\n                        <div><h2 className=\"module-title\">All Logs</h2></div>\n                        <Table dataSource={dailyLogs} columns={columns} pagination={false} />\n                        {/* <Row gutter={24} className=\"mb-2\">\n                                    <Col span={5}><strong>Date</strong></Col>\n                                    <Col span={5}><strong>Time</strong></Col>\n                                    <Col span={14}><strong>Description</strong></Col>\n                                </Row>\n                        {dailyLogs.map(log => {\n                            return <>\n                                \n                                <Row gutter={24} className=\"mb-2\">\n                                    <Col span={5}>{moment(log.date).format(\"YYYY-MM-DD\")}</Col>\n                                    <Col span={5}>{moment(log.date).format(\"hh : mm\")}</Col>\n                                    <Col span={14}>{log.description}</Col>\n                                </Row>\n                            </>\n                        })} */}\n                    </div>\n                </Card>\n            }\n        </>\n    );\n}","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Modal/FileUploadModal.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Modal/ConfirmationModal.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/DataEditor/PasswordInput.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/DataEditor/SelectEditor.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/views/admin/Acccount.js",["308"],"import { Card } from 'antd';\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from 'react-redux';\n\n// components\nexport default function Account() {\n    const user = useSelector(state => state.authReducer.user);\n\n    useEffect(() => {\n        console.log(user)\n    })\n    return (\n        <>\n            <div style={{minHeight: \"80vh\"}} className=\"flex justify-center items-center bg-white\">\n                <div>\n                    <Card title=\"User Account\"  style={{width: '500px'}}>\n                        <div>\n                            Name: {user.username}\n                        </div>\n                        <div>\n                            Email: {user.email}\n                        </div>\n                    </Card>\n                </div>\n            </div>\n        </>\n    )\n}","/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Forms/ProjectCreate/ProjectInfo.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/constants/formInitialValues.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/DataEditor/NumberInput.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/util/FormDataSerializer.js",[],"/Users/subodhkalika/test-projects/projects/seismos_application/client/src/components/Grid/DataEditor/SelectShiftEditor.js",[],{"ruleId":"309","replacedBy":"310"},{"ruleId":"311","replacedBy":"312"},{"ruleId":"313","severity":1,"message":"314","line":13,"column":8,"nodeType":"315","messageId":"316","endLine":13,"endColumn":17},{"ruleId":"313","severity":1,"message":"317","line":24,"column":11,"nodeType":"315","messageId":"316","endLine":24,"endColumn":21},{"ruleId":"318","severity":1,"message":"319","line":67,"column":8,"nodeType":"320","endLine":67,"endColumn":28,"suggestions":"321"},{"ruleId":"313","severity":1,"message":"322","line":5,"column":24,"nodeType":"315","messageId":"316","endLine":5,"endColumn":34},{"ruleId":"323","severity":1,"message":"324","line":76,"column":31,"nodeType":"325","messageId":"326","endLine":76,"endColumn":33},{"ruleId":"318","severity":1,"message":"327","line":167,"column":8,"nodeType":"320","endLine":167,"endColumn":10,"suggestions":"328"},{"ruleId":"318","severity":1,"message":"329","line":192,"column":8,"nodeType":"320","endLine":192,"endColumn":17,"suggestions":"330"},{"ruleId":"309","replacedBy":"331"},{"ruleId":"311","replacedBy":"332"},{"ruleId":"309","replacedBy":"333"},{"ruleId":"311","replacedBy":"334"},{"ruleId":"313","severity":1,"message":"335","line":4,"column":10,"nodeType":"315","messageId":"316","endLine":4,"endColumn":14},{"ruleId":"323","severity":1,"message":"336","line":26,"column":34,"nodeType":"325","messageId":"326","endLine":26,"endColumn":36},{"ruleId":"337","severity":1,"message":"338","line":38,"column":24,"nodeType":"339","messageId":"340","endLine":38,"endColumn":52},{"ruleId":"313","severity":1,"message":"341","line":39,"column":12,"nodeType":"315","messageId":"316","endLine":39,"endColumn":22},{"ruleId":"323","severity":1,"message":"324","line":84,"column":23,"nodeType":"325","messageId":"326","endLine":84,"endColumn":25},{"ruleId":"323","severity":1,"message":"324","line":91,"column":78,"nodeType":"325","messageId":"326","endLine":91,"endColumn":80},{"ruleId":"323","severity":1,"message":"324","line":93,"column":78,"nodeType":"325","messageId":"326","endLine":93,"endColumn":80},{"ruleId":"313","severity":1,"message":"342","line":26,"column":12,"nodeType":"315","messageId":"316","endLine":26,"endColumn":25},{"ruleId":"313","severity":1,"message":"343","line":26,"column":27,"nodeType":"315","messageId":"316","endLine":26,"endColumn":43},{"ruleId":"313","severity":1,"message":"344","line":27,"column":12,"nodeType":"315","messageId":"316","endLine":27,"endColumn":21},{"ruleId":"318","severity":1,"message":"345","line":104,"column":8,"nodeType":"320","endLine":104,"endColumn":10,"suggestions":"346"},{"ruleId":"318","severity":1,"message":"347","line":112,"column":8,"nodeType":"320","endLine":112,"endColumn":17,"suggestions":"348"},{"ruleId":"313","severity":1,"message":"349","line":13,"column":8,"nodeType":"315","messageId":"316","endLine":13,"endColumn":14},{"ruleId":"313","severity":1,"message":"350","line":31,"column":12,"nodeType":"315","messageId":"316","endLine":31,"endColumn":29},{"ruleId":"313","severity":1,"message":"351","line":41,"column":12,"nodeType":"315","messageId":"316","endLine":41,"endColumn":42},{"ruleId":"313","severity":1,"message":"352","line":41,"column":44,"nodeType":"315","messageId":"316","endLine":41,"endColumn":77},{"ruleId":"313","severity":1,"message":"353","line":42,"column":12,"nodeType":"315","messageId":"316","endLine":42,"endColumn":53},{"ruleId":"313","severity":1,"message":"354","line":42,"column":55,"nodeType":"315","messageId":"316","endLine":42,"endColumn":99},{"ruleId":"313","severity":1,"message":"355","line":43,"column":12,"nodeType":"315","messageId":"316","endLine":43,"endColumn":32},{"ruleId":"313","severity":1,"message":"356","line":43,"column":34,"nodeType":"315","messageId":"316","endLine":43,"endColumn":57},{"ruleId":"313","severity":1,"message":"357","line":44,"column":12,"nodeType":"315","messageId":"316","endLine":44,"endColumn":34},{"ruleId":"313","severity":1,"message":"358","line":44,"column":36,"nodeType":"315","messageId":"316","endLine":44,"endColumn":61},{"ruleId":"313","severity":1,"message":"359","line":45,"column":12,"nodeType":"315","messageId":"316","endLine":45,"endColumn":32},{"ruleId":"313","severity":1,"message":"360","line":45,"column":34,"nodeType":"315","messageId":"316","endLine":45,"endColumn":57},{"ruleId":"313","severity":1,"message":"361","line":46,"column":12,"nodeType":"315","messageId":"316","endLine":46,"endColumn":37},{"ruleId":"313","severity":1,"message":"362","line":46,"column":39,"nodeType":"315","messageId":"316","endLine":46,"endColumn":67},{"ruleId":"313","severity":1,"message":"363","line":47,"column":12,"nodeType":"315","messageId":"316","endLine":47,"endColumn":36},{"ruleId":"313","severity":1,"message":"364","line":47,"column":38,"nodeType":"315","messageId":"316","endLine":47,"endColumn":65},{"ruleId":"318","severity":1,"message":"365","line":363,"column":8,"nodeType":"320","endLine":363,"endColumn":17,"suggestions":"366"},{"ruleId":"313","severity":1,"message":"367","line":10,"column":19,"nodeType":"315","messageId":"316","endLine":10,"endColumn":30},{"ruleId":"368","severity":1,"message":"369","line":124,"column":38,"nodeType":"370","messageId":"371","endLine":124,"endColumn":40},{"ruleId":"318","severity":1,"message":"345","line":128,"column":8,"nodeType":"320","endLine":128,"endColumn":10,"suggestions":"372"},{"ruleId":"318","severity":1,"message":"347","line":136,"column":8,"nodeType":"320","endLine":136,"endColumn":17,"suggestions":"373"},{"ruleId":"313","severity":1,"message":"374","line":2,"column":28,"nodeType":"315","messageId":"316","endLine":2,"endColumn":36},"no-native-reassign",["375"],"no-negated-in-lhs",["376"],"no-unused-vars","'FAKE_DATA' is defined but never used.","Identifier","unusedVar","'logOutUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveUserState'. Either include it or remove the dependency array.","ArrayExpression",["377"],"'Breadcrumb' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'fetchProjectById', 'history', 'location.pathname', 'location.search', 'location.state', 'projectIds', 'props.isAuthenticated', and 'sidebarMenu.length'. Either include them or remove the dependency array.",["378"],"React Hook useEffect has missing dependencies: 'fetchProjectById', 'props.isAuthenticated', and 'sidebarMenu.length'. Either include them or remove the dependency array.",["379"],["375"],["376"],["375"],["376"],"'Link' is defined but never used.","Expected '!==' and instead saw '!='.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'pagination' is assigned a value but never used.","'defaultValues' is assigned a value but never used.","'setDefaultValues' is assigned a value but never used.","'projectId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'location' and 'setParams'. Either include them or remove the dependency array.",["380"],"React Hook useEffect has missing dependencies: 'location.pathname' and 'setParams'. Either include them or remove the dependency array.",["381"],"'moment' is defined but never used.","'isLoadingFormData' is assigned a value but never used.","'resetDynamicFormNestItemValues' is assigned a value but never used.","'setResetDynamicFormNestItemValues' is assigned a value but never used.","'resetPerforationIntervalInformationValues' is assigned a value but never used.","'setResetPerforationIntervalInformationValues' is assigned a value but never used.","'resetStageDataValues' is assigned a value but never used.","'setResetStageDataValues' is assigned a value but never used.","'resetPropantFormValues' is assigned a value but never used.","'setResetPropantFormValues' is assigned a value but never used.","'resetFluidFormValues' is assigned a value but never used.","'setResetFluidFormValues' is assigned a value but never used.","'resetActiveDataFormValues' is assigned a value but never used.","'setResetActiveDataFormValues' is assigned a value but never used.","'resetNotesFataFormValues' is assigned a value but never used.","'setResetNotesFataFormValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchStagesSubmitted'. Either include it or remove the dependency array.",["382"],"'CSVDownload' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["383"],["384"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"391","fix":"397"},{"desc":"393","fix":"398"},"Update the dependencies array to be: [addToast, dispatch, saveUserState]",{"range":"399","text":"400"},"Update the dependencies array to be: [fetchProjectById, history, location.pathname, location.search, location.state, projectIds, props.isAuthenticated, sidebarMenu.length]",{"range":"401","text":"402"},"Update the dependencies array to be: [fetchProjectById, history, props.isAuthenticated, sidebarMenu.length]",{"range":"403","text":"404"},"Update the dependencies array to be: [location, setParams]",{"range":"405","text":"406"},"Update the dependencies array to be: [history, location.pathname, setParams]",{"range":"407","text":"408"},"Update the dependencies array to be: [fetchStagesSubmitted, history]",{"range":"409","text":"410"},{"range":"411","text":"406"},{"range":"412","text":"408"},[2326,2346],"[addToast, dispatch, saveUserState]",[8146,8148],"[fetchProjectById, history, location.pathname, location.search, location.state, projectIds, props.isAuthenticated, sidebarMenu.length]",[9236,9245],"[fetchProjectById, history, props.isAuthenticated, sidebarMenu.length]",[3632,3634],"[location, setParams]",[3875,3884],"[history, location.pathname, setParams]",[13133,13142],"[fetchStagesSubmitted, history]",[4295,4297],[4533,4542]]